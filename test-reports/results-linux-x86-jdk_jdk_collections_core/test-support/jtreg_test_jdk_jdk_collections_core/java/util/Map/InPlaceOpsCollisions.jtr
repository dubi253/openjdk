#Test Results (version 2)
#Fri Mar 15 23:51:19 UTC 2024
#-----testdescription-----
$file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
$root=/home/runner/work/openjdk/openjdk/test/jdk
keywords=bug8005698 othervm testng
run=USER_SPECIFIED testng/othervm -Dtest.map.collisions.shortrun\=true InPlaceOpsCollisions\n
source=InPlaceOpsCollisions.java
title=Ensure overrides of in-place operations in Maps behave well with lots of collisions.

#-----environment-----

#-----testresult-----
description=file\:/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
elapsed=14463 0\:00\:14.463
end=Fri Mar 15 23\:51\:19 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az1108-60.qx2vdsazxcienorwhmthlehiqd.ex.internal.cloudapp.net
javatestOS=Linux 6.5.0-1016-azure (amd64)
javatestVersion=6.0-ea+b24-2024-03-15-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Fri Mar 15 23\:51\:04 UTC 2024
test=java/util/Map/InPlaceOpsCollisions.java
testJDK=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
testJDK_OS=[name\:Linux,arch\:i386,version\:6.5.0-1016-azure,family\:linux,simple_arch\:i586,simple_version\:6.5,processors\:4,maxMemory\:16757346304,maxSwap\:4294963200]
testJDK_os.arch=i386
testJDK_os.name=Linux
testJDK_os.version=6.5.0-1016-azure
totalTime=14463
user.name=runner
work=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/java/util/Map

#section:script_messages
----------messages:(4/315)----------
JDK under test: /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-ced5e427db9ce5a0c5a328b30c33edee96767763)
OpenJDK Server VM (build 23-internal-dubi253-ced5e427db9ce5a0c5a328b30c33edee96767763, mixed mode, sharing)

#section:build
----------messages:(7/230)----------
command: build InPlaceOpsCollisions
reason: Named class compiled on demand
started: Fri Mar 15 23:51:04 UTC 2024
Test directory:
  compile: InPlaceOpsCollisions
finished: Fri Mar 15 23:51:04 UTC 2024
elapsed time (seconds): 0.152
result: Passed. Build successful

#section:compile
----------messages:(7/283)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
reason: .class file out of date or does not exist
started: Fri Mar 15 23:51:04 UTC 2024
Mode: agentvm
Agent id: 2
finished: Fri Mar 15 23:51:04 UTC 2024
elapsed time (seconds): 0.152
----------configuration:(13/954)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/patches/java.base

javac compilation environment
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(35/3534)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
result: Passed. Compilation successful

#section:testng
----------messages:(6/323)----------
command: testng -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions
reason: User specified action: run testng/othervm -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions 
started: Fri Mar 15 23:51:04 UTC 2024
Mode: othervm [/othervm specified]
finished: Fri Mar 15 23:51:19 UTC 2024
elapsed time (seconds): 14.31
----------configuration:(0/0)----------
----------System.out:(384/60023)----------
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0xa5532a48@2dc52e): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0xa5532db0@1f0446f): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0xa5533118@1ee0136): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0xa5533480@507d9e): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0xa55337e8@1c4c789): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@5a71c, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@a6b494, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1f383af, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@17bac0a, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@5a71c, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@a6b494, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1f383af, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@17bac0a, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0xa5532a48@2dc52e): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0xa5532db0@1f0446f): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0xa5533118@1ee0136): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0xa5533480@507d9e): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0xa55337e8@1c4c789): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1129df1, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1b02719, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@b49e58, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@79fc92, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1659d7e, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1a2bf2d, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@15424d9, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@119d639, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@54ca93, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@7cda19, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@9f63a6, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@3219a, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1db60fe, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@97cd, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@888bf5, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@162b2aa, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@133469e, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0xa54bf870@1ab211, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@929306, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@a628f6, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@c0bf62, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1363804, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@110645f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@75a1d7, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8aa982, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1c970c2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@286abe, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@d02923, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@8bc0fe, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@18ab0db, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1847e72, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@921eb4, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@9218, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1dda7f9, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@120d8cf, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0xa54bf870@1605592, "Extra Value"): success

===============================================
java/util/Map/InPlaceOpsCollisions.java
Total tests run: 378, Passes: 378, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(37/3739)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
CLASSPATH=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java \\
        -Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d \\
        -Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d \\
        -Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/Map/InPlaceOpsCollisions.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=12.5 \\
        -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        -Djava.library.path=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.map.collisions.shortrun=true \\
        com.sun.javatest.regtest.agent.MainWrapper /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/java/util/Map/InPlaceOpsCollisions.d/testng.0.jta java/util/Map/InPlaceOpsCollisions.java false InPlaceOpsCollisions
result: Passed. Execution successful


test result: Passed. Execution successful
