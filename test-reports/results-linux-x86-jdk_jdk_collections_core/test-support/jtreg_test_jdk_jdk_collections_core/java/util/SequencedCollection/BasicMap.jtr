#Test Results (version 2)
#Mon Apr 29 00:37:28 UTC 2024
#-----testdescription-----
$file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java
$root=/home/runner/work/openjdk/openjdk/test/jdk
keywords=bug8266571 testng
modules=java.base/java.util\:open
run=USER_SPECIFIED build SimpleSortedMap\nUSER_SPECIFIED testng BasicMap\n
source=BasicMap.java
title=Basic tests for SequencedMap

#-----environment-----

#-----testresult-----
description=file\:/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java
elapsed=600 0\:00\:00.600
end=Mon Apr 29 00\:37\:28 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az714-682.22nzjvkrszmuhkvqy55p1tioig.phxx.internal.cloudapp.net
javatestOS=Linux 6.5.0-1018-azure (amd64)
javatestVersion=6.0-ea+b24-2024-04-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/java.util\:open
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile build compile testng
start=Mon Apr 29 00\:37\:28 UTC 2024
test=java/util/SequencedCollection/BasicMap.java
testJDK=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
testJDK_OS=[name\:Linux,arch\:i386,version\:6.5.0-1018-azure,family\:linux,simple_arch\:i586,simple_version\:6.5,processors\:4,maxMemory\:16757342208,maxSwap\:4294963200]
testJDK_os.arch=i386
testJDK_os.name=Linux
testJDK_os.version=6.5.0-1018-azure
totalTime=601
user.name=runner
work=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/java/util/SequencedCollection

#section:script_messages
----------messages:(4/315)----------
JDK under test: /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/239)----------
command: build SimpleSortedMap
reason: User specified action: run build SimpleSortedMap 
started: Mon Apr 29 00:37:28 UTC 2024
Test directory:
  compile: SimpleSortedMap
finished: Mon Apr 29 00:37:28 UTC 2024
elapsed time (seconds): 0.055
result: Passed. Build successful

#section:compile
----------messages:(8/352)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/SimpleSortedMap.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:28 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 2
finished: Mon Apr 29 00:37:28 UTC 2024
elapsed time (seconds): 0.055
----------configuration:(14/1015)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/patches/java.base

javac compilation environment
  add modules: java.base
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(37/3741)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/1 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/SimpleSortedMap.java
result: Passed. Compilation successful

#section:build
----------messages:(7/206)----------
command: build BasicMap
reason: Named class compiled on demand
started: Mon Apr 29 00:37:28 UTC 2024
Test directory:
  compile: BasicMap
finished: Mon Apr 29 00:37:28 UTC 2024
elapsed time (seconds): 0.345
result: Passed. Build successful

#section:compile
----------messages:(8/345)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:28 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 2
finished: Mon Apr 29 00:37:28 UTC 2024
elapsed time (seconds): 0.345
----------configuration:(14/1015)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/patches/java.base

javac compilation environment
  add modules: java.base
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(37/3734)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/1 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java
----------direct:(2/181)----------
Note: /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
result: Passed. Compilation successful

#section:testng
----------messages:(8/281)----------
command: testng BasicMap
reason: User specified action: run testng BasicMap 
started: Mon Apr 29 00:37:28 UTC 2024
Mode: agentvm
Agent id: 6
Additional opens to unnamed modules from @modules: java.base/java.util
finished: Mon Apr 29 00:37:28 UTC 2024
elapsed time (seconds): 0.199
----------configuration:(14/1014)----------
Boot Layer
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/junit-platform-console-standalone-1.9.2.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/patches/java.base

Test Layer
  add opens:  java.base/java.util ALL-UNNAMED
  class path: /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d 
              /home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection 

----------rerun:(29/3242)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/1 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java \\
        -Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d \\
        -Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection \\
        -Dtest.modules=java.base/java.util:open \\
        -classpath /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/0/java/util/SequencedCollection/BasicMap.d:/home/runner/work/openjdk/openjdk/test/jdk/java/util/SequencedCollection:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
        com.sun.javatest.regtest.agent.TestNGRunner java/util/SequencedCollection/BasicMap.java false BasicMap
----------System.out:(303/29452)----------
test BasicMap.testChecked("ChkNav", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testChecked("ChkSorted", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testDoubleReverse("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEmptyFirstEntry("EmptyNavigableMap", {}, []): success
test BasicMap.testEmptyFirstEntry("EmptySortedMap", {}, []): success
test BasicMap.testEmptyFirstEntry("LinkedHashMap", {}, []): success
test BasicMap.testEmptyFirstEntry("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyFirstEntry("TreeMap", {}, []): success
test BasicMap.testEmptyFirstEntry("UnmodMap", {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEmptyLastEntry("EmptyNavigableMap", {}, []): success
test BasicMap.testEmptyLastEntry("EmptySortedMap", {}, []): success
test BasicMap.testEmptyLastEntry("LinkedHashMap", {}, []): success
test BasicMap.testEmptyLastEntry("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyLastEntry("TreeMap", {}, []): success
test BasicMap.testEmptyLastEntry("UnmodMap", {}, []): success
test BasicMap.testEmptyPollFirst("LinkedHashMap", {}, []): success
test BasicMap.testEmptyPollFirst("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyPollFirst("TreeMap", {}, []): success
test BasicMap.testEmptyPollLast("LinkedHashMap", {}, []): success
test BasicMap.testEmptyPollLast("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyPollLast("TreeMap", {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("EmptyNavigableMap", {}, []): success
test BasicMap.testFundamentals("EmptySortedMap", {}, []): success
test BasicMap.testFundamentals("LinkedHashMap", {}, []): success
test BasicMap.testFundamentals("SimpleSortedMap", {}, []): success
test BasicMap.testFundamentals("TreeMap", {}, []): success
test BasicMap.testFundamentals("UnmodMap", {}, []): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testNotSerializable("LinkedHashMap", {e=5, d=4, c=3, b=2, a=1}): success
test BasicMap.testNotSerializable("UnmodMap", {e=5, d=4, c=3, b=2, a=1}): success
test BasicMap.testNullableKeyValue("firstEntry"): success
test BasicMap.testNullableKeyValue("lastEntry"): success
test BasicMap.testNullableKeyValue("pollFirstEntry"): success
test BasicMap.testNullableKeyValue("pollLastEntry"): success
test BasicMap.testPollFirst("LinkedHashMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirst("SimpleSortedMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirst("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("LinkedHashMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("SimpleSortedMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("LinkedHashMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("SimpleSortedMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("LinkedHashMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("SimpleSortedMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutFirst("LinkedHashMap", java.util.LinkedHashMap@1082fc6, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutFirstRev("LinkedHashMap", java.util.LinkedHashMap@18db21, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutLast("LinkedHashMap", java.util.LinkedHashMap@24b1a8, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutLastRev("LinkedHashMap", java.util.LinkedHashMap@1a83e79, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutThrows("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutThrows("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodNav", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodSorted", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposCompute("LinkedHashMap", false, java.util.LinkedHashMap@773cf5, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposCompute("LinkedHashMap", true, java.util.LinkedHashMap@e58841, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposComputeIfAbsent("LinkedHashMap", false, java.util.LinkedHashMap@11cd3f2, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposComputeIfAbsent("LinkedHashMap", true, java.util.LinkedHashMap@2fcbb, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposMerge("LinkedHashMap", false, java.util.LinkedHashMap@1f3ecaf, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposMerge("LinkedHashMap", true, java.util.LinkedHashMap@13484d3, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPut("LinkedHashMap", false, java.util.LinkedHashMap@13f71e5, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPut("LinkedHashMap", true, java.util.LinkedHashMap@1cace03, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutAll("LinkedHashMap", false, java.util.LinkedHashMap@1e6713b, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutAll("LinkedHashMap", true, java.util.LinkedHashMap@744d3e, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutIfAbsent("LinkedHashMap", false, java.util.LinkedHashMap@1c3faf4, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutIfAbsent("LinkedHashMap", true, java.util.LinkedHashMap@1133b01, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success

===============================================
java/util/SequencedCollection/BasicMap.java
Total tests run: 297, Passes: 297, Failures: 0, Skips: 0
===============================================

----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
