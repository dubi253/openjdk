#Test Results (version 2)
#Tue Mar 05 01:42:08 UTC 2024
#-----testdescription-----
$file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
$root=/Users/runner/work/openjdk/openjdk/test/jdk
keywords=bug8005698 othervm testng
run=USER_SPECIFIED testng/othervm -Dtest.map.collisions.shortrun\=true InPlaceOpsCollisions\n
source=InPlaceOpsCollisions.java
title=Ensure overrides of in-place operations in Maps behave well with lots of collisions.

#-----environment-----

#-----testresult-----
description=file\:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
elapsed=28616 0\:00\:28.616
end=Tue Mar 05 01\:42\:08 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=192.168.64.23
javatestOS=Mac OS X 13.6.4 (x86_64)
javatestVersion=6.0-ea+b24-2024-02-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Tue Mar 05 01\:41\:40 UTC 2024
test=java/util/Map/InPlaceOpsCollisions.java
testJDK=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
testJDK_OS=[name\:Mac OS X,arch\:x86_64,version\:13.6.4,family\:mac,simple_arch\:x64,simple_version\:13.6,processors\:4,maxMemory\:15032385536,maxSwap\:0]
testJDK_os.arch=x86_64
testJDK_os.name=Mac OS X
testJDK_os.version=13.6.4
totalTime=28617
user.name=runner
work=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/java/util/Map

#section:script_messages
----------messages:(4/341)----------
JDK under test: /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-69fdbdd1519928e6c4569a11d14800b4d0f71733)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-69fdbdd1519928e6c4569a11d14800b4d0f71733, mixed mode, sharing)

#section:build
----------messages:(7/230)----------
command: build InPlaceOpsCollisions
reason: Named class compiled on demand
started: Tue Mar 05 01:41:40 UTC 2024
Test directory:
  compile: InPlaceOpsCollisions
finished: Tue Mar 05 01:41:40 UTC 2024
elapsed time (seconds): 0.284
result: Passed. Build successful

#section:compile
----------messages:(7/284)----------
command: compile /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
reason: .class file out of date or does not exist
started: Tue Mar 05 01:41:40 UTC 2024
Mode: agentvm
Agent id: 2
finished: Tue Mar 05 01:41:40 UTC 2024
elapsed time (seconds): 0.284
----------configuration:(13/963)----------
Boot Layer (javac runtime environment)
  class path: /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/patches/java.base

javac compilation environment
  source path: /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map
  class path:  /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map
               /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(33/3495)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/1 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -J-Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java \\
        -J-Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -J-Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -J-Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d \\
        -J-Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d \\
        -J-Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -d /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d \\
        -sourcepath /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -classpath /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map:/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
result: Passed. Compilation successful

#section:testng
----------messages:(6/323)----------
command: testng -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions
reason: User specified action: run testng/othervm -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions 
started: Tue Mar 05 01:41:40 UTC 2024
Mode: othervm [/othervm specified]
finished: Tue Mar 05 01:42:08 UTC 2024
elapsed time (seconds): 28.33
----------configuration:(0/0)----------
----------System.out:(384/63643)----------
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0x000000012903e668@2d7b8258): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0x000000012903e880@43a517a0): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0x000000012903ea98@3e265e4a): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0x000000012903ecb0@428e0ace): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0x000000012903eec8@72b158e5): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5ae56a1a, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5da02587, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@978772e, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6ffc4cc1, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5ae56a1a, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5da02587, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@978772e, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6ffc4cc1, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0x000000012903e668@2d7b8258): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0x000000012903e880@43a517a0): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0x000000012903ea98@3e265e4a): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0x000000012903ecb0@428e0ace): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0x000000012903eec8@72b158e5): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3edca378, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@e11200a, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3ffba2e0, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@36058749, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@301d1bde, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@29ab2c32, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@59a8ec1c, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@358946c6, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@56c951b, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@7ccae1af, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@57969a4d, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@378146b, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2715d8b2, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d3a7ac3, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@46c24ece, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@113ba80f, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3e4d9d5c, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000000129026688@6eaa6759, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f404d8f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3aa1f040, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4634ee88, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@4e5a33e8, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5f6424e6, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1cbf81d5, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@1f5bafed, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@557c49da, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@410b0b7d, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2d44751b, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@584ddf8f, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@42126863, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@400d0e03, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@3056fffc, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@610248d4, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5a36f647, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@5971b66c, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000000129026688@2bc75c7a, "Extra Value"): success

===============================================
java/util/Map/InPlaceOpsCollisions.java
Total tests run: 378, Passes: 378, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(35/3701)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/scratch/1 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
CLASSPATH=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java \\
        -Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d \\
        -Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d \\
        -Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/classes/1/java/util/Map/InPlaceOpsCollisions.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/Map \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=12.5 \\
        -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/tmp \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        -Djava.library.path=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.map.collisions.shortrun=true \\
        com.sun.javatest.regtest.agent.MainWrapper /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_jdk_collections_core/java/util/Map/InPlaceOpsCollisions.d/testng.0.jta java/util/Map/InPlaceOpsCollisions.java false InPlaceOpsCollisions
result: Passed. Execution successful


test result: Passed. Execution successful
