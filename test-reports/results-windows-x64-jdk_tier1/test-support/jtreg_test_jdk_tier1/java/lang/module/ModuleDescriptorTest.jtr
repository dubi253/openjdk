#Test Results (version 2)
#Mon Apr 29 01:12:40 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
enablePreview=true
keywords=bug8142968 bug8158456 bug8298875 testng
library=/test/lib
modules=java.base/jdk.internal.access java.base/jdk.internal.module
run=USER_SPECIFIED build jdk.test.lib.util.ModuleInfoWriter\r\nUSER_SPECIFIED testng ModuleDescriptorTest\r\n
source=ModuleDescriptorTest.java
title=Basic test for java.lang.module.ModuleDescriptor and its builder

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/lang/module/ModuleDescriptorTest.java
elapsed=1098 0\:00\:01.098
end=Mon Apr 29 01\:12\:40 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az978-691.aqccnys5fsauxnvc2cwlk3lemf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-04-29-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/jdk.internal.access java.base/jdk.internal.module
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build build compile testng
start=Mon Apr 29 01\:12\:39 UTC 2024
test=java/lang/module/ModuleDescriptorTest.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=1098
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\lang\\module

#section:script_messages
----------messages:(7/536)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)
Library /test/lib; kind: packages
   source directory: D:\\a\\openjdk\\openjdk\\test\\lib
   class directory: D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib

#section:build
----------messages:(5/237)----------
command: build jdk.test.lib.util.ModuleInfoWriter
reason: User specified action: run build jdk.test.lib.util.ModuleInfoWriter 
started: Mon Apr 29 01:12:39 UTC 2024
finished: Mon Apr 29 01:12:39 UTC 2024
elapsed time (seconds): 0.0
result: Passed. All files up to date

#section:build
----------messages:(7/237)----------
command: build ModuleDescriptorTest
reason: Named class compiled on demand
started: Mon Apr 29 01:12:39 UTC 2024
Test directory:
  compile: ModuleDescriptorTest
finished: Mon Apr 29 01:12:39 UTC 2024
elapsed time (seconds): 0.078
result: Passed. Build successful

#section:compile
----------messages:(8/460)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:12:39 UTC 2024
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.access=ALL-UNNAMED --add-exports java.base/jdk.internal.module=ALL-UNNAMED
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:12:39 UTC 2024
elapsed time (seconds): 0.078
----------configuration:(18/1243)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  add modules: java.base                     
  add exports: java.base/jdk.internal.access ALL-UNNAMED
               java.base/jdk.internal.module ALL-UNNAMED
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module 
               D:\\a\\openjdk\\openjdk\\test\\lib 
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module 
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d 
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 

----------rerun:(43/4367)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/lang/module/ModuleDescriptorTest.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\test\\lib' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib' \\
        -J-Dtest.modules='java.base/jdk.internal.access java.base/jdk.internal.module' \\
        -J-Dtest.enable.preview=true \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.access=ALL-UNNAMED \\
        --add-exports java.base/jdk.internal.module=ALL-UNNAMED \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\test\\lib' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' \\
        --enable-preview \\
        --source=23 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java'
----------direct:(2/176)*----------
Note: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java uses preview features of Java SE 23.
Note: Recompile with -Xlint:preview for details.
result: Passed. Compilation successful

#section:testng
----------messages:(7/431)----------
command: testng ModuleDescriptorTest
reason: User specified action: run testng ModuleDescriptorTest 
started: Mon Apr 29 01:12:39 UTC 2024
Mode: othervm [test requires --enable-preview]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.access=ALL-UNNAMED --add-exports java.base/jdk.internal.module=ALL-UNNAMED
finished: Mon Apr 29 01:12:40 UTC 2024
elapsed time (seconds): 1.02
----------configuration:(5/177)----------
Boot Layer
  add modules: java.base                     
  add exports: java.base/jdk.internal.access ALL-UNNAMED
               java.base/jdk.internal.module ALL-UNNAMED

----------System.out:(449/33017)----------
test ModuleDescriptorTest.testAutomaticModule(): success
test ModuleDescriptorTest.testBadModuleName(null, null): success
test ModuleDescriptorTest.testBadModuleName("1", null): success
test ModuleDescriptorTest.testBadModuleName("1foo", null): success
test ModuleDescriptorTest.testBadModuleName(".foo", null): success
test ModuleDescriptorTest.testBadModuleName("foo.", null): success
test ModuleDescriptorTest.testBadModuleName("[foo]", null): success
test ModuleDescriptorTest.testBadModuleName("foo.1", null): success
test ModuleDescriptorTest.testBadModuleName("1foo.bar", null): success
test ModuleDescriptorTest.testBadModuleName("foo.1bar", null): success
test ModuleDescriptorTest.testBadModuleName("foo.[bar]", null): success
test ModuleDescriptorTest.testBadModuleName("foo..bar", null): success
test ModuleDescriptorTest.testBadModuleName("foo.bar.1", null): success
test ModuleDescriptorTest.testBadModuleName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testBadModuleName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testBadModuleName("class", null): success
test ModuleDescriptorTest.testBadModuleName("interface", null): success
test ModuleDescriptorTest.testBadModuleName("true", null): success
test ModuleDescriptorTest.testBadModuleName("false", null): success
test ModuleDescriptorTest.testBadModuleName("null", null): success
test ModuleDescriptorTest.testBadModuleName("x.class", null): success
test ModuleDescriptorTest.testBadModuleName("x.interface", null): success
test ModuleDescriptorTest.testBadModuleName("x.true", null): success
test ModuleDescriptorTest.testBadModuleName("x.false", null): success
test ModuleDescriptorTest.testBadModuleName("x.null", null): success
test ModuleDescriptorTest.testBadModuleName("class.x", null): success
test ModuleDescriptorTest.testBadModuleName("interface.x", null): success
test ModuleDescriptorTest.testBadModuleName("true.x", null): success
test ModuleDescriptorTest.testBadModuleName("false.x", null): success
test ModuleDescriptorTest.testBadModuleName("null.x", null): success
test ModuleDescriptorTest.testBadModuleName("x.class.x", null): success
test ModuleDescriptorTest.testBadModuleName("x.interface.x", null): success
test ModuleDescriptorTest.testBadModuleName("x.true.x", null): success
test ModuleDescriptorTest.testBadModuleName("x.false.x", null): success
test ModuleDescriptorTest.testBadModuleName("x.null.x", null): success
test ModuleDescriptorTest.testBadModuleName("_", null): success
test ModuleDescriptorTest.testCompare(java.lang.module.ModuleDescriptor@19999ba2, java.lang.module.ModuleDescriptor@545add47): success
test ModuleDescriptorTest.testCompare(java.lang.module.ModuleDescriptor@43e5eae4, java.lang.module.ModuleDescriptor@16742db1): success
test ModuleDescriptorTest.testCompare(java.lang.module.ModuleDescriptor@7e85454a, java.lang.module.ModuleDescriptor@125b22b4): success
test ModuleDescriptorTest.testCompare(java.lang.module.ModuleDescriptor@2420a1a, java.lang.module.ModuleDescriptor@5639a00d): success
test ModuleDescriptorTest.testEmptyVersion(): success
test ModuleDescriptorTest.testEqualsAndHashCode(): success
test ModuleDescriptorTest.testExportsCompare(): success
test ModuleDescriptorTest.testExportsCompareWithDifferentModifiers(): success
test ModuleDescriptorTest.testExportsCompareWithDifferentTargets(): success
test ModuleDescriptorTest.testExportsCompareWithSameModifiers(): success
test ModuleDescriptorTest.testExportsCompareWithSameTargets(): success
test ModuleDescriptorTest.testExportsExports(): success
test ModuleDescriptorTest.testExportsOnAutomaticModule1(): success
test ModuleDescriptorTest.testExportsOnAutomaticModule2(): success
test ModuleDescriptorTest.testExportsToAll(): success
test ModuleDescriptorTest.testExportsToAllWithModifier(): success
test ModuleDescriptorTest.testExportsToString(): success
test ModuleDescriptorTest.testExportsToTarget(): success
test ModuleDescriptorTest.testExportsToTargetWithModifier(): success
test ModuleDescriptorTest.testExportsToTargets(): success
test ModuleDescriptorTest.testExportsWithBadName(null, null): success
test ModuleDescriptorTest.testExportsWithBadName("1", null): success
test ModuleDescriptorTest.testExportsWithBadName("1foo", null): success
test ModuleDescriptorTest.testExportsWithBadName(".foo", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.", null): success
test ModuleDescriptorTest.testExportsWithBadName("[foo]", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.1", null): success
test ModuleDescriptorTest.testExportsWithBadName("1foo.bar", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.1bar", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.[bar]", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo..bar", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.bar.1", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testExportsWithBadName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testExportsWithBadName("class", null): success
test ModuleDescriptorTest.testExportsWithBadName("interface", null): success
test ModuleDescriptorTest.testExportsWithBadName("true", null): success
test ModuleDescriptorTest.testExportsWithBadName("false", null): success
test ModuleDescriptorTest.testExportsWithBadName("null", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.class", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.interface", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.true", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.false", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.null", null): success
test ModuleDescriptorTest.testExportsWithBadName("class.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("interface.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("true.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("false.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("null.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.class.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.interface.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.true.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.false.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("x.null.x", null): success
test ModuleDescriptorTest.testExportsWithBadName("_", null): success
test ModuleDescriptorTest.testExportsWithDuplicate1(): success
test ModuleDescriptorTest.testExportsWithDuplicate2(): success
test ModuleDescriptorTest.testExportsWithEmptySet(): success
test ModuleDescriptorTest.testExportsWithNullExports(): success
test ModuleDescriptorTest.testExportsWithNullTargets(): success
test ModuleDescriptorTest.testIsAutomatic(): success
test ModuleDescriptorTest.testIsOpen(): success
test ModuleDescriptorTest.testMainClass(): success
test ModuleDescriptorTest.testMainClassWithBadName(null, null): success
test ModuleDescriptorTest.testMainClassWithBadName("1", null): success
test ModuleDescriptorTest.testMainClassWithBadName("1foo", null): success
test ModuleDescriptorTest.testMainClassWithBadName(".foo", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.", null): success
test ModuleDescriptorTest.testMainClassWithBadName("[foo]", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.1", null): success
test ModuleDescriptorTest.testMainClassWithBadName("1foo.bar", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.1bar", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.[bar]", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo..bar", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.bar.1", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testMainClassWithBadName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testMainClassWithBadName("class", null): success
test ModuleDescriptorTest.testMainClassWithBadName("interface", null): success
test ModuleDescriptorTest.testMainClassWithBadName("true", null): success
test ModuleDescriptorTest.testMainClassWithBadName("false", null): success
test ModuleDescriptorTest.testMainClassWithBadName("null", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.class", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.interface", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.true", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.false", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.null", null): success
test ModuleDescriptorTest.testMainClassWithBadName("class.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("interface.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("true.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("false.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("null.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.class.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.interface.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.true.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.false.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("x.null.x", null): success
test ModuleDescriptorTest.testMainClassWithBadName("_", null): success
test ModuleDescriptorTest.testMainClassWithSimpleIdentifier(): success
test ModuleDescriptorTest.testModuleName(): success
test ModuleDescriptorTest.testNewModuleToBuildAutomaticAndOpenModule(): success
test ModuleDescriptorTest.testNewModuleToBuildAutomaticModule(): success
test ModuleDescriptorTest.testNewModuleToBuildOpenModule(): success
test ModuleDescriptorTest.testNullVersion1(): success
test ModuleDescriptorTest.testNullVersion2(): success
test ModuleDescriptorTest.testOpenModule(): success
test ModuleDescriptorTest.testOpensCompare(): success
test ModuleDescriptorTest.testOpensCompareWithDifferentModifiers(): success
test ModuleDescriptorTest.testOpensCompareWithDifferentTargets(): success
test ModuleDescriptorTest.testOpensCompareWithSameModifiers(): success
test ModuleDescriptorTest.testOpensCompareWithSameTargets(): success
test ModuleDescriptorTest.testOpensOnAutomaticModule1(): success
test ModuleDescriptorTest.testOpensOnAutomaticModule2(): success
test ModuleDescriptorTest.testOpensOnOpenModule1(): success
test ModuleDescriptorTest.testOpensOnOpenModule2(): success
test ModuleDescriptorTest.testOpensOpens(): success
test ModuleDescriptorTest.testOpensToAll(): success
test ModuleDescriptorTest.testOpensToString(): success
test ModuleDescriptorTest.testOpensToTarget(): success
test ModuleDescriptorTest.testOpensToTargets(): success
test ModuleDescriptorTest.testOpensWithBadName(null, null): success
test ModuleDescriptorTest.testOpensWithBadName("1", null): success
test ModuleDescriptorTest.testOpensWithBadName("1foo", null): success
test ModuleDescriptorTest.testOpensWithBadName(".foo", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.", null): success
test ModuleDescriptorTest.testOpensWithBadName("[foo]", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.1", null): success
test ModuleDescriptorTest.testOpensWithBadName("1foo.bar", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.1bar", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.[bar]", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo..bar", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.bar.1", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testOpensWithBadName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testOpensWithBadName("class", null): success
test ModuleDescriptorTest.testOpensWithBadName("interface", null): success
test ModuleDescriptorTest.testOpensWithBadName("true", null): success
test ModuleDescriptorTest.testOpensWithBadName("false", null): success
test ModuleDescriptorTest.testOpensWithBadName("null", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.class", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.interface", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.true", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.false", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.null", null): success
test ModuleDescriptorTest.testOpensWithBadName("class.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("interface.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("true.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("false.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("null.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.class.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.interface.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.true.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.false.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("x.null.x", null): success
test ModuleDescriptorTest.testOpensWithBadName("_", null): success
test ModuleDescriptorTest.testOpensWithDuplicate1(): success
test ModuleDescriptorTest.testOpensWithDuplicate2(): success
test ModuleDescriptorTest.testOpensWithEmptySet(): success
test ModuleDescriptorTest.testOpensWithNullExports(): success
test ModuleDescriptorTest.testOpensWithNullTargets(): success
test ModuleDescriptorTest.testPackages1(): success
test ModuleDescriptorTest.testPackages2(): success
test ModuleDescriptorTest.testPackagesAndAll(): success
test ModuleDescriptorTest.testPackagesAndExportsPackage1(): success
test ModuleDescriptorTest.testPackagesAndExportsPackage2(): success
test ModuleDescriptorTest.testPackagesAndMainClass1(): success
test ModuleDescriptorTest.testPackagesAndMainClass2(): success
test ModuleDescriptorTest.testPackagesAndOpensPackage1(): success
test ModuleDescriptorTest.testPackagesAndOpensPackage2(): success
test ModuleDescriptorTest.testPackagesAndProvides1(): success
test ModuleDescriptorTest.testPackagesAndProvides2(): success
test ModuleDescriptorTest.testPackagesDuplicate(): success
test ModuleDescriptorTest.testPackagesWithBadName(null, null): success
test ModuleDescriptorTest.testPackagesWithBadName("1", null): success
test ModuleDescriptorTest.testPackagesWithBadName("1foo", null): success
test ModuleDescriptorTest.testPackagesWithBadName(".foo", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.", null): success
test ModuleDescriptorTest.testPackagesWithBadName("[foo]", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.1", null): success
test ModuleDescriptorTest.testPackagesWithBadName("1foo.bar", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.1bar", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.[bar]", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo..bar", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.bar.1", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testPackagesWithBadName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testPackagesWithBadName("class", null): success
test ModuleDescriptorTest.testPackagesWithBadName("interface", null): success
test ModuleDescriptorTest.testPackagesWithBadName("true", null): success
test ModuleDescriptorTest.testPackagesWithBadName("false", null): success
test ModuleDescriptorTest.testPackagesWithBadName("null", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.class", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.interface", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.true", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.false", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.null", null): success
test ModuleDescriptorTest.testPackagesWithBadName("class.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("interface.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("true.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("false.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("null.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.class.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.interface.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.true.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.false.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("x.null.x", null): success
test ModuleDescriptorTest.testPackagesWithBadName("_", null): success
test ModuleDescriptorTest.testPackagesWithEmptySet(): success
test ModuleDescriptorTest.testProvides(): success
test ModuleDescriptorTest.testProvidesCompare(): success
test ModuleDescriptorTest.testProvidesCompareWithDifferentProviders1(): success
test ModuleDescriptorTest.testProvidesCompareWithDifferentProviders2(): success
test ModuleDescriptorTest.testProvidesCompareWithDifferentService(): success
test ModuleDescriptorTest.testProvidesWithBadProvider(null, null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("1", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("1foo", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider(".foo", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("[foo]", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.1", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("1foo.bar", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.1bar", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.[bar]", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo..bar", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.bar.1", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.bar.1gus", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("class", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("interface", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("true", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("false", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("null", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.class", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.interface", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.true", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.false", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.null", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("class.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("interface.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("true.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("false.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("null.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.class.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.interface.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.true.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.false.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("x.null.x", null): success
test ModuleDescriptorTest.testProvidesWithBadProvider("_", null): success
test ModuleDescriptorTest.testProvidesWithBadService(null, null): success
test ModuleDescriptorTest.testProvidesWithBadService("1", null): success
test ModuleDescriptorTest.testProvidesWithBadService("1foo", null): success
test ModuleDescriptorTest.testProvidesWithBadService(".foo", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.", null): success
test ModuleDescriptorTest.testProvidesWithBadService("[foo]", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.1", null): success
test ModuleDescriptorTest.testProvidesWithBadService("1foo.bar", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.1bar", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.[bar]", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo..bar", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.bar.1", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.bar.1gus", null): success
test ModuleDescriptorTest.testProvidesWithBadService("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testProvidesWithBadService("class", null): success
test ModuleDescriptorTest.testProvidesWithBadService("interface", null): success
test ModuleDescriptorTest.testProvidesWithBadService("true", null): success
test ModuleDescriptorTest.testProvidesWithBadService("false", null): success
test ModuleDescriptorTest.testProvidesWithBadService("null", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.class", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.interface", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.true", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.false", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.null", null): success
test ModuleDescriptorTest.testProvidesWithBadService("class.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("interface.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("true.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("false.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("null.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.class.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.interface.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.true.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.false.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("x.null.x", null): success
test ModuleDescriptorTest.testProvidesWithBadService("_", null): success
test ModuleDescriptorTest.testProvidesWithDuplicateProvides(): success
test ModuleDescriptorTest.testProvidesWithEmptySet(): success
test ModuleDescriptorTest.testProvidesWithNullProviders(): success
test ModuleDescriptorTest.testProvidesWithNullProvides(): success
test ModuleDescriptorTest.testProvidesWithProvides(): success
test ModuleDescriptorTest.testProvidesWithSimpleIdentifier1(): success
test ModuleDescriptorTest.testProvidesWithSimpleIdentifier2(): success
test ModuleDescriptorTest.testRead(): success
test ModuleDescriptorTest.testReadFromEmptyBuffer(): success
test ModuleDescriptorTest.testReadFromEmptyInputStream(): success
test ModuleDescriptorTest.testReadFromFailingInputStream(): success
test ModuleDescriptorTest.testReadOfJavaBaseWithRequires(): success
test ModuleDescriptorTest.testReadWithEmptyRequires(): success
test ModuleDescriptorTest.testReadWithNoRequiresBase(): success
test ModuleDescriptorTest.testReadWithNull(): success
test ModuleDescriptorTest.testReadWithSynethticRequiresBase(): success
test ModuleDescriptorTest.testReadsWithBadPackageFinder(): success
test ModuleDescriptorTest.testReadsWithPackageFinder(): success
test ModuleDescriptorTest.testRequiresCompare(): success
test ModuleDescriptorTest.testRequiresCompareWithDifferentCompiledVersion(): success
test ModuleDescriptorTest.testRequiresCompareWithDifferentModifiers(): success
test ModuleDescriptorTest.testRequiresCompareWithSameCompiledVersion(): success
test ModuleDescriptorTest.testRequiresCompareWithSameModifiers(): success
test ModuleDescriptorTest.testRequiresEqualsAndHashCode(): success
test ModuleDescriptorTest.testRequiresOnAutomaticModule(): success
test ModuleDescriptorTest.testRequiresSelfWithAllModifiers(): success
test ModuleDescriptorTest.testRequiresSelfWithNoModifier(): success
test ModuleDescriptorTest.testRequiresSelfWithOneModifier(): success
test ModuleDescriptorTest.testRequiresSelfWithRequires(): success
test ModuleDescriptorTest.testRequiresToString(): success
test ModuleDescriptorTest.testRequiresWithAllModifiers(): success
test ModuleDescriptorTest.testRequiresWithBadModuleName(null, null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("1", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("1foo", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName(".foo", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("[foo]", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.1", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("1foo.bar", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.1bar", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.[bar]", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo..bar", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.bar.1", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("class", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("interface", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("true", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("false", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("null", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.class", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.interface", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.true", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.false", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.null", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("class.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("interface.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("true.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("false.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("null.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.class.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.interface.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.true.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.false.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("x.null.x", null): success
test ModuleDescriptorTest.testRequiresWithBadModuleName("_", null): success
test ModuleDescriptorTest.testRequiresWithCompiledVersion(): success
test ModuleDescriptorTest.testRequiresWithDuplicatesRequires(): success
test ModuleDescriptorTest.testRequiresWithNoModifiers(): success
test ModuleDescriptorTest.testRequiresWithNullModifiers(): success
test ModuleDescriptorTest.testRequiresWithNullRequires(): success
test ModuleDescriptorTest.testRequiresWithNullVersion(): success
test ModuleDescriptorTest.testRequiresWithOneModifier(): success
test ModuleDescriptorTest.testRequiresWithRequires(): success
test ModuleDescriptorTest.testRequiresWithTwoModifiers(): success
test ModuleDescriptorTest.testToNameAndVersion(): success
test ModuleDescriptorTest.testToString(): success
test ModuleDescriptorTest.testUnparseableCompiledVersion(null, "A1"): success
test ModuleDescriptorTest.testUnparseableCompiledVersion("A1", "A2"): success
test ModuleDescriptorTest.testUnparseableCompiledVersion("A1", "1.0"): success
test ModuleDescriptorTest.testUnparseableModuleVersion(null, "A1"): success
test ModuleDescriptorTest.testUnparseableModuleVersion("A1", "A2"): success
test ModuleDescriptorTest.testUnparseableModuleVersion("A1", "1.0"): success
test ModuleDescriptorTest.testUses(): success
test ModuleDescriptorTest.testUsesOnAutomaticModule(): success
test ModuleDescriptorTest.testUsesWithBadName(null, null): success
test ModuleDescriptorTest.testUsesWithBadName("1", null): success
test ModuleDescriptorTest.testUsesWithBadName("1foo", null): success
test ModuleDescriptorTest.testUsesWithBadName(".foo", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.", null): success
test ModuleDescriptorTest.testUsesWithBadName("[foo]", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.1", null): success
test ModuleDescriptorTest.testUsesWithBadName("1foo.bar", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.1bar", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.[bar]", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo..bar", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.bar.1", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.bar.1gus", null): success
test ModuleDescriptorTest.testUsesWithBadName("foo.bar.[gus]", null): success
test ModuleDescriptorTest.testUsesWithBadName("class", null): success
test ModuleDescriptorTest.testUsesWithBadName("interface", null): success
test ModuleDescriptorTest.testUsesWithBadName("true", null): success
test ModuleDescriptorTest.testUsesWithBadName("false", null): success
test ModuleDescriptorTest.testUsesWithBadName("null", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.class", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.interface", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.true", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.false", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.null", null): success
test ModuleDescriptorTest.testUsesWithBadName("class.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("interface.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("true.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("false.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("null.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.class.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.interface.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.true.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.false.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("x.null.x", null): success
test ModuleDescriptorTest.testUsesWithBadName("_", null): success
test ModuleDescriptorTest.testUsesWithDuplicate(): success
test ModuleDescriptorTest.testUsesWithSimpleIdentifier(): success
test ModuleDescriptorTest.testVersion1(): success
test ModuleDescriptorTest.testVersion2(): success

===============================================
java/lang/module/ModuleDescriptorTest.java
Total tests run: 443, Passes: 443, Failures: 0, Skips: 0
===============================================

----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(43/4485)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
CLASSPATH='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib;D:\\a\\openjdk\\openjdk\\test\\lib;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/lang/module/ModuleDescriptorTest.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module\\ModuleDescriptorTest.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\test\\lib' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\lang\\module\\ModuleDescriptorTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\lang\\module;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\test\\lib' \\
        -Dtest.modules='java.base/jdk.internal.access java.base/jdk.internal.module' \\
        -Dtest.enable.preview=true \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.access=ALL-UNNAMED \\
        --add-exports java.base/jdk.internal.module=ALL-UNNAMED \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=25 \\
        '-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        '-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -XX:+CreateCoredumpOnCrash \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        '-Djava.library.path=d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        --enable-preview \\
        com.sun.javatest.regtest.agent.MainWrapper 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\lang\\module\\ModuleDescriptorTest.d\\testng.0.jta' java/lang/module/ModuleDescriptorTest.java false ModuleDescriptorTest
result: Passed. Execution successful


test result: Passed. Execution successful
