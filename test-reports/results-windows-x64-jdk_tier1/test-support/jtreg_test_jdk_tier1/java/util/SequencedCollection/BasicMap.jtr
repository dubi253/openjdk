#Test Results (version 2)
#Mon Apr 29 01:54:55 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=bug8266571 testng
modules=java.base/java.util\:open
run=USER_SPECIFIED build SimpleSortedMap\r\nUSER_SPECIFIED testng BasicMap\r\n
source=BasicMap.java
title=Basic tests for SequencedMap

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/util/SequencedCollection/BasicMap.java
elapsed=328 0\:00\:00.328
end=Mon Apr 29 01\:54\:55 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az978-691.aqccnys5fsauxnvc2cwlk3lemf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-04-29-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/java.util\:open
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile build compile testng
start=Mon Apr 29 01\:54\:55 UTC 2024
test=java/util/SequencedCollection/BasicMap.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=328
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\util\\SequencedCollection

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/246)----------
command: build SimpleSortedMap
reason: User specified action: run build SimpleSortedMap 
started: Mon Apr 29 01:54:55 UTC 2024
Test directory:
  compile: SimpleSortedMap
finished: Mon Apr 29 01:54:55 UTC 2024
elapsed time (seconds): 0.016
result: Passed. Build successful

#section:compile
----------messages:(8/356)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleSortedMap.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:54:55 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:54:55 UTC 2024
elapsed time (seconds): 0.016
----------configuration:(14/952)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  add modules: java.base
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(38/3792)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleSortedMap.java'
result: Passed. Compilation successful

#section:build
----------messages:(7/213)----------
command: build BasicMap
reason: Named class compiled on demand
started: Mon Apr 29 01:54:55 UTC 2024
Test directory:
  compile: BasicMap
finished: Mon Apr 29 01:54:55 UTC 2024
elapsed time (seconds): 0.109
result: Passed. Build successful

#section:compile
----------messages:(8/349)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:54:55 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:54:55 UTC 2024
elapsed time (seconds): 0.109
----------configuration:(14/952)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  add modules: java.base
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(38/3785)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java'
----------direct:(2/179)*----------
Note: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
result: Passed. Compilation successful

#section:testng
----------messages:(8/290)----------
command: testng BasicMap
reason: User specified action: run testng BasicMap 
started: Mon Apr 29 01:54:55 UTC 2024
Mode: agentvm
Agent id: 43
Additional opens to unnamed modules from @modules: java.base/java.util
finished: Mon Apr 29 01:54:55 UTC 2024
elapsed time (seconds): 0.203
----------configuration:(14/950)*----------
Boot Layer
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\junit-platform-console-standalone-1.9.2.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

Test Layer
  add opens:  java.base/java.util ALL-UNNAMED
  class path: D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d 
              D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection 

----------rerun:(29/3279)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/util/SequencedCollection/BasicMap.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\BasicMap.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.modules=java.base/java.util:open \\
        -classpath 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\SequencedCollection\\BasicMap.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
        com.sun.javatest.regtest.agent.TestNGRunner java/util/SequencedCollection/BasicMap.java false BasicMap
----------System.out:(303/29472)----------
test BasicMap.testChecked("ChkNav", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testChecked("ChkSorted", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testDoubleReverse("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyEntrySetRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEmptyFirstEntry("EmptyNavigableMap", {}, []): success
test BasicMap.testEmptyFirstEntry("EmptySortedMap", {}, []): success
test BasicMap.testEmptyFirstEntry("LinkedHashMap", {}, []): success
test BasicMap.testEmptyFirstEntry("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyFirstEntry("TreeMap", {}, []): success
test BasicMap.testEmptyFirstEntry("UnmodMap", {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyKeySetRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyKeySetRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyKeySetRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEmptyLastEntry("EmptyNavigableMap", {}, []): success
test BasicMap.testEmptyLastEntry("EmptySortedMap", {}, []): success
test BasicMap.testEmptyLastEntry("LinkedHashMap", {}, []): success
test BasicMap.testEmptyLastEntry("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyLastEntry("TreeMap", {}, []): success
test BasicMap.testEmptyLastEntry("UnmodMap", {}, []): success
test BasicMap.testEmptyPollFirst("LinkedHashMap", {}, []): success
test BasicMap.testEmptyPollFirst("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyPollFirst("TreeMap", {}, []): success
test BasicMap.testEmptyPollLast("LinkedHashMap", {}, []): success
test BasicMap.testEmptyPollLast("SimpleSortedMap", {}, []): success
test BasicMap.testEmptyPollLast("TreeMap", {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 0, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 1, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 2, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 3, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 4, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 5, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 6, {}, []): success
test BasicMap.testEmptyValuesRemoves("LinkedHashMap", 7, {}, []): success
test BasicMap.testEmptyValuesRemoves("SimpleSortedMap", 7, {}, []): success
test BasicMap.testEmptyValuesRemoves("TreeMap", 7, {}, []): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testEntrySetRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFirstEntry("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testFundamentals("EmptyNavigableMap", {}, []): success
test BasicMap.testFundamentals("EmptySortedMap", {}, []): success
test BasicMap.testFundamentals("LinkedHashMap", {}, []): success
test BasicMap.testFundamentals("SimpleSortedMap", {}, []): success
test BasicMap.testFundamentals("TreeMap", {}, []): success
test BasicMap.testFundamentals("UnmodMap", {}, []): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testKeySetRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testLastEntry("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testNotSerializable("LinkedHashMap", {e=5, d=4, c=3, b=2, a=1}): success
test BasicMap.testNotSerializable("UnmodMap", {e=5, d=4, c=3, b=2, a=1}): success
test BasicMap.testNullableKeyValue("firstEntry"): success
test BasicMap.testNullableKeyValue("lastEntry"): success
test BasicMap.testNullableKeyValue("pollFirstEntry"): success
test BasicMap.testNullableKeyValue("pollLastEntry"): success
test BasicMap.testPollFirst("LinkedHashMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirst("SimpleSortedMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirst("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("LinkedHashMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("SimpleSortedMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollFirstRev("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("LinkedHashMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("SimpleSortedMap", {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLast("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("LinkedHashMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("SimpleSortedMap", {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPollLastRev("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutFirst("LinkedHashMap", java.util.LinkedHashMap@211797d1, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutFirstRev("LinkedHashMap", java.util.LinkedHashMap@62b18644, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutLast("LinkedHashMap", java.util.LinkedHashMap@1f77d4c0, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutLastRev("LinkedHashMap", java.util.LinkedHashMap@3c9b6970, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutThrows("SimpleSortedMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testPutThrows("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("LinkedHashMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("TreeMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testSerializable("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodMap", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodNav", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnmodifiable("UnmodSorted", {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposCompute("LinkedHashMap", false, java.util.LinkedHashMap@110bc2c9, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposCompute("LinkedHashMap", true, java.util.LinkedHashMap@9e6e6b1, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposComputeIfAbsent("LinkedHashMap", false, java.util.LinkedHashMap@5de0e9fb, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposComputeIfAbsent("LinkedHashMap", true, java.util.LinkedHashMap@f362dc2, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposMerge("LinkedHashMap", false, java.util.LinkedHashMap@6ba255f9, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposMerge("LinkedHashMap", true, java.util.LinkedHashMap@10dd054e, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPut("LinkedHashMap", false, java.util.LinkedHashMap@5afdfb6a, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPut("LinkedHashMap", true, java.util.LinkedHashMap@56296505, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutAll("LinkedHashMap", false, java.util.LinkedHashMap@b20803f, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutAll("LinkedHashMap", true, java.util.LinkedHashMap@f144c0a, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutIfAbsent("LinkedHashMap", false, java.util.LinkedHashMap@267e29f7, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testUnposPutIfAbsent("LinkedHashMap", true, java.util.LinkedHashMap@596dc921, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("LinkedHashMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesAddThrows("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 0, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 0, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 1, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 1, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 2, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 2, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 3, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 3, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 4, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 4, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 5, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 5, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 6, {b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 6, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("LinkedHashMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("SimpleSortedMap", 7, {a=1, b=2, c=3, d=4}, [a=1, b=2, c=3, d=4, e=5]): success
test BasicMap.testValuesRemoves("TreeMap", 7, {a=1, b=2, c=3, d=4, e=5}, [a=1, b=2, c=3, d=4, e=5]): success

===============================================
java/util/SequencedCollection/BasicMap.java
Total tests run: 297, Passes: 297, Failures: 0, Skips: 0
===============================================

----------System.err:(3/38)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
