#Test Results (version 2)
#Mon Apr 29 01:36:44 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat\\HexFormatTest.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=othervm testng
run=USER_SPECIFIED testng/othervm HexFormatTest\r\n
source=HexFormatTest.java
title=Check HexFormat formatting and parsing

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java
elapsed=1409 0\:00\:01.409
end=Mon Apr 29 01\:36\:44 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az978-691.aqccnys5fsauxnvc2cwlk3lemf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-04-29-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 01\:36\:42 UTC 2024
test=java/util/HexFormat/HexFormatTest.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=1409
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\util\\HexFormat

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/223)----------
command: build HexFormatTest
reason: Named class compiled on demand
started: Mon Apr 29 01:36:42 UTC 2024
Test directory:
  compile: HexFormatTest
finished: Mon Apr 29 01:36:42 UTC 2024
elapsed time (seconds): 0.063
result: Passed. Build successful

#section:compile
----------messages:(7/285)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat\\HexFormatTest.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:36:42 UTC 2024
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:36:42 UTC 2024
elapsed time (seconds): 0.063
----------configuration:(13/901)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(36/3605)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/HexFormat/HexFormatTest.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat\\HexFormatTest.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat\\HexFormatTest.java'
result: Passed. Compilation successful

#section:testng
----------messages:(6/243)----------
command: testng HexFormatTest
reason: User specified action: run testng/othervm HexFormatTest 
started: Mon Apr 29 01:36:42 UTC 2024
Mode: othervm [/othervm specified]
finished: Mon Apr 29 01:36:44 UTC 2024
elapsed time (seconds): 1.346
----------configuration:(0/0)----------
----------System.out:(410/30941)----------
test HexFormatTest.badFromHexDigits("a", 0, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badFromHexDigits("b", 1, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badFromHexDigits("a", -1, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badFromHexDigits("b", -1, 1, java.lang.Class@4f5a5707): success
test HexFormatTest.badFromHexDigits("a", 0, -1, java.lang.Class@4f5a5707): success
test HexFormatTest.badFromHexDigits("b", 1, -1, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("a", 0, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("b", 1, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("a", -1, 2, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("b", -1, 1, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("a", 0, -1, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("b", 1, -1, java.lang.Class@4f5a5707): success
test HexFormatTest.badParseHex("76543210", 0, 7, java.lang.Class@278c9aaf): success
test HexFormatTest.badParseHex("zz00", 0, 4, java.lang.Class@278c9aaf): success
test HexFormatTest.badParseHex("00zz", 0, 4, java.lang.Class@278c9aaf): success
    7f
    0041
    00003039
    7fffffffffffffff, 9223372036854775807
    Formatted: 00:01:02:03:7C:7D:7E:7F
    Parsed: [0, 1, 2, 3, 124, 125, 126, 127]
    Formatted: 00,01,02,03,7c,7d,7e,7f
    Parsed: [0, 1, 2, 3, 124, 125, 126, 127]
    Formatted: #00, #01, #02, #03, #7c, #7d, #7e, #7f
    Parsed:    [0, 1, 2, 3, 124, 125, 126, 127]
test HexFormatTest.samples(): success
test HexFormatTest.testAppendHexByteWithCharArrayWriter(): success
test HexFormatTest.testAppendHexByteWithCharBuffer(): success
test HexFormatTest.testAppendHexByteWithStringBuilder(): success
test HexFormatTest.testFactoryNPE(): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(", ", "#", "L", false, java.util.HexFormat@f4e48c3): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("", "", "", false, java.util.HexFormat@244a6366): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(".", "", "", false, java.util.HexFormat@702f2b27): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(", ", "0x", "", true, java.util.HexFormat@1117b7f5): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("?", "?", "?", false, java.util.HexFormat@46fc0986): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("?", "", "", false, java.util.HexFormat@1ead381): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(", ", "#", "L", false, java.util.HexFormat@2dbfa371): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("", "", "", false, java.util.HexFormat@171cbc03): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(".", "", "", false, java.util.HexFormat@38767180): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(", ", "0x", "", true, java.util.HexFormat@40300109): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("?", "?", "?", false, java.util.HexFormat@34a2ba6d): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("?", "", "", false, java.util.HexFormat@34db05d3): success
    formatted: 4142434445464748494A4B4C4D4E4F
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    formatted subrange: #43L, #44L, #45L
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(", ", "#", "L", false, java.util.HexFormat@5cd17378): success
    formatted: 4142434445464748494a4b4c4d4e4f
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("", "", "", false, java.util.HexFormat@498193a8): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    formatted subrange: 43.44.45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(".", "", "", false, java.util.HexFormat@43ae7ae5): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    formatted subrange: 0x43, 0x44, 0x45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(", ", "0x", "", true, java.util.HexFormat@764a8645): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    formatted subrange: ?43???44???45?
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("?", "?", "?", false, java.util.HexFormat@4e35430d): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    formatted subrange: 43?44?45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("?", "", "", false, java.util.HexFormat@452fc63d): success
test HexFormatTest.testFormatHexNPE(): success
    formatted: 42434445464748494A4B4C4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(", ", "#", "L", false, java.util.HexFormat@7a77ac39): success
    formatted: 42434445464748494a4b4c4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("", "", "", false, java.util.HexFormat@652abe22): success
    formatted: 42.43.44.45.46.47.48.49.4a.4b.4c.4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(".", "", "", false, java.util.HexFormat@4d882aa): success
    formatted: 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(", ", "0x", "", true, java.util.HexFormat@3af23bde): success
    formatted: ?42???43???44???45???46???47???48???49???4a???4b???4c???4d?
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("?", "?", "?", false, java.util.HexFormat@76bea0e0): success
    formatted: 42?43?44?45?46?47?48?49?4a?4b?4c?4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("?", "", "", false, java.util.HexFormat@1d1879a7): success
    formatted: 42434445464748494A4B4C4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(", ", "#", "L", false, java.util.HexFormat@7fe61fc5): success
    formatted: 42434445464748494a4b4c4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("", "", "", false, java.util.HexFormat@419758a3): success
    formatted: 42.43.44.45.46.47.48.49.4a.4b.4c.4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(".", "", "", false, java.util.HexFormat@3daf38b3): success
    formatted: 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(", ", "0x", "", true, java.util.HexFormat@b001453): success
    formatted: ?42???43???44???45???46???47???48???49???4a???4b???4c???4d?
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("?", "?", "?", false, java.util.HexFormat@7dac11e7): success
    formatted: 42?43?44?45?46?47?48?49?4a?4b?4c?4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("?", "", "", false, java.util.HexFormat@4e51f4a7): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(", ", "#", "L", false, java.util.HexFormat@7f49f881): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("", "", "", false, java.util.HexFormat@c7ea554): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(".", "", "", false, java.util.HexFormat@42d4404c): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(", ", "0x", "", true, java.util.HexFormat@198ab076): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("?", "?", "?", false, java.util.HexFormat@a051489): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("?", "", "", false, java.util.HexFormat@563fa850): success
test HexFormatTest.testFormatter("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testFormatter(", ", "#", "L", false, java.util.HexFormat@4ea1e155): success
test HexFormatTest.testFormatter("", "", "", false, java.util.HexFormat@622e6c87): success
test HexFormatTest.testFormatter(".", "", "", false, java.util.HexFormat@19eecbea): success
test HexFormatTest.testFormatter(", ", "0x", "", true, java.util.HexFormat@50f533ad): success
test HexFormatTest.testFormatter("?", "?", "?", false, java.util.HexFormat@46419795): success
test HexFormatTest.testFormatter("?", "", "", false, java.util.HexFormat@f645bc3): success
test HexFormatTest.testFormatterParameterMethods("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testFormatterParameterMethods(", ", "#", "L", false, java.util.HexFormat@4c413451): success
test HexFormatTest.testFormatterParameterMethods("", "", "", false, java.util.HexFormat@7637ed58): success
test HexFormatTest.testFormatterParameterMethods(".", "", "", false, java.util.HexFormat@507d0355): success
test HexFormatTest.testFormatterParameterMethods(", ", "0x", "", true, java.util.HexFormat@4eca0191): success
test HexFormatTest.testFormatterParameterMethods("?", "?", "?", false, java.util.HexFormat@397139c6): success
test HexFormatTest.testFormatterParameterMethods("?", "", "", false, java.util.HexFormat@538b374c): success
test HexFormatTest.testFormatterTestEquals("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testFormatterTestEquals(", ", "#", "L", false, java.util.HexFormat@437e5b8c): success
test HexFormatTest.testFormatterTestEquals("", "", "", false, java.util.HexFormat@31f738a3): success
test HexFormatTest.testFormatterTestEquals(".", "", "", false, java.util.HexFormat@35078d09): success
test HexFormatTest.testFormatterTestEquals(", ", "0x", "", true, java.util.HexFormat@5db78c96): success
test HexFormatTest.testFormatterTestEquals("?", "?", "?", false, java.util.HexFormat@70c0f300): success
test HexFormatTest.testFormatterTestEquals("?", "", "", false, java.util.HexFormat@28e38798): success
    hex: uppercase: true, delimiter: "", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    hex: uppercase: false, delimiter: ", ", prefix: "#", suffix: "L"
test HexFormatTest.testFormatterToString(", ", "#", "L", false, java.util.HexFormat@568d48d5): success
    hex: uppercase: false, delimiter: "", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("", "", "", false, java.util.HexFormat@49db9528): success
    hex: uppercase: false, delimiter: ".", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString(".", "", "", false, java.util.HexFormat@5488ed95): success
    hex: uppercase: true, delimiter: ", ", prefix: "0x", suffix: ""
test HexFormatTest.testFormatterToString(", ", "0x", "", true, java.util.HexFormat@150b622d): success
    hex: uppercase: false, delimiter: "?", prefix: "?", suffix: "?"
test HexFormatTest.testFormatterToString("?", "?", "?", false, java.util.HexFormat@10c8c027): success
    hex: uppercase: false, delimiter: "?", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("?", "", "", false, java.util.HexFormat@38b8b334): success
test HexFormatTest.testFromHexDigit(): success
test HexFormatTest.testFromHexInvalid(): success
test HexFormatTest.testFromHexNPE(): success
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
test HexFormatTest.testFromHexPairInvalid(): success
test HexFormatTest.testIOException("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testIOException(", ", "#", "L", false, java.util.HexFormat@7249a4bd): success
test HexFormatTest.testIOException("", "", "", false, java.util.HexFormat@3f1a11e8): success
test HexFormatTest.testIOException(".", "", "", false, java.util.HexFormat@7928c2): success
test HexFormatTest.testIOException(", ", "0x", "", true, java.util.HexFormat@7bffdeb0): success
test HexFormatTest.testIOException("?", "?", "?", false, java.util.HexFormat@5db2bf54): success
test HexFormatTest.testIOException("?", "", "", false, java.util.HexFormat@6440fd6c): success
test HexFormatTest.testIsHexDigit(): success
OOME: total mem: 30000000, free mem: 2fd9ba88, max mem: 30000000
test HexFormatTest.testOOME("", "", "", true, java.util.HexFormat@4cb6d5f6): skip
org.testng.SkipException: Insufficient Memory to test OOME
	at HexFormatTest.testOOME(HexFormatTest.java:646)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1575)
ex: java.lang.OutOfMemoryError: String size 2147483650 exceeds maximum 2147483647
test HexFormatTest.testOOME(", ", "#", "L", false, java.util.HexFormat@100fe18d): success
OOME: total mem: 30000000, free mem: 2fda2170, max mem: 30000000
test HexFormatTest.testOOME("", "", "", false, java.util.HexFormat@13463f4f): skip
org.testng.SkipException: Insufficient Memory to test OOME
	at HexFormatTest.testOOME(HexFormatTest.java:646)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1575)
ex: java.lang.OutOfMemoryError: String size 2147483648 exceeds maximum 2147483647
test HexFormatTest.testOOME(".", "", "", false, java.util.HexFormat@1b20e910): success
ex: java.lang.OutOfMemoryError: String size 2147483650 exceeds maximum 2147483647
test HexFormatTest.testOOME(", ", "0x", "", true, java.util.HexFormat@603356fc): success
ex: java.lang.OutOfMemoryError: String size 2147483649 exceeds maximum 2147483647
test HexFormatTest.testOOME("?", "?", "?", false, java.util.HexFormat@557dfe3e): success
ex: java.lang.OutOfMemoryError: String size 2147483648 exceeds maximum 2147483647
test HexFormatTest.testOOME("?", "", "", false, java.util.HexFormat@2c649d): success
test HexFormatTest.testParseHexEmptyString("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testParseHexEmptyString(", ", "#", "L", false, java.util.HexFormat@10817767): success
test HexFormatTest.testParseHexEmptyString("", "", "", false, java.util.HexFormat@32cc42a5): success
test HexFormatTest.testParseHexEmptyString(".", "", "", false, java.util.HexFormat@1deec634): success
test HexFormatTest.testParseHexEmptyString(", ", "0x", "", true, java.util.HexFormat@57e23d9f): success
test HexFormatTest.testParseHexEmptyString("?", "?", "?", false, java.util.HexFormat@477c41f6): success
test HexFormatTest.testParseHexEmptyString("?", "", "", false, java.util.HexFormat@5a71f91f): success
test HexFormatTest.testParseHexNPE(): success
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("", "", "", true, java.util.HexFormat@4cb6d5f6): success
    formatted subrange: #43L, #44L, #45L
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(", ", "#", "L", false, java.util.HexFormat@5b15097b): success
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("", "", "", false, java.util.HexFormat@2dd751b9): success
    formatted subrange: 43.44.45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(".", "", "", false, java.util.HexFormat@2095d92f): success
    formatted subrange: 0x43, 0x44, 0x45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(", ", "0x", "", true, java.util.HexFormat@155c343): success
    formatted subrange: ?43???44???45?
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("?", "?", "?", false, java.util.HexFormat@1e49bf4a): success
    formatted subrange: 43?44?45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("?", "", "", false, java.util.HexFormat@67723e2b): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("0", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:0", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("0", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:0", ",", "", ""): success
ex: java.lang.IllegalArgumentException: found: ":", expected: ",", index: 2 ch: 58
test HexFormatTest.testToBytesThrowing("01:00", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("00]", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("[00", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("]", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("[", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("00", ",", "abc", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01", ",", "", "def"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("abc00,", ",", "abc", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01def,", ",", "", "def"): success
test HexFormatTest.testToHex(): success
test HexFormatTest.testToHexDigits(): success
    formatted: "fedcba9876543210", parsed as: 0xfedcba9876543210L
test HexFormatTest.testToHexDigitsLong(): success
test HexFormatTest.testToHexDigitsNPE(): success
test HexFormatTest.testZeroLength("", "", "", true, java.util.HexFormat@4cb6d5f6): success
test HexFormatTest.testZeroLength(", ", "#", "L", false, java.util.HexFormat@5b527fa0): success
test HexFormatTest.testZeroLength("", "", "", false, java.util.HexFormat@30db7f05): success
test HexFormatTest.testZeroLength(".", "", "", false, java.util.HexFormat@46b2c0a1): success
test HexFormatTest.testZeroLength(", ", "0x", "", true, java.util.HexFormat@2c9abee): success
test HexFormatTest.testZeroLength("?", "?", "?", false, java.util.HexFormat@74d0a94d): success
test HexFormatTest.testZeroLength("?", "", "", false, java.util.HexFormat@5cfbcfb8): success
    digits:  0, formatted: "", parsed as: 0x00000000
    digits:  1, formatted: "0", parsed as: 0x00000000
    digits:  2, formatted: "10", parsed as: 0x00000010
    digits:  3, formatted: "210", parsed as: 0x00000210
    digits:  4, formatted: "3210", parsed as: 0x00003210
    digits:  5, formatted: "43210", parsed as: 0x00043210
    digits:  6, formatted: "543210", parsed as: 0x00543210
    digits:  7, formatted: "6543210", parsed as: 0x06543210
    digits:  8, formatted: "76543210", parsed as: 0x76543210
test HexFormatTest.testfromHexDigitsToInt(): success
    digits:  0, formatted: "", parsed as: 0x0000000000000000L
    digits:  1, formatted: "0", parsed as: 0x0000000000000000L
    digits:  2, formatted: "10", parsed as: 0x0000000000000010L
    digits:  3, formatted: "210", parsed as: 0x0000000000000210L
    digits:  4, formatted: "3210", parsed as: 0x0000000000003210L
    digits:  5, formatted: "43210", parsed as: 0x0000000000043210L
    digits:  6, formatted: "543210", parsed as: 0x0000000000543210L
    digits:  7, formatted: "6543210", parsed as: 0x0000000006543210L
    digits:  8, formatted: "76543210", parsed as: 0x0000000076543210L
    digits:  9, formatted: "876543210", parsed as: 0x0000000876543210L
    digits: 10, formatted: "9876543210", parsed as: 0x0000009876543210L
    digits: 11, formatted: "a9876543210", parsed as: 0x00000a9876543210L
    digits: 12, formatted: "ba9876543210", parsed as: 0x0000ba9876543210L
    digits: 13, formatted: "cba9876543210", parsed as: 0x000cba9876543210L
    digits: 14, formatted: "dcba9876543210", parsed as: 0x00dcba9876543210L
    digits: 15, formatted: "edcba9876543210", parsed as: 0x0edcba9876543210L
    digits: 16, formatted: "fedcba9876543210", parsed as: 0xfedcba9876543210L
test HexFormatTest.testfromHexDigitsToLong(): success
test HexFormatTest.wrongNumberDigits(): success

===============================================
java/util/HexFormat/HexFormatTest.java
Total tests run: 154, Passes: 152, Failures: 0, Skips: 2
===============================================

----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(37/3741)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
CLASSPATH='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/util/HexFormat/HexFormatTest.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat\\HexFormatTest.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\util\\HexFormat\\HexFormatTest.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\HexFormat' \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=25 \\
        '-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        '-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -XX:+CreateCoredumpOnCrash \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        '-Djava.library.path=d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        com.sun.javatest.regtest.agent.MainWrapper 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\util\\HexFormat\\HexFormatTest.d\\testng.0.jta' java/util/HexFormat/HexFormatTest.java false HexFormatTest
result: Passed. Execution successful


test result: Passed. Execution successful
