#Test Results (version 2)
#Mon Apr 29 01:03:16 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestStringEncoding.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=testng
modules=java.base/jdk.internal.foreign
run=USER_SPECIFIED testng TestStringEncoding\r\n
source=TestStringEncoding.java
title=\ 

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java
elapsed=813 0\:00\:00.813
end=Mon Apr 29 01\:03\:16 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az978-691.aqccnys5fsauxnvc2cwlk3lemf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-04-29-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/jdk.internal.foreign
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 01\:03\:15 UTC 2024
test=java/foreign/TestStringEncoding.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=813
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\foreign

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/233)----------
command: build TestStringEncoding
reason: Named class compiled on demand
started: Mon Apr 29 01:03:15 UTC 2024
Test directory:
  compile: TestStringEncoding
finished: Mon Apr 29 01:03:15 UTC 2024
elapsed time (seconds): 0.078
result: Passed. Build successful

#section:compile
----------messages:(8/398)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestStringEncoding.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:03:15 UTC 2024
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:03:15 UTC 2024
elapsed time (seconds): 0.078
----------configuration:(15/995)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign 
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign 
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 

----------rerun:(39/3707)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/foreign/TestStringEncoding.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestStringEncoding.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -J-Dtest.modules=java.base/jdk.internal.foreign \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestStringEncoding.java'
result: Passed. Compilation successful

#section:testng
----------messages:(8/322)----------
command: testng TestStringEncoding
reason: User specified action: run testng TestStringEncoding 
started: Mon Apr 29 01:03:15 UTC 2024
Mode: agentvm
Agent id: 6
Additional exports to unnamed modules from @modules: java.base/jdk.internal.foreign
finished: Mon Apr 29 01:03:16 UTC 2024
elapsed time (seconds): 0.735
----------configuration:(14/938)*----------
Boot Layer
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\junit-platform-console-standalone-1.9.2.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

Test Layer
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  class path:  D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d 
               D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign 

----------rerun:(29/3169)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/foreign/TestStringEncoding.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestStringEncoding.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -Dtest.modules=java.base/jdk.internal.foreign \\
        -classpath 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestStringEncoding.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
        com.sun.javatest.regtest.agent.TestNGRunner java/foreign/TestStringEncoding.java false TestStringEncoding
----------System.out:(319/32663)*----------
test TestStringEncoding.chunked_strlen_byte(): success
test TestStringEncoding.chunked_strlen_short(): success
test TestStringEncoding.expandedSegment("testing"): success
test TestStringEncoding.expandedSegment(""): success
test TestStringEncoding.expandedSegment("X"): success
test TestStringEncoding.expandedSegment("12345"): success
test TestStringEncoding.expandedSegment("yen \u00c2\u00a5"): success
test TestStringEncoding.expandedSegment("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.expandedSegment("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.expandedSegment("0"): success
test TestStringEncoding.expandedSegment("01"): success
test TestStringEncoding.expandedSegment("012"): success
test TestStringEncoding.expandedSegment("0123"): success
test TestStringEncoding.expandedSegment("01234"): success
test TestStringEncoding.expandedSegment("012345"): success
test TestStringEncoding.expandedSegment("0123456"): success
test TestStringEncoding.expandedSegment("01234567"): success
test TestStringEncoding.expandedSegment("012345678"): success
test TestStringEncoding.expandedSegment("0123456789"): success
test TestStringEncoding.nativeSegFromNativeCall("testing"): success
test TestStringEncoding.nativeSegFromNativeCall(""): success
test TestStringEncoding.nativeSegFromNativeCall("X"): success
test TestStringEncoding.nativeSegFromNativeCall("12345"): success
test TestStringEncoding.nativeSegFromNativeCall("yen \u00c2\u00a5"): success
test TestStringEncoding.nativeSegFromNativeCall("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.nativeSegFromNativeCall("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.nativeSegFromNativeCall("0"): success
test TestStringEncoding.nativeSegFromNativeCall("01"): success
test TestStringEncoding.nativeSegFromNativeCall("012"): success
test TestStringEncoding.nativeSegFromNativeCall("0123"): success
test TestStringEncoding.nativeSegFromNativeCall("01234"): success
test TestStringEncoding.nativeSegFromNativeCall("012345"): success
test TestStringEncoding.nativeSegFromNativeCall("0123456"): success
test TestStringEncoding.nativeSegFromNativeCall("01234567"): success
test TestStringEncoding.nativeSegFromNativeCall("012345678"): success
test TestStringEncoding.nativeSegFromNativeCall("0123456789"): success
test TestStringEncoding.segmentationFault(): success
test TestStringEncoding.strlen_int(): success
test TestStringEncoding.testOffset("testing"): success
test TestStringEncoding.testOffset(""): success
test TestStringEncoding.testOffset("X"): success
test TestStringEncoding.testOffset("12345"): success
test TestStringEncoding.testOffset("yen \u00c2\u00a5"): success
test TestStringEncoding.testOffset("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.testOffset("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.testOffset("0"): success
test TestStringEncoding.testOffset("01"): success
test TestStringEncoding.testOffset("012"): success
test TestStringEncoding.testOffset("0123"): success
test TestStringEncoding.testOffset("01234"): success
test TestStringEncoding.testOffset("012345"): success
test TestStringEncoding.testOffset("0123456"): success
test TestStringEncoding.testOffset("01234567"): success
test TestStringEncoding.testOffset("012345678"): success
test TestStringEncoding.testOffset("0123456789"): success
test TestStringEncoding.testPeculiarContentSingleByte(): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@246dee3b): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@12d986d0): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@328352cd): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@60d2a8dc): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@53ee8702): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@56fbef74): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@50a68bff): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@61f5a71d): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@5e9e9493): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@612b4daa): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@226b870): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@3cdcd0da): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@880812): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@31aaf1c1): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@226cfe23): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@68575c1c): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@27cd526d): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@4c8343d3): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@3a08ce7b): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@6a547a21): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@112c8fee): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7db09131): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@6f6d07f9): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@351834a4): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5705078a): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@41a8f1d0): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@3d3d20fd): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@1ddc1f5a): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6bb536a6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@17fedb60): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@5b6abbcb): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@3ed67837): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@3030e087): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@46321621): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7d2dc27c): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2e4642da): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@1704a830): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@56c26399): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@336cf8a4): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@1b9b9b5e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@59810c5b): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@47ae1052): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@48e1466f): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@d5087b1): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@2818153e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@75ca0cbf): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@2416b613): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@132e10bc): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@157675f9): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@37163790): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@58f433f6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@148d99d6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@6ff6e5b9): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@4143e6f5): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@8f809b2): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@35dc457e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3a3bea0d): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@a823b): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@517a7b21): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@b087746): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@335a703c): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@43d86b0): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@5034b70f): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6bedfea0): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@bfd176b): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@36058ba8): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@14a3437c): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@105658d6): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@54c27eae): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@5d4898cf): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2309b311): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@7e448bed): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@40c21508): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@112b60e8): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@18ba796a): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@26370e84): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@1315b826): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7db6b33d): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@12208266): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@73934521): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@9d6fc24): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@488f42f): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@658ce084): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@189b07ec): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6621eae1): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@409cb0b7): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@1af332f0): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@d5c7730): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@d4471f7): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@6afc541d): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@619c71a5): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6e81fb7e): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@510c499): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@29a64364): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@1d286d31): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@754bbb7b): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@3b88f21a): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@2d496fe7): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@61309832): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@10591bc9): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@643a0815): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5072eedc): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@7d9fcba0): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@17cee0e6): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@47e7d55e): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@48a305bb): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@22e5b49e): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@7bcf8739): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@21b52a3f): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@54629fd9): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@d6acaa4): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@277d27a2): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@61219c6): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@4dff6b3b): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@3a39c143): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@3bf53bff): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@76737ebc): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1abcdceb): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@720d7ff5): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7d52a23c): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@3fab6715): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@31d024d8): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5f8aed71): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@7fb9430f): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@5aeec712): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@6886c0e6): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4cf525c): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@4184b771): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@63f52b8e): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@7199b4c4): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@6b33806): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@6611104f): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@3f497f9): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@42b53d86): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@6e9bb7b9): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@73f6e63d): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@1ed91fd6): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@31a532eb): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@2942202b): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@43329f7f): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@20b91a00): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@32a0b29c): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@62ad094): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@14c51969): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@4a0bba77): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@f43fe2): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@4262e602): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5cacf792): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@38f7ffd7): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@6cf1b850): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@4108d692): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@51d00b46): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@4f91ccfc): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7fb14464): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4f3e1f62): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@53862d70): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@56947b0a): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@1c0462c): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@1fadcfad): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@59c5a74): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@26f3ef34): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2950cee3): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@79b1a0e1): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@532f2883): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5b186c04): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@79a1d9c1): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1d6df73f): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@6b08141a): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2133f4b5): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@45d937ca): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@de884cb): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@6efe0888): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@18abf96b): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1c062a9e): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@56241bf0): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@24f947fd): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@1b098b10): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@6a907a5c): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@36cc4aa0): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@37ee625f): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@78c94a40): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@52ab12ed): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@216d0059): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@5be15c31): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@2858d8f8): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@648e1ad6): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@41af3ac2): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@636a08c2): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@bf286c1): success
test TestStringEncoding.testStrings("testing"): success
test TestStringEncoding.testStrings(""): success
test TestStringEncoding.testStrings("X"): success
test TestStringEncoding.testStrings("12345"): success
test TestStringEncoding.testStrings("yen \u00c2\u00a5"): success
test TestStringEncoding.testStrings("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.testStrings("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.testStrings("0"): success
test TestStringEncoding.testStrings("01"): success
test TestStringEncoding.testStrings("012"): success
test TestStringEncoding.testStrings("0123"): success
test TestStringEncoding.testStrings("01234"): success
test TestStringEncoding.testStrings("012345"): success
test TestStringEncoding.testStrings("0123456"): success
test TestStringEncoding.testStrings("01234567"): success
test TestStringEncoding.testStrings("012345678"): success
test TestStringEncoding.testStrings("0123456789"): success
test TestStringEncoding.testStringsHeap("testing"): success
test TestStringEncoding.testStringsHeap(""): success
test TestStringEncoding.testStringsHeap("X"): success
test TestStringEncoding.testStringsHeap("12345"): success
test TestStringEncoding.testStringsHeap("yen \u00c2\u00a5"): success
test TestStringEncoding.testStringsHeap("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.testStringsHeap("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.testStringsHeap("0"): success
test TestStringEncoding.testStringsHeap("01"): success
test TestStringEncoding.testStringsHeap("012"): success
test TestStringEncoding.testStringsHeap("0123"): success
test TestStringEncoding.testStringsHeap("01234"): success
test TestStringEncoding.testStringsHeap("012345"): success
test TestStringEncoding.testStringsHeap("0123456"): success
test TestStringEncoding.testStringsHeap("01234567"): success
test TestStringEncoding.testStringsHeap("012345678"): success
test TestStringEncoding.testStringsHeap("0123456789"): success
test TestStringEncoding.unalignedSegmentSingleByte("testing"): success
test TestStringEncoding.unalignedSegmentSingleByte(""): success
test TestStringEncoding.unalignedSegmentSingleByte("X"): success
test TestStringEncoding.unalignedSegmentSingleByte("12345"): success
test TestStringEncoding.unalignedSegmentSingleByte("yen \u00c2\u00a5"): success
test TestStringEncoding.unalignedSegmentSingleByte("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.unalignedSegmentSingleByte("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.unalignedSegmentSingleByte("0"): success
test TestStringEncoding.unalignedSegmentSingleByte("01"): success
test TestStringEncoding.unalignedSegmentSingleByte("012"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123"): success
test TestStringEncoding.unalignedSegmentSingleByte("01234"): success
test TestStringEncoding.unalignedSegmentSingleByte("012345"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123456"): success
test TestStringEncoding.unalignedSegmentSingleByte("01234567"): success
test TestStringEncoding.unalignedSegmentSingleByte("012345678"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123456789"): success
test TestStringEncoding.unboundedSegment("testing"): success
test TestStringEncoding.unboundedSegment(""): success
test TestStringEncoding.unboundedSegment("X"): success
test TestStringEncoding.unboundedSegment("12345"): success
test TestStringEncoding.unboundedSegment("yen \u00c2\u00a5"): success
test TestStringEncoding.unboundedSegment("snowman \u00e2\u203a\u201e"): success
test TestStringEncoding.unboundedSegment("rainbow \u00f0\u0178\u0152\u02c6"): success
test TestStringEncoding.unboundedSegment("0"): success
test TestStringEncoding.unboundedSegment("01"): success
test TestStringEncoding.unboundedSegment("012"): success
test TestStringEncoding.unboundedSegment("0123"): success
test TestStringEncoding.unboundedSegment("01234"): success
test TestStringEncoding.unboundedSegment("012345"): success
test TestStringEncoding.unboundedSegment("0123456"): success
test TestStringEncoding.unboundedSegment("01234567"): success
test TestStringEncoding.unboundedSegment("012345678"): success
test TestStringEncoding.unboundedSegment("0123456789"): success

===============================================
java/foreign/TestStringEncoding.java
Total tests run: 313, Passes: 313, Failures: 0, Skips: 0
===============================================

----------System.err:(3/38)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
