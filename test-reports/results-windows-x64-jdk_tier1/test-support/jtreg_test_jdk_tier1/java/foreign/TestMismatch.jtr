#Test Results (version 2)
#Mon Apr 29 01:03:04 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestMismatch.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=bug8323552 testng
run=USER_SPECIFIED testng TestMismatch\r\n
source=TestMismatch.java
title=\ 

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/foreign/TestMismatch.java
elapsed=3487 0\:00\:03.487
end=Mon Apr 29 01\:03\:04 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az978-691.aqccnys5fsauxnvc2cwlk3lemf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-04-29-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 01\:03\:00 UTC 2024
test=java/foreign/TestMismatch.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=3487
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\java\\foreign

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/221)----------
command: build TestMismatch
reason: Named class compiled on demand
started: Mon Apr 29 01:03:00 UTC 2024
Test directory:
  compile: TestMismatch
finished: Mon Apr 29 01:03:00 UTC 2024
elapsed time (seconds): 0.063
result: Passed. Build successful

#section:compile
----------messages:(7/276)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestMismatch.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:03:00 UTC 2024
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 01:03:00 UTC 2024
elapsed time (seconds): 0.063
----------configuration:(13/876)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

javac compilation environment
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(36/3494)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/foreign/TestMismatch.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestMismatch.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestMismatch.java'
result: Passed. Compilation successful

#section:testng
----------messages:(7/225)----------
command: testng TestMismatch
reason: User specified action: run testng TestMismatch 
started: Mon Apr 29 01:03:00 UTC 2024
Mode: agentvm
Agent id: 6
finished: Mon Apr 29 01:03:04 UTC 2024
elapsed time (seconds): 3.424
----------configuration:(13/869)*----------
Boot Layer
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\junit-platform-console-standalone-1.9.2.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\patches\\java.base

Test Layer
  class path: D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d
              D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign

----------rerun:(28/3063)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/foreign/TestMismatch.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign\\TestMismatch.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_tier1\\classes\\java\\foreign\\TestMismatch.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\foreign;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
        com.sun.javatest.regtest.agent.TestNGRunner java/foreign/TestMismatch.java false TestMismatch
----------System.out:(525/87461)----------
test TestMismatch.testClosed(): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2fee8857, jdk.internal.foreign.NativeMemorySegmentImpl@53a18ab2): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@309ee277, jdk.internal.foreign.NativeMemorySegmentImpl@6b696803): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6112ee40, jdk.internal.foreign.NativeMemorySegmentImpl@26d8254f): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@26ed5f40, jdk.internal.foreign.NativeMemorySegmentImpl@50fbd533): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3af53064, jdk.internal.foreign.NativeMemorySegmentImpl@76ae6f25): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3cd90e3e, jdk.internal.foreign.NativeMemorySegmentImpl@2fbc6fd1): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4103f789, jdk.internal.foreign.NativeMemorySegmentImpl@355fa969): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@24b07340, jdk.internal.foreign.NativeMemorySegmentImpl@7a5167e0): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@477e27ad, jdk.internal.foreign.NativeMemorySegmentImpl@60737671): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4fd6886a, jdk.internal.foreign.NativeMemorySegmentImpl@79239d72): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@7099fcd1, jdk.internal.foreign.NativeMemorySegmentImpl@b77af70): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@29e37c07, jdk.internal.foreign.NativeMemorySegmentImpl@16a3629e): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bd9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1da53514, jdk.internal.foreign.NativeMemorySegmentImpl@2f1461e3): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bda, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4845afa6, jdk.internal.foreign.NativeMemorySegmentImpl@7cfc2e2f): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bdb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@209d5203, jdk.internal.foreign.NativeMemorySegmentImpl@4540f129): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bdc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@728858cb, jdk.internal.foreign.NativeMemorySegmentImpl@384f01d3): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bdd, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@235a5c08, jdk.internal.foreign.NativeMemorySegmentImpl@13a416a8): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bde, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@a8a168e, jdk.internal.foreign.NativeMemorySegmentImpl@7bc1b1cb): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ address: 0x2079e7e6bdf, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@35dfcdbb, jdk.internal.foreign.NativeMemorySegmentImpl@6fbb83e8): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@5853db0, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@36125a2b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1491b115, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@38d5768a): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@68e76d44, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@71e77054): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6babea47, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@38f5273b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@39ca5927, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@d07758b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3a0bbe58, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5163cb5f): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@29d591fa, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4ecb13e6): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1468bf5e, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@11b7a668): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6ea364be, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3f60a47b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3a08b1e0, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4f7ba48b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2017d5d3, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5feff780): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2c525d47, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@32f5bc53): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4d03c92f, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@73850dad): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xa, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4eda969f, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1d4374da): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@437d1aae, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@59091230): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1e0edc02, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@350d1d07): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xd, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@29a01cdb, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@41262b21): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xe, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@18165d81, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@31f9cc9c): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 16 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xf, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2a1ac263, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@ca68f4): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@a1e9b97, jdk.internal.foreign.NativeMemorySegmentImpl@76eb596d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1cee4546, jdk.internal.foreign.NativeMemorySegmentImpl@6252b76f): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4372704c, jdk.internal.foreign.NativeMemorySegmentImpl@2d58c911): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@61701e49, jdk.internal.foreign.NativeMemorySegmentImpl@3150e23b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@37d08234, jdk.internal.foreign.NativeMemorySegmentImpl@563340d1): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@674211f2, jdk.internal.foreign.NativeMemorySegmentImpl@54b0fe0c): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@5944571d, jdk.internal.foreign.NativeMemorySegmentImpl@2efe1046): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2db84034, jdk.internal.foreign.NativeMemorySegmentImpl@563f1621): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1b3bf70b, jdk.internal.foreign.NativeMemorySegmentImpl@74edbdb8): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@38b66183, jdk.internal.foreign.NativeMemorySegmentImpl@7c714a31): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@568e123e, jdk.internal.foreign.NativeMemorySegmentImpl@5dbfdb15): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@fe6e4ae, jdk.internal.foreign.NativeMemorySegmentImpl@29df088e): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6882c97b, jdk.internal.foreign.NativeMemorySegmentImpl@50f98351): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bda, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@53b42edc, jdk.internal.foreign.NativeMemorySegmentImpl@2d83fcc0): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2b00cb07, jdk.internal.foreign.NativeMemorySegmentImpl@5930d275): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3ac3f968, jdk.internal.foreign.NativeMemorySegmentImpl@173655c4): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdd, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@197f4b73, jdk.internal.foreign.NativeMemorySegmentImpl@3c52e98d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bde, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@5484d50, jdk.internal.foreign.NativeMemorySegmentImpl@660faa59): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdf, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2ca9e126, jdk.internal.foreign.NativeMemorySegmentImpl@6b4c0b2e): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6ce0d870, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@f23a41b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@255dd388, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4f14bc0b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@378fba1f, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7c05fef5): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@65b9986d, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2f2c8987): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@355301fb, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1c808dcc): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@42f5be7e, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6f043302): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@7a2f6c58, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@15c62b2d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3d6ea430, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3c225269): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@67471d12, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2fc06aee): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@55de805c, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@aaea878): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@59963092, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@78eb979c): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@845424b, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@603fe171): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@b164510, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@29e31923): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xa, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@14cad276, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2dcd3b3a): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6862af45, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2af9895d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@42fe98ba, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3f1b1f27): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xd, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@7c5c8de9, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@4a51f190): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xe, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2e23b82, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1a49cdf2): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad0, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xf, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@53e72e87, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@40ca3152): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@402f319b, jdk.internal.foreign.NativeMemorySegmentImpl@2ad6bc0f): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6dfe1250, jdk.internal.foreign.NativeMemorySegmentImpl@5464559d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4a8e9e6d, jdk.internal.foreign.NativeMemorySegmentImpl@577f79fe): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@7c4dcae, jdk.internal.foreign.NativeMemorySegmentImpl@390747cd): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3cc21586, jdk.internal.foreign.NativeMemorySegmentImpl@1d428f1c): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@50e1e7aa, jdk.internal.foreign.NativeMemorySegmentImpl@7c23a615): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2f60723c, jdk.internal.foreign.NativeMemorySegmentImpl@70e31ccd): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@631496f6, jdk.internal.foreign.NativeMemorySegmentImpl@4fc9e93a): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3ed2a51b, jdk.internal.foreign.NativeMemorySegmentImpl@79363711): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@7a1a6039, jdk.internal.foreign.NativeMemorySegmentImpl@51cbf81c): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@547f4eaf, jdk.internal.foreign.NativeMemorySegmentImpl@7d4df7b1): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4aeef65, jdk.internal.foreign.NativeMemorySegmentImpl@2a0ad369): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bd9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@cccc5ec, jdk.internal.foreign.NativeMemorySegmentImpl@7f6ad6d7): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bda, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@795a1d37, jdk.internal.foreign.NativeMemorySegmentImpl@13d35455): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@702e989, jdk.internal.foreign.NativeMemorySegmentImpl@2e18effb): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@2aef25af, jdk.internal.foreign.NativeMemorySegmentImpl@3a31dfda): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdd, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@77c7a159, jdk.internal.foreign.NativeMemorySegmentImpl@24d63053): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bde, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@3f7f1351, jdk.internal.foreign.NativeMemorySegmentImpl@75f8b08e): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ address: 0x2079e7e6bdf, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@1f4bc7c5, jdk.internal.foreign.NativeMemorySegmentImpl@5869bae6): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 16 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@42a0ad69, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3942f17): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@56b7744e, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@11bb5014): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 8 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@5d7c8b87, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@30849162): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x0, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@6156ca6a, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@58cf4574): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x1, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@159db56e, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@42cf382d): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x2, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@a33ddda, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@727d3f37): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x3, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@606779d0, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@74aeb50b): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x4, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@650bd29a, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3e799e12): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x5, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@5deccd32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@66c84b17): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x6, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@589017d5, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@63aed4a8): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x7, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@4da55658, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@15d3ce86): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x8, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@129ce353, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@75ec70ce): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0x9, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@14ff3e80, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@610cc137): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xa, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@8f7ae42, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@65118ae2): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xb, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@10af5ff3, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@251f661a): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@4e7c93d1, address: 0xc, byteSize: 1 }
test TestMismatch.testDifferentValues(jdk.internal.foreign.NativeMemorySegmentImpl@318eeed3, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5bb47fd6): success
testDifferentValues s1:MemorySegment{ address: 0x2079e7e6ad8, byteSize: 8 }, s2:MemorySegment{ heapBase: [B@

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@6f6bd37c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@ac852a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@48b5333c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@76d46af5): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@4949179a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@2753eed0): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@294777c1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@4e8d26bb): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@1b18c98f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@745cc1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@2f62339a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@d30c36e): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@1ff067ee): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@3b7fa285): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@54b5df7): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@a92bc21): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@89da1de): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@21ddf63b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@247c65e4): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@5deb4599): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@e9bde01): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@5266542a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@35e9a5c3): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@30292c0f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@3d145b0b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@63a48075): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=12, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@27506947, TestMismatch$SliceOffsetAndSize@600e800b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@27a98f8f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@277d0a3d): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@2738437): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@3c9c0536): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@26c2e642): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@77f55189): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@a8ce5bd): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@1edebfe6): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@27289355): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@5935f290): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@515e59ce): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@6f6bd37c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@ac852a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@48b5333c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@76d46af5): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@4949179a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@2753eed0): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@294777c1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@4e8d26bb): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@1b18c98f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@745cc1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@2f62339a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@d30c36e): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@1ff067ee): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@3b7fa285): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@54b5df7): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@a92bc21): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@89da1de): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@21ddf63b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@247c65e4): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@5deb4599): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@e9bde01): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@5266542a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@35e9a5c3): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@30292c0f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@3d145b0b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@63a48075): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=13, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@6c7211a4, TestMismatch$SliceOffsetAndSize@600e800b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@27a98f8f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@277d0a3d): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@2738437): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@3c9c0536): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@26c2e642): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@77f55189): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@a8ce5bd): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@1edebfe6): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@27289355): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@5935f290): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@515e59ce): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@6f6bd37c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@ac852a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@48b5333c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@76d46af5): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@4949179a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@2753eed0): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@294777c1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@4e8d26bb): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@1b18c98f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@745cc1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@2f62339a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@d30c36e): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@1ff067ee): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@3b7fa285): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@54b5df7): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@a92bc21): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@89da1de): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@21ddf63b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@247c65e4): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@5deb4599): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@e9bde01): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@5266542a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@35e9a5c3): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@30292c0f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@3d145b0b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@63a48075): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=14, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@55f555, TestMismatch$SliceOffsetAndSize@600e800b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@27a98f8f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@277d0a3d): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@2738437): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@3c9c0536): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@26c2e642): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@77f55189): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@a8ce5bd): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@1edebfe6): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@27289355): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@5935f290): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@515e59ce): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@6f6bd37c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@ac852a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@48b5333c): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@76d46af5): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@4949179a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@2753eed0): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@294777c1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ address: 0x2079ee152c0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@4e8d26bb): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=16]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@1b18c98f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@745cc1): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=8]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@2f62339a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=0, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@d30c36e): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=1, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@1ff067ee): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=2, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@3b7fa285): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=3, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@54b5df7): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=4, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@a92bc21): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=5, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@89da1de): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=6, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@21ddf63b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=7, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@247c65e4): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=8, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@5deb4599): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=9, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@e9bde01): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=10, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@5266542a): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=11, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@35e9a5c3): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=12, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@30292c0f): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=13, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@3d145b0b): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=14, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@63a48075): success
testSameValuesStatic s1:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@400a5d13, address: 0x0, byteSize: 16 }, offset=15, size=1], s2:SliceOffsetAndSize[segment=MemorySegment{ heapBase: [B@6ee391cf, address: 0x0, byteSize: 16 }, offset=15, size=1]
test TestMismatch.testSameValuesStatic(TestMismatch$SliceOffsetAndSize@66a4ef8a, TestMismatch$SliceOffsetAndSize@600e800b): success
test TestMismatch.testThreadAccess(): success

===============================================
java/foreign/TestMismatch.java
Total tests run: 14445, Passes: 14445, Failures: 0, Skips: 0
===============================================

----------System.err:(3/38)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
