#Test Results (version 2)
#Mon Apr 29 01:18:46 UTC 2024
#-----testdescription-----
$file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java
$root=/Users/runner/work/openjdk/openjdk/test/jdk
keywords=othervm testng
run=USER_SPECIFIED testng/othervm HexFormatTest\n
source=HexFormatTest.java
title=Check HexFormat formatting and parsing

#-----environment-----

#-----testresult-----
description=file\:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java
elapsed=1913 0\:00\:01.913
end=Mon Apr 29 01\:18\:46 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=192.168.64.24
javatestOS=Mac OS X 13.6.6 (x86_64)
javatestVersion=6.0-ea+b24-2024-04-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 01\:18\:44 UTC 2024
test=java/util/HexFormat/HexFormatTest.java
testJDK=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
testJDK_OS=[name\:Mac OS X,arch\:x86_64,version\:13.6.6,family\:mac,simple_arch\:x64,simple_version\:13.6,processors\:4,maxMemory\:15032385536,maxSwap\:0]
testJDK_os.arch=x86_64
testJDK_os.name=Mac OS X
testJDK_os.version=13.6.6
totalTime=1913
user.name=runner
work=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/util/HexFormat

#section:script_messages
----------messages:(4/341)----------
JDK under test: /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/216)----------
command: build HexFormatTest
reason: Named class compiled on demand
started: Mon Apr 29 01:18:44 UTC 2024
Test directory:
  compile: HexFormatTest
finished: Mon Apr 29 01:18:44 UTC 2024
elapsed time (seconds): 0.067
result: Passed. Build successful

#section:compile
----------messages:(7/284)----------
command: compile /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java
reason: .class file out of date or does not exist
started: Mon Apr 29 01:18:44 UTC 2024
Mode: agentvm
Agent id: 40
finished: Mon Apr 29 01:18:44 UTC 2024
elapsed time (seconds): 0.067
----------configuration:(13/944)----------
Boot Layer (javac runtime environment)
  class path: /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

javac compilation environment
  source path: /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat
  class path:  /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat
               /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(33/3382)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/1 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/util/HexFormat/HexFormatTest.java \\
        -J-Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java \\
        -J-Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -J-Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -J-Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d \\
        -J-Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d \\
        -J-Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -d /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d \\
        -sourcepath /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -classpath /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat:/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java
result: Passed. Compilation successful

#section:testng
----------messages:(6/237)----------
command: testng HexFormatTest
reason: User specified action: run testng/othervm HexFormatTest 
started: Mon Apr 29 01:18:44 UTC 2024
Mode: othervm [/othervm specified]
finished: Mon Apr 29 01:18:46 UTC 2024
elapsed time (seconds): 1.845
----------configuration:(0/0)----------
----------System.out:(410/30539)----------
test HexFormatTest.badFromHexDigits("a", 0, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badFromHexDigits("b", 1, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badFromHexDigits("a", -1, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badFromHexDigits("b", -1, 1, java.lang.Class@1fed7b33): success
test HexFormatTest.badFromHexDigits("a", 0, -1, java.lang.Class@1fed7b33): success
test HexFormatTest.badFromHexDigits("b", 1, -1, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("a", 0, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("b", 1, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("a", -1, 2, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("b", -1, 1, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("a", 0, -1, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("b", 1, -1, java.lang.Class@1fed7b33): success
test HexFormatTest.badParseHex("76543210", 0, 7, java.lang.Class@23f2d259): success
test HexFormatTest.badParseHex("zz00", 0, 4, java.lang.Class@23f2d259): success
test HexFormatTest.badParseHex("00zz", 0, 4, java.lang.Class@23f2d259): success
    7f
    0041
    00003039
    7fffffffffffffff, 9223372036854775807
    Formatted: 00:01:02:03:7C:7D:7E:7F
    Parsed: [0, 1, 2, 3, 124, 125, 126, 127]
    Formatted: 00,01,02,03,7c,7d,7e,7f
    Parsed: [0, 1, 2, 3, 124, 125, 126, 127]
    Formatted: #00, #01, #02, #03, #7c, #7d, #7e, #7f
    Parsed:    [0, 1, 2, 3, 124, 125, 126, 127]
test HexFormatTest.samples(): success
test HexFormatTest.testAppendHexByteWithCharArrayWriter(): success
test HexFormatTest.testAppendHexByteWithCharBuffer(): success
test HexFormatTest.testAppendHexByteWithStringBuilder(): success
test HexFormatTest.testFactoryNPE(): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(", ", "#", "L", false, java.util.HexFormat@6e3c7fdd): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("", "", "", false, java.util.HexFormat@6c79c942): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(".", "", "", false, java.util.HexFormat@73f86158): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable(", ", "0x", "", true, java.util.HexFormat@1339d06e): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("?", "?", "?", false, java.util.HexFormat@6455e9bd): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexAppendable("?", "", "", false, java.util.HexFormat@498c8f88): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(", ", "#", "L", false, java.util.HexFormat@233a8dad): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("", "", "", false, java.util.HexFormat@a2c97d1): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(".", "", "", false, java.util.HexFormat@2aaa2cd2): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray(", ", "0x", "", true, java.util.HexFormat@77362a23): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("?", "?", "?", false, java.util.HexFormat@5abb50e): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexCharArray("?", "", "", false, java.util.HexFormat@f2a814b): success
    formatted: 4142434445464748494A4B4C4D4E4F
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    formatted subrange: #43L, #44L, #45L
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(", ", "#", "L", false, java.util.HexFormat@58d723f1): success
    formatted: 4142434445464748494a4b4c4d4e4f
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("", "", "", false, java.util.HexFormat@48c60320): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    formatted subrange: 43.44.45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(".", "", "", false, java.util.HexFormat@6479b524): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    formatted subrange: 0x43, 0x44, 0x45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed(", ", "0x", "", true, java.util.HexFormat@791ccbcf): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    formatted subrange: ?43???44???45?
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("?", "?", "?", false, java.util.HexFormat@53800eb0): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    formatted subrange: 43?44?45
    parsed as: [67, 68, 69]
test HexFormatTest.testFormatHexCharArrayIndexed("?", "", "", false, java.util.HexFormat@15812e63): success
test HexFormatTest.testFormatHexNPE(): success
    formatted: 42434445464748494A4B4C4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(", ", "#", "L", false, java.util.HexFormat@49e66e9a): success
    formatted: 42434445464748494a4b4c4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("", "", "", false, java.util.HexFormat@253b016): success
    formatted: 42.43.44.45.46.47.48.49.4a.4b.4c.4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(".", "", "", false, java.util.HexFormat@65012b7c): success
    formatted: 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable(", ", "0x", "", true, java.util.HexFormat@253553f1): success
    formatted: ?42???43???44???45???46???47???48???49???4a???4b???4c???4d?
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("?", "?", "?", false, java.util.HexFormat@1e9828bc): success
    formatted: 42?43?44?45?46?47?48?49?4a?4b?4c?4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
actual: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
sub   : [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeAppendable("?", "", "", false, java.util.HexFormat@678fc42f): success
    formatted: 42434445464748494A4B4C4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(", ", "#", "L", false, java.util.HexFormat@2c9d77b): success
    formatted: 42434445464748494a4b4c4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("", "", "", false, java.util.HexFormat@1bb833aa): success
    formatted: 42.43.44.45.46.47.48.49.4a.4b.4c.4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(".", "", "", false, java.util.HexFormat@18c6ca84): success
    formatted: 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString(", ", "0x", "", true, java.util.HexFormat@2f871f06): success
    formatted: ?42???43???44???45???46???47???48???49???4a???4b???4c???4d?
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("?", "?", "?", false, java.util.HexFormat@10b9a3f2): success
    formatted: 42?43?44?45?46?47?48?49?4a?4b?4c?4d
    parsed as: [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]
test HexFormatTest.testFormatHexRangeString("?", "", "", false, java.util.HexFormat@30257102): success
    formatted: 4142434445464748494A4B4C4D4E4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted: #41L, #42L, #43L, #44L, #45L, #46L, #47L, #48L, #49L, #4aL, #4bL, #4cL, #4dL, #4eL, #4fL
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(", ", "#", "L", false, java.util.HexFormat@3304e47f): success
    formatted: 4142434445464748494a4b4c4d4e4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("", "", "", false, java.util.HexFormat@1db60690): success
    formatted: 41.42.43.44.45.46.47.48.49.4a.4b.4c.4d.4e.4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(".", "", "", false, java.util.HexFormat@29a2a68e): success
    formatted: 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString(", ", "0x", "", true, java.util.HexFormat@24ee020c): success
    formatted: ?41???42???43???44???45???46???47???48???49???4a???4b???4c???4d???4e???4f?
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("?", "?", "?", false, java.util.HexFormat@71b0b819): success
    formatted: 41?42?43?44?45?46?47?48?49?4a?4b?4c?4d?4e?4f
    parsed as: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
test HexFormatTest.testFormatHexString("?", "", "", false, java.util.HexFormat@48b4c9e1): success
test HexFormatTest.testFormatter("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testFormatter(", ", "#", "L", false, java.util.HexFormat@48ffa2b7): success
test HexFormatTest.testFormatter("", "", "", false, java.util.HexFormat@2d7919a5): success
test HexFormatTest.testFormatter(".", "", "", false, java.util.HexFormat@47b4d15e): success
test HexFormatTest.testFormatter(", ", "0x", "", true, java.util.HexFormat@5071fdc1): success
test HexFormatTest.testFormatter("?", "?", "?", false, java.util.HexFormat@1a932e38): success
test HexFormatTest.testFormatter("?", "", "", false, java.util.HexFormat@73b263d7): success
test HexFormatTest.testFormatterParameterMethods("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testFormatterParameterMethods(", ", "#", "L", false, java.util.HexFormat@56d9f7f2): success
test HexFormatTest.testFormatterParameterMethods("", "", "", false, java.util.HexFormat@77b3fdb0): success
test HexFormatTest.testFormatterParameterMethods(".", "", "", false, java.util.HexFormat@240f5bff): success
test HexFormatTest.testFormatterParameterMethods(", ", "0x", "", true, java.util.HexFormat@56e78dee): success
test HexFormatTest.testFormatterParameterMethods("?", "?", "?", false, java.util.HexFormat@37480a6f): success
test HexFormatTest.testFormatterParameterMethods("?", "", "", false, java.util.HexFormat@6e879681): success
test HexFormatTest.testFormatterTestEquals("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testFormatterTestEquals(", ", "#", "L", false, java.util.HexFormat@6801c81b): success
test HexFormatTest.testFormatterTestEquals("", "", "", false, java.util.HexFormat@54ba2a4f): success
test HexFormatTest.testFormatterTestEquals(".", "", "", false, java.util.HexFormat@48439e3d): success
test HexFormatTest.testFormatterTestEquals(", ", "0x", "", true, java.util.HexFormat@74b75b5f): success
test HexFormatTest.testFormatterTestEquals("?", "?", "?", false, java.util.HexFormat@286ab773): success
test HexFormatTest.testFormatterTestEquals("?", "", "", false, java.util.HexFormat@40ce6b81): success
    hex: uppercase: true, delimiter: "", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("", "", "", true, java.util.HexFormat@52b4e47b): success
    hex: uppercase: false, delimiter: ", ", prefix: "#", suffix: "L"
test HexFormatTest.testFormatterToString(", ", "#", "L", false, java.util.HexFormat@413f3368): success
    hex: uppercase: false, delimiter: "", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("", "", "", false, java.util.HexFormat@68c80efd): success
    hex: uppercase: false, delimiter: ".", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString(".", "", "", false, java.util.HexFormat@5099af7a): success
    hex: uppercase: true, delimiter: ", ", prefix: "0x", suffix: ""
test HexFormatTest.testFormatterToString(", ", "0x", "", true, java.util.HexFormat@7cc10ff7): success
    hex: uppercase: false, delimiter: "?", prefix: "?", suffix: "?"
test HexFormatTest.testFormatterToString("?", "?", "?", false, java.util.HexFormat@22d3c983): success
    hex: uppercase: false, delimiter: "?", prefix: "", suffix: ""
test HexFormatTest.testFormatterToString("?", "", "", false, java.util.HexFormat@30ca8593): success
test HexFormatTest.testFromHexDigit(): success
test HexFormatTest.testFromHexInvalid(): success
test HexFormatTest.testFromHexNPE(): success
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
java.lang.NumberFormatException: not a hexadecimal digit: "-" = 45
test HexFormatTest.testFromHexPairInvalid(): success
test HexFormatTest.testIOException("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testIOException(", ", "#", "L", false, java.util.HexFormat@74d16e26): success
test HexFormatTest.testIOException("", "", "", false, java.util.HexFormat@21e687d4): success
test HexFormatTest.testIOException(".", "", "", false, java.util.HexFormat@7d3679f3): success
test HexFormatTest.testIOException(", ", "0x", "", true, java.util.HexFormat@127267c9): success
test HexFormatTest.testIOException("?", "?", "?", false, java.util.HexFormat@125c16f9): success
test HexFormatTest.testIOException("?", "", "", false, java.util.HexFormat@68936342): success
test HexFormatTest.testIsHexDigit(): success
OOME: total mem: 30000000, free mem: 2fd2a650, max mem: 30000000
test HexFormatTest.testOOME("", "", "", true, java.util.HexFormat@52b4e47b): skip
org.testng.SkipException: Insufficient Memory to test OOME
	at HexFormatTest.testOOME(HexFormatTest.java:646)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1575)
ex: java.lang.OutOfMemoryError: String size 2147483650 exceeds maximum 2147483647
test HexFormatTest.testOOME(", ", "#", "L", false, java.util.HexFormat@5d1f358a): success
OOME: total mem: 30000000, free mem: 2fd320f0, max mem: 30000000
test HexFormatTest.testOOME("", "", "", false, java.util.HexFormat@17614039): skip
org.testng.SkipException: Insufficient Memory to test OOME
	at HexFormatTest.testOOME(HexFormatTest.java:646)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1575)
ex: java.lang.OutOfMemoryError: String size 2147483648 exceeds maximum 2147483647
test HexFormatTest.testOOME(".", "", "", false, java.util.HexFormat@2feae062): success
ex: java.lang.OutOfMemoryError: String size 2147483650 exceeds maximum 2147483647
test HexFormatTest.testOOME(", ", "0x", "", true, java.util.HexFormat@230e8ecd): success
ex: java.lang.OutOfMemoryError: String size 2147483649 exceeds maximum 2147483647
test HexFormatTest.testOOME("?", "?", "?", false, java.util.HexFormat@5c4f14cb): success
ex: java.lang.OutOfMemoryError: String size 2147483648 exceeds maximum 2147483647
test HexFormatTest.testOOME("?", "", "", false, java.util.HexFormat@2e3b9188): success
test HexFormatTest.testParseHexEmptyString("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testParseHexEmptyString(", ", "#", "L", false, java.util.HexFormat@71dd7eec): success
test HexFormatTest.testParseHexEmptyString("", "", "", false, java.util.HexFormat@53f79c5e): success
test HexFormatTest.testParseHexEmptyString(".", "", "", false, java.util.HexFormat@4603474a): success
test HexFormatTest.testParseHexEmptyString(", ", "0x", "", true, java.util.HexFormat@47415afd): success
test HexFormatTest.testParseHexEmptyString("?", "?", "?", false, java.util.HexFormat@5c919660): success
test HexFormatTest.testParseHexEmptyString("?", "", "", false, java.util.HexFormat@60b6c7be): success
test HexFormatTest.testParseHexNPE(): success
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("", "", "", true, java.util.HexFormat@52b4e47b): success
    formatted subrange: #43L, #44L, #45L
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(", ", "#", "L", false, java.util.HexFormat@2773b4bb): success
    formatted subrange: 434445
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("", "", "", false, java.util.HexFormat@7b496d00): success
    formatted subrange: 43.44.45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(".", "", "", false, java.util.HexFormat@5af5f68f): success
    formatted subrange: 0x43, 0x44, 0x45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange(", ", "0x", "", true, java.util.HexFormat@1c6b6e61): success
    formatted subrange: ?43???44???45?
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("?", "?", "?", false, java.util.HexFormat@436e37f5): success
    formatted subrange: 43?44?45
    parsed as: [67, 68, 69]
test HexFormatTest.testParseHexStringRange("?", "", "", false, java.util.HexFormat@790aaf69): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("0", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:0", ":", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("0", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01:0", ",", "", ""): success
ex: java.lang.IllegalArgumentException: found: ":", expected: ",", index: 2 ch: 58
test HexFormatTest.testToBytesThrowing("01:00", ",", "", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("00]", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("[00", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("]", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("[", ",", "[", "]"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("00", ",", "abc", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01", ",", "", "def"): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("abc00,", ",", "abc", ""): success
ex: java.lang.IllegalArgumentException: extra or missing delimiters or values consisting of prefix, two hexadecimal digits, and suffix
test HexFormatTest.testToBytesThrowing("01def,", ",", "", "def"): success
test HexFormatTest.testToHex(): success
test HexFormatTest.testToHexDigits(): success
    formatted: "fedcba9876543210", parsed as: 0xfedcba9876543210L
test HexFormatTest.testToHexDigitsLong(): success
test HexFormatTest.testToHexDigitsNPE(): success
test HexFormatTest.testZeroLength("", "", "", true, java.util.HexFormat@52b4e47b): success
test HexFormatTest.testZeroLength(", ", "#", "L", false, java.util.HexFormat@42c5ec67): success
test HexFormatTest.testZeroLength("", "", "", false, java.util.HexFormat@1dec41e1): success
test HexFormatTest.testZeroLength(".", "", "", false, java.util.HexFormat@3a945def): success
test HexFormatTest.testZeroLength(", ", "0x", "", true, java.util.HexFormat@45aada68): success
test HexFormatTest.testZeroLength("?", "?", "?", false, java.util.HexFormat@7315fe43): success
test HexFormatTest.testZeroLength("?", "", "", false, java.util.HexFormat@697cc150): success
    digits:  0, formatted: "", parsed as: 0x00000000
    digits:  1, formatted: "0", parsed as: 0x00000000
    digits:  2, formatted: "10", parsed as: 0x00000010
    digits:  3, formatted: "210", parsed as: 0x00000210
    digits:  4, formatted: "3210", parsed as: 0x00003210
    digits:  5, formatted: "43210", parsed as: 0x00043210
    digits:  6, formatted: "543210", parsed as: 0x00543210
    digits:  7, formatted: "6543210", parsed as: 0x06543210
    digits:  8, formatted: "76543210", parsed as: 0x76543210
test HexFormatTest.testfromHexDigitsToInt(): success
    digits:  0, formatted: "", parsed as: 0x0000000000000000L
    digits:  1, formatted: "0", parsed as: 0x0000000000000000L
    digits:  2, formatted: "10", parsed as: 0x0000000000000010L
    digits:  3, formatted: "210", parsed as: 0x0000000000000210L
    digits:  4, formatted: "3210", parsed as: 0x0000000000003210L
    digits:  5, formatted: "43210", parsed as: 0x0000000000043210L
    digits:  6, formatted: "543210", parsed as: 0x0000000000543210L
    digits:  7, formatted: "6543210", parsed as: 0x0000000006543210L
    digits:  8, formatted: "76543210", parsed as: 0x0000000076543210L
    digits:  9, formatted: "876543210", parsed as: 0x0000000876543210L
    digits: 10, formatted: "9876543210", parsed as: 0x0000009876543210L
    digits: 11, formatted: "a9876543210", parsed as: 0x00000a9876543210L
    digits: 12, formatted: "ba9876543210", parsed as: 0x0000ba9876543210L
    digits: 13, formatted: "cba9876543210", parsed as: 0x000cba9876543210L
    digits: 14, formatted: "dcba9876543210", parsed as: 0x00dcba9876543210L
    digits: 15, formatted: "edcba9876543210", parsed as: 0x0edcba9876543210L
    digits: 16, formatted: "fedcba9876543210", parsed as: 0xfedcba9876543210L
test HexFormatTest.testfromHexDigitsToLong(): success
test HexFormatTest.wrongNumberDigits(): success

===============================================
java/util/HexFormat/HexFormatTest.java
Total tests run: 154, Passes: 152, Failures: 0, Skips: 2
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(34/3528)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/1 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
CLASSPATH=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/util/HexFormat/HexFormatTest.java \\
        -Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat/HexFormatTest.java \\
        -Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d \\
        -Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d \\
        -Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/util/HexFormat/HexFormatTest.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/util/HexFormat \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=12.5 \\
        -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        -Djava.library.path=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        com.sun.javatest.regtest.agent.MainWrapper /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/util/HexFormat/HexFormatTest.d/testng.0.jta java/util/HexFormat/HexFormatTest.java false HexFormatTest
result: Passed. Execution successful


test result: Passed. Execution successful
