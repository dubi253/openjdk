#Test Results (version 2)
#Mon Apr 29 00:37:33 UTC 2024
#-----testdescription-----
$file=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java
$root=/Users/runner/work/openjdk/openjdk/test/jdk
keywords=bug8302590 bug8303648 testng
run=USER_SPECIFIED testng IndexOfBeginEnd\n
source=IndexOfBeginEnd.java
title=This one is for String.indexOf([int|String],int,int).

#-----environment-----

#-----testresult-----
description=file\:/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java
elapsed=270 0\:00\:00.270
end=Mon Apr 29 00\:37\:33 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=192.168.64.15
javatestOS=Mac OS X 14.4.1 (aarch64)
javatestVersion=6.0-ea+b24-2024-04-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 00\:37\:33 UTC 2024
test=java/lang/String/IndexOfBeginEnd.java
testJDK=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
testJDK_OS=[name\:Mac OS X,arch\:aarch64,version\:14.4.1,family\:mac,simple_arch\:aarch64,simple_version\:14.4,processors\:3,maxMemory\:7516192768,maxSwap\:1073741824]
testJDK_os.arch=aarch64
testJDK_os.name=Mac OS X
testJDK_os.version=14.4.1
totalTime=270
user.name=runner
work=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/lang/String

#section:script_messages
----------messages:(4/341)----------
JDK under test: /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/220)----------
command: build IndexOfBeginEnd
reason: Named class compiled on demand
started: Mon Apr 29 00:37:33 UTC 2024
Test directory:
  compile: IndexOfBeginEnd
finished: Mon Apr 29 00:37:33 UTC 2024
elapsed time (seconds): 0.063
result: Passed. Build successful

#section:compile
----------messages:(7/282)----------
command: compile /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:33 UTC 2024
Mode: agentvm
Agent id: 1
finished: Mon Apr 29 00:37:33 UTC 2024
elapsed time (seconds): 0.063
----------configuration:(13/937)----------
Boot Layer (javac runtime environment)
  class path: /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

javac compilation environment
  source path: /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String
  class path:  /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String
               /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar
               /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar

----------rerun:(33/3359)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/lang/String/IndexOfBeginEnd.java \\
        -J-Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java \\
        -J-Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -J-Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -J-Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d \\
        -J-Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d \\
        -J-Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -d /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d \\
        -sourcepath /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -classpath /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String:/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java
result: Passed. Compilation successful

#section:testng
----------messages:(7/225)----------
command: testng IndexOfBeginEnd
reason: User specified action: run testng IndexOfBeginEnd 
started: Mon Apr 29 00:37:33 UTC 2024
Mode: agentvm
Agent id: 25
finished: Mon Apr 29 00:37:33 UTC 2024
elapsed time (seconds): 0.206
----------configuration:(13/926)----------
Boot Layer
  class path: /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/junit-platform-console-standalone-1.9.2.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
              /Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 
  patch:      java.base /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

Test Layer
  class path: /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d
              /Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String

----------rerun:(26/2957)*----------
cd /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/Users/runner \\
LANG=en_US.UTF-8 \\
LC_ALL=C \\
LC_CTYPE=en_US.UTF-8 \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/Users/runner/work/openjdk/openjdk/bundles/tests \\
    /Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/Users/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dcompile.jdk=/Users/runner/work/openjdk/openjdk/bundles/jdk/jdk-23.jdk/Contents/Home \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/Users/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/Users/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/lang/String/IndexOfBeginEnd.java \\
        -Dtest.file=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String/IndexOfBeginEnd.java \\
        -Dtest.src=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -Dtest.src.path=/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -Dtest.classes=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d \\
        -Dtest.class.path=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d \\
        -Dtest.class.path.prefix=/Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String \\
        -classpath /Users/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/0/java/lang/String/IndexOfBeginEnd.d:/Users/runner/work/openjdk/openjdk/test/jdk/java/lang/String:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/Users/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
        com.sun.javatest.regtest.agent.TestNGRunner java/lang/String/IndexOfBeginEnd.java false IndexOfBeginEnd
----------System.out:(238/18977)*----------
test IndexOfBeginEnd.testIndexOf("ABABABABAB", A, -1, 0): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", A, 0, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", A, -1, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", A, 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", A, -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", A, 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", A, -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", A, 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", A, -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", A, 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", A, -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", A, 3, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", A, -1, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", A, 0, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", A, -1, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", A, 3, 1): success
test IndexOfBeginEnd.testIndexOf("", 90, 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("A", 65, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("A", 65, 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("A", 90, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 65, 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("AB", 65, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("AB", 65, 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 65, 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 66, 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("AB", 66, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 66, 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 66, 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("AB", 66, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("AB", 90, 0, 2, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", 65, 0, 4, 0): success
test IndexOfBeginEnd.testIndexOf("ABCD", 65, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("ABCD", 65, 1, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", 68, 0, 4, 3): success
test IndexOfBeginEnd.testIndexOf("ABCD", 68, 0, 3, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", 68, 3, 4, 3): success
test IndexOfBeginEnd.testIndexOf("ABCD", 68, 4, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", 90, 0, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 65, 0, 8, 0): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 65, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 65, 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 65, 1, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 72, 0, 8, 7): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 72, 0, 7, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 72, 7, 8, 7): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 72, 8, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", 90, 0, 8, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21", 65313, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21", 65313, 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21", 65313, 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21", 65, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65313, 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65313, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65313, 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65314, 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65314, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65314, 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65314, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", 65338, 0, 2, -1): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 65, 0, 10, 0): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 65, 1, 3, 2): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 65, 3, 3, -1): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 65, 3, 5, 4): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 66, 0, 10, 1): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 66, 2, 4, 3): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", 66, 4, 6, 5): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65, 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65, 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65313, 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65313, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65313, 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65313, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", 65338, 0, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65313, 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65313, 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65313, 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65313, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65, 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65, 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", 65338, 0, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65313, 0, 10, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65313, 1, 3, 2): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65313, 3, 3, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65313, 3, 5, 4): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65314, 0, 10, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65314, 2, 4, 3): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 65314, 4, 6, 5): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", A, 0, 6, 5): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", A, 2, 6, 5): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", A, 2, 4, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", A, 4, 4, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", \uff21, 0, 6, 4): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", \uff21, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", \uff21, 2, 6, 4): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", \uff21, 2, 4, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66560, 0, 6, 0): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66560, 0, 3, 0): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66560, 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66560, 1, 4, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66561, 0, 6, 2): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66561, 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66561, 2, 5, 2): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66561, 2, 3, -1): success
test IndexOfBeginEnd.testIndexOf("\ud801\udc00\ud801\udc01\uff21A", 66561, 3, 6, -1): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "", -1, 0): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "", 0, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "", -1, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "", 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "", -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "", 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "", -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "", 3, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "", -1, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "", 0, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "", -1, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "", 3, 1): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "A", -1, 0): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "A", 0, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "A", -1, 100): success
test IndexOfBeginEnd.testIndexOf("ABABABABAB", "A", 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "A", -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "A", 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "A", -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "A", 3, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "A", -1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "A", 0, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "A", -1, 100): success
test IndexOfBeginEnd.testIndexOf("\uff21A\uff21A\uff21A\uff21A\uff21A", "A", 3, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "A", -1, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "A", 0, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "A", -1, 100): success
test IndexOfBeginEnd.testIndexOf("A\uff21A\uff21A\uff21A\uff21A\uff21", "A", 3, 1): success
test IndexOfBeginEnd.testIndexOf("", "A", 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("", "", 0, 0, 0): success
test IndexOfBeginEnd.testIndexOf("A", "A", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("A", "A", 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("A", "AB", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("A", "", 0, 0, 0): success
test IndexOfBeginEnd.testIndexOf("A", "", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("A", "", 1, 1, 1): success
test IndexOfBeginEnd.testIndexOf("AB", "A", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("AB", "A", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("AB", "A", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("AB", "B", 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("AB", "B", 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("AB", "B", 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("AB", "AB", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("AB", "AB", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("AB", "AB", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("AB", "", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("AB", "", 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("AB", "", 2, 2, 2): success
test IndexOfBeginEnd.testIndexOf("ABCD", "ABCD", 0, 4, 0): success
test IndexOfBeginEnd.testIndexOf("ABCD", "ABCD", 0, 3, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "ABCD", 1, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "BC", 0, 4, 1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "BC", 0, 3, 1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "BC", 1, 4, 1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "BC", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "BC", 2, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "A", 0, 4, 0): success
test IndexOfBeginEnd.testIndexOf("ABCD", "A", 1, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "CD", 0, 4, 2): success
test IndexOfBeginEnd.testIndexOf("ABCD", "CD", 2, 4, 2): success
test IndexOfBeginEnd.testIndexOf("ABCD", "CD", 1, 4, 2): success
test IndexOfBeginEnd.testIndexOf("ABCD", "CD", 0, 3, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "A", 2, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "A", 2, 2, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "A", 4, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCD", "ABCDE", 0, 4, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "ABCDEFGH", 0, 8, 0): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "ABCDEFGH", 1, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "ABCDEFGH", 0, 7, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "DEFGH", 0, 8, 3): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "DEFGH", 3, 8, 3): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "DEFGH", 4, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "DEFGH", 0, 7, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "A", 0, 8, 0): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "A", 1, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "A", 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "GHI", 0, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "GHI", 8, 8, -1): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "", 4, 4, 4): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "", 4, 8, 4): success
test IndexOfBeginEnd.testIndexOf("ABCDEFGH", "", 8, 8, 8): success
test IndexOfBeginEnd.testIndexOf("\uff21", "\uff21", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21", "\uff21", 0, 0, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21", "\uff21", 1, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21", "\uff21A", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff21\uff22", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff21\uff22", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff22", 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff22", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff22", 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff21", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "\uff21", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "", 1, 1, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22", "", 2, 2, 2): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21A", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21A", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21A", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "A", 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "A", 0, 2, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "A", 0, 1, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21", 0, 1, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21A", "\uff21", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", "A\uff21", 0, 2, 0): success
test IndexOfBeginEnd.testIndexOf("A\uff21", "\uff21", 1, 2, 1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", "A\uff21", 1, 2, -1): success
test IndexOfBeginEnd.testIndexOf("A\uff21", "A\uff21A", 0, 2, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 0, 10, 0): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 0, 9, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 1, 10, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 1, 10, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 0, 10, 1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", 0, 9, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22", 4, 10, 4): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22", 3, 8, 4): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22", 2, 7, 2): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "\uff21\uff22\uff21\uff22", 7, 10, -1): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", 7, 10, 7): success
test IndexOfBeginEnd.testIndexOf("\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22\uff21\uff22", "", 10, 10, 10): success

===============================================
java/lang/String/IndexOfBeginEnd.java
Total tests run: 232, Passes: 232, Failures: 0, Skips: 0
===============================================

----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
