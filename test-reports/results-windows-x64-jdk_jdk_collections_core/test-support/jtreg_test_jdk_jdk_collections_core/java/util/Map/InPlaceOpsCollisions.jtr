#Test Results (version 2)
#Tue Mar 05 01:55:36 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map\\InPlaceOpsCollisions.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=bug8005698 othervm testng
run=USER_SPECIFIED testng/othervm -Dtest.map.collisions.shortrun\=true InPlaceOpsCollisions\r\n
source=InPlaceOpsCollisions.java
title=Ensure overrides of in-place operations in Maps behave well with lots of collisions.

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/util/Map/InPlaceOpsCollisions.java
elapsed=11613 0\:00\:11.613
end=Tue Mar 05 01\:55\:36 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az845-568.u3bnpy2jrkgenmayvwcmsbkv0c.bx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-02-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Tue Mar 05 01\:55\:24 UTC 2024
test=java/util/Map/InPlaceOpsCollisions.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=11613
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\java\\util\\Map

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-69fdbdd1519928e6c4569a11d14800b4d0f71733)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-69fdbdd1519928e6c4569a11d14800b4d0f71733, mixed mode, sharing)

#section:build
----------messages:(7/237)----------
command: build InPlaceOpsCollisions
reason: Named class compiled on demand
started: Tue Mar 05 01:55:24 UTC 2024
Test directory:
  compile: InPlaceOpsCollisions
finished: Tue Mar 05 01:55:24 UTC 2024
elapsed time (seconds): 0.099
result: Passed. Build successful

#section:compile
----------messages:(7/286)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map\\InPlaceOpsCollisions.java
reason: .class file out of date or does not exist
started: Tue Mar 05 01:55:24 UTC 2024
Mode: agentvm
Agent id: 1
finished: Tue Mar 05 01:55:24 UTC 2024
elapsed time (seconds): 0.099
----------configuration:(13/920)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\patches\\java.base

javac compilation environment
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(36/3718)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map\\InPlaceOpsCollisions.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map\\InPlaceOpsCollisions.java'
result: Passed. Compilation successful

#section:testng
----------messages:(6/330)----------
command: testng -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions
reason: User specified action: run testng/othervm -Dtest.map.collisions.shortrun=true InPlaceOpsCollisions 
started: Tue Mar 05 01:55:24 UTC 2024
Mode: othervm [/othervm specified]
finished: Tue Mar 05 01:55:36 UTC 2024
elapsed time (seconds): 11.514
----------configuration:(0/0)----------
----------System.out:(384/64029)----------
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0x000001920103d130@7c5f86c4): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0x000001920103d348@d65f57): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0x000001920103d560@5ba8a6ea): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0x000001920103d778@7e97839): success
test InPlaceOpsCollisions.testComputeIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0x000001920103d990@49ee2fa7): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNonNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testComputeIfPresentNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@72bdba56, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3998263, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b536a9f, 2500): success
test InPlaceOpsCollisions.testComputeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6f0234f, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testComputeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testComputeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@72bdba56, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3998263, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("HashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b536a9f, 2500): success
test InPlaceOpsCollisions.testMergeNonNull("LinkedHashMap with collisions objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6f0234f, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testMergeNull("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testMergeNull("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsent("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("HashMap", InPlaceOpsCollisions$$Lambda/0x000001920103d130@7c5f86c4): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("LinkedHashMap", InPlaceOpsCollisions$$Lambda/0x000001920103d348@d65f57): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap", InPlaceOpsCollisions$$Lambda/0x000001920103d560@5ba8a6ea): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap(cmp)", InPlaceOpsCollisions$$Lambda/0x000001920103d778@7e97839): success
test InPlaceOpsCollisions.testPutIfAbsentOverwriteNull("TreeMap.descendingMap", InPlaceOpsCollisions$$Lambda/0x000001920103d990@49ee2fa7): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testRemoveMapping("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceIfMapped("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3832143f, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21c67d76, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@ece67ac, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73ae3c50, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10407c7c, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@189b84ad, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@23674d02, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@526094e7, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1238f45d, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d615d6d, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74cd8f61, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@a2cd587, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3b3696cb, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@10d02c4a, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@33745b2e, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@633520b5, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@192c3e09, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding objects", MapWithCollisionsProviders$$Lambda/0x0000019201023890@6c523c65, 2500): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@73a542d2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@21ea1e32, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@7c4bb177, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@687829a2, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@704658ff, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@16541790, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@74d28bac, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@3ddcd8af, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with unique strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@66f87f14, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("HashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@239097e0, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("LinkedHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@38c08777, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Hashtable with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@76fcf64a, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("IdentityHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@4dc89a13, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@36dc7b68, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("Descending TreeMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@2f4ae5e1, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("WeakHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1d11ad78, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentHashMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@1c779b43, "Extra Value"): success
test InPlaceOpsCollisions.testReplaceOldValue("ConcurrentSkipListMap with colliding strings", MapWithCollisionsProviders$$Lambda/0x0000019201023890@58cb04ff, "Extra Value"): success

===============================================
java/util/Map/InPlaceOpsCollisions.java
Total tests run: 378, Passes: 378, Failures: 0, Skips: 0
===============================================

----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(38/3915)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
CLASSPATH='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/util/Map/InPlaceOpsCollisions.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map\\InPlaceOpsCollisions.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\Map\\InPlaceOpsCollisions.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\Map' \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=25 \\
        '-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        '-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp' \\
        -XX:+CreateCoredumpOnCrash \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        '-Djava.library.path=d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.map.collisions.shortrun=true \\
        com.sun.javatest.regtest.agent.MainWrapper 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\java\\util\\Map\\InPlaceOpsCollisions.d\\testng.0.jta' java/util/Map/InPlaceOpsCollisions.java false InPlaceOpsCollisions
result: Passed. Execution successful


test result: Passed. Execution successful
