#Test Results (version 2)
#Fri Mar 01 16:57:12 UTC 2024
#-----testdescription-----
$file=D\:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java
$root=D\:\\a\\openjdk\\openjdk\\test\\jdk
keywords=bug8266571 testng
modules=java.base/java.util\:open
run=USER_SPECIFIED build SimpleDeque SimpleList SimpleSortedSet\r\nUSER_SPECIFIED testng Basic\r\n
source=Basic.java
title=Basic tests for SequencedCollection

#-----environment-----

#-----testresult-----
description=file\:/D\:/a/openjdk/openjdk/test/jdk/java/util/SequencedCollection/Basic.java
elapsed=468 0\:00\:00.468
end=Fri Mar 01 16\:57\:12 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az1387-147.qlbpdebbqwpe3pov5lpj0n5fhf.dx.internal.cloudapp.net
javatestOS=Windows Server 2019 10.0 (amd64)
javatestVersion=6.0-ea+b24-2024-02-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/java.util\:open
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile build compile testng
start=Fri Mar 01 16\:57\:11 UTC 2024
test=java/util/SequencedCollection/Basic.java
testJDK=d\:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
testJDK_OS=[name\:Windows Server 2019,arch\:amd64,version\:10.0,family\:windows,simple_arch\:x64,simple_version\:10.0,processors\:4,maxMemory\:17179398144,maxSwap\:20266405888]
testJDK_os.arch=amd64
testJDK_os.name=Windows Server 2019
testJDK_os.version=10.0
totalTime=484
user.name=runneradmin
work=D\:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\java\\util\\SequencedCollection

#section:script_messages
----------messages:(4/317)*----------
JDK under test: d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-86f0ab9b59b661eea77a98be8a17942cdfcbf68b)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-86f0ab9b59b661eea77a98be8a17942cdfcbf68b, mixed mode, sharing)

#section:build
----------messages:(7/317)----------
command: build SimpleDeque SimpleList SimpleSortedSet
reason: User specified action: run build SimpleDeque SimpleList SimpleSortedSet 
started: Fri Mar 01 16:57:11 UTC 2024
Test directory:
  compile: SimpleDeque, SimpleList, SimpleSortedSet
finished: Fri Mar 01 16:57:11 UTC 2024
elapsed time (seconds): 0.047
result: Passed. Build successful

#section:compile
----------messages:(8/527)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleDeque.java D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleList.java D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleSortedSet.java
reason: .class file out of date or does not exist
started: Fri Mar 01 16:57:11 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 1
finished: Fri Mar 01 16:57:11 UTC 2024
elapsed time (seconds): 0.047
----------configuration:(14/979)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\patches\\java.base

javac compilation environment
  add modules: java.base
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(38/4081)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/SequencedCollection/Basic.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleDeque.java' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleList.java' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\SimpleSortedSet.java'
result: Passed. Compilation successful

#section:build
----------messages:(7/207)----------
command: build Basic
reason: Named class compiled on demand
started: Fri Mar 01 16:57:11 UTC 2024
Test directory:
  compile: Basic
finished: Fri Mar 01 16:57:11 UTC 2024
elapsed time (seconds): 0.126
result: Passed. Build successful

#section:compile
----------messages:(8/346)*----------
command: compile D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java
reason: .class file out of date or does not exist
started: Fri Mar 01 16:57:11 UTC 2024
Additional options from @modules: --add-modules java.base
Mode: agentvm
Agent id: 1
finished: Fri Mar 01 16:57:11 UTC 2024
elapsed time (seconds): 0.126
----------configuration:(14/979)*----------
Boot Layer (javac runtime environment)
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\patches\\java.base

javac compilation environment
  add modules: java.base
  source path: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
  class path:  D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection
               D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar
               D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar

----------rerun:(38/3896)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\javac' \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=25 \\
        -J'-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk' \\
        -J'-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp' \\
        -J-XX:+CreateCoredumpOnCrash \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -J-Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -J-Dtest.name=java/util/SequencedCollection/Basic.java \\
        -J-Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java' \\
        -J-Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -J-Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -J-Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -J-Dtest.modules=java.base/java.util:open \\
        --add-modules java.base \\
        -d 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -sourcepath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -classpath 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar' 'D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java'
----------direct:(2/176)*----------
Note: D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
result: Passed. Compilation successful

#section:testng
----------messages:(8/283)----------
command: testng Basic
reason: User specified action: run testng Basic 
started: Fri Mar 01 16:57:11 UTC 2024
Mode: agentvm
Agent id: 4
Additional opens to unnamed modules from @modules: java.base/java.util
finished: Fri Mar 01 16:57:12 UTC 2024
elapsed time (seconds): 0.295
----------configuration:(14/977)*----------
Boot Layer
  class path: D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\junit-platform-console-standalone-1.9.2.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar 
              D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar 
  patch:      java.base D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\patches\\java.base

Test Layer
  add opens:  java.base/java.util ALL-UNNAMED
  class path: D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d 
              D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection 

----------rerun:(29/3360)*----------
cd 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\scratch' && \\
PATH='C:\\hostedtoolcache\\windows\\msys2\\msys64\\usr\\bin;D:\\a\\_temp\\setup-msys2' \\
SystemDrive=C: \\
SystemRoot='C:\\Windows' \\
TEMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
TEST_IMAGE_DIR='d:\\a\\openjdk\\openjdk\\bundles\\tests' \\
TMP='C:\\Users\\RUNNER~1\\AppData\\Local\\Temp' \\
_NT_SYMBOL_PATH=' d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin;d:\\a\\openjdk\\openjdk\\bundles\\symbols\\jdk-23\\bin\\server' \\
windir='C:\\Windows' \\
    'd:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=25 -Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -XX:+CreateCoredumpOnCrash -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=25 -J-Dtest.boot.jdk=d:\\a\\openjdk\\openjdk\\bootjdk\\jdk -J-Djava.io.tmpdir=d:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\tmp -J-XX:+CreateCoredumpOnCrash -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dcompile.jdk='d:\\a\\openjdk\\openjdk\\bundles\\jdk\\jdk-23' \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath='d:\\a\\openjdk\\openjdk\\bundles\\tests\\jdk\\jtreg\\native' \\
        -Dtest.root='D:\\a\\openjdk\\openjdk\\test\\jdk' \\
        -Dtest.name=java/util/SequencedCollection/Basic.java \\
        -Dtest.file='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection\\Basic.java' \\
        -Dtest.src='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.src.path='D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.classes='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -Dtest.class.path='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d' \\
        -Dtest.class.path.prefix='D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection' \\
        -Dtest.modules=java.base/java.util:open \\
        -classpath 'D:\\a\\openjdk\\openjdk\\build\\run-test-prebuilt\\test-support\\jtreg_test_jdk_jdk_collections_core\\classes\\java\\util\\SequencedCollection\\Basic.d;D:\\a\\openjdk\\openjdk\\test\\jdk\\java\\util\\SequencedCollection;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\testng-7.3.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\guice-5.1.0.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jcommander-1.82.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\javatest.jar;D:\\a\\openjdk\\openjdk\\jtreg\\installed\\lib\\jtreg.jar' \\
        com.sun.javatest.regtest.agent.TestNGRunner java/util/SequencedCollection/Basic.java false Basic
----------System.out:(401/36255)----------
test Basic.testAddFirst("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("LinkedHashSet", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("SetFromMap", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("SimpleDeque", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirst("SimpleList", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("LinkedHashSet", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("SetFromMap", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("SimpleDeque", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddFirstRev("SimpleList", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("LinkedHashSet", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("SetFromMap", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("SimpleDeque", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddLast("SimpleList", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("LinkedHashSet", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("SetFromMap", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("SimpleDeque", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testAddLastRev("SimpleList", [x, a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testCheckedList("ChkList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testCheckedNavSet("ChkNav", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testCheckedSortedSet("ChkSorted", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("ArrayDeque", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("ArrayList", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("AsList", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("COWAL", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("LinkedHashSet", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("LinkedList", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("ListOf", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("SimpleDeque", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("SimpleList", [a, b, c, d, e, f, g]): success
test Basic.testDoubleReverse("SimpleSortedSet", [a, b, c, d, e, f, g]): success
test Basic.testEmptyGetFirst("ArrayDeque", [], []): success
test Basic.testEmptyGetFirst("ArrayList", [], []): success
test Basic.testEmptyGetFirst("AsList", [], []): success
test Basic.testEmptyGetFirst("COWAL", [], []): success
test Basic.testEmptyGetFirst("EmptyList", [], []): success
test Basic.testEmptyGetFirst("EmptyNavigableSet", [], []): success
test Basic.testEmptyGetFirst("EmptySortedSet", [], []): success
test Basic.testEmptyGetFirst("LinkedHashSet", [], []): success
test Basic.testEmptyGetFirst("LinkedList", [], []): success
test Basic.testEmptyGetFirst("ListOf", [], []): success
test Basic.testEmptyGetFirst("SetFromMap", [], []): success
test Basic.testEmptyGetFirst("SimpleDeque", [], []): success
test Basic.testEmptyGetFirst("SimpleList", [], []): success
test Basic.testEmptyGetFirst("SimpleSortedSet", [], []): success
test Basic.testEmptyGetFirst("TreeSet", [], []): success
test Basic.testEmptyGetFirst("UnmodColl", [], []): success
test Basic.testEmptyGetFirst("UnmodSet", [], []): success
test Basic.testEmptyGetLast("ArrayDeque", [], []): success
test Basic.testEmptyGetLast("ArrayList", [], []): success
test Basic.testEmptyGetLast("AsList", [], []): success
test Basic.testEmptyGetLast("COWAL", [], []): success
test Basic.testEmptyGetLast("EmptyList", [], []): success
test Basic.testEmptyGetLast("EmptyNavigableSet", [], []): success
test Basic.testEmptyGetLast("EmptySortedSet", [], []): success
test Basic.testEmptyGetLast("LinkedHashSet", [], []): success
test Basic.testEmptyGetLast("LinkedList", [], []): success
test Basic.testEmptyGetLast("ListOf", [], []): success
test Basic.testEmptyGetLast("SetFromMap", [], []): success
test Basic.testEmptyGetLast("SimpleDeque", [], []): success
test Basic.testEmptyGetLast("SimpleList", [], []): success
test Basic.testEmptyGetLast("SimpleSortedSet", [], []): success
test Basic.testEmptyGetLast("TreeSet", [], []): success
test Basic.testEmptyGetLast("UnmodColl", [], []): success
test Basic.testEmptyGetLast("UnmodSet", [], []): success
test Basic.testEmptyRemoveFirst("ArrayDeque", [], []): success
test Basic.testEmptyRemoveFirst("ArrayList", [], []): success
test Basic.testEmptyRemoveFirst("COWAL", [], []): success
test Basic.testEmptyRemoveFirst("LinkedHashSet", [], []): success
test Basic.testEmptyRemoveFirst("LinkedList", [], []): success
test Basic.testEmptyRemoveFirst("SetFromMap", [], []): success
test Basic.testEmptyRemoveFirst("SimpleDeque", [], []): success
test Basic.testEmptyRemoveFirst("SimpleList", [], []): success
test Basic.testEmptyRemoveFirst("SimpleSortedSet", [], []): success
test Basic.testEmptyRemoveFirst("TreeSet", [], []): success
test Basic.testEmptyRemoveLast("ArrayDeque", [], []): success
test Basic.testEmptyRemoveLast("ArrayList", [], []): success
test Basic.testEmptyRemoveLast("COWAL", [], []): success
test Basic.testEmptyRemoveLast("LinkedHashSet", [], []): success
test Basic.testEmptyRemoveLast("LinkedList", [], []): success
test Basic.testEmptyRemoveLast("SetFromMap", [], []): success
test Basic.testEmptyRemoveLast("SimpleDeque", [], []): success
test Basic.testEmptyRemoveLast("SimpleList", [], []): success
test Basic.testEmptyRemoveLast("SimpleSortedSet", [], []): success
test Basic.testEmptyRemoveLast("TreeSet", [], []): success
test Basic.testFundamentals("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("AsList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("LinkedHashSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("ListOf", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("SetFromMap", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("SimpleDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("SimpleList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("SimpleSortedSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("UnmodColl", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("UnmodSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testFundamentals("ArrayDeque", [], []): success
test Basic.testFundamentals("ArrayList", [], []): success
test Basic.testFundamentals("AsList", [], []): success
test Basic.testFundamentals("COWAL", [], []): success
test Basic.testFundamentals("EmptyList", [], []): success
test Basic.testFundamentals("EmptyNavigableSet", [], []): success
test Basic.testFundamentals("EmptySortedSet", [], []): success
test Basic.testFundamentals("LinkedHashSet", [], []): success
test Basic.testFundamentals("LinkedList", [], []): success
test Basic.testFundamentals("ListOf", [], []): success
test Basic.testFundamentals("SetFromMap", [], []): success
test Basic.testFundamentals("SimpleDeque", [], []): success
test Basic.testFundamentals("SimpleList", [], []): success
test Basic.testFundamentals("SimpleSortedSet", [], []): success
test Basic.testFundamentals("TreeSet", [], []): success
test Basic.testFundamentals("UnmodColl", [], []): success
test Basic.testFundamentals("UnmodSet", [], []): success
test Basic.testGetFirst("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("AsList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("LinkedHashSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("ListOf", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("SetFromMap", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("SimpleDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("SimpleList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("SimpleSortedSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("UnmodColl", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetFirst("UnmodSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("AsList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("LinkedHashSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("ListOf", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("SetFromMap", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("SimpleDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("SimpleList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("SimpleSortedSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("UnmodColl", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testGetLast("UnmodSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("ArrayList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("LinkedList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("SimpleList", false, [a, b, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("ArrayList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("LinkedList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorAdd("SimpleList", true, [a, b, c, d, e, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("ArrayList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("LinkedList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("SimpleList", false, [a, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("ArrayList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("LinkedList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorRemove("SimpleList", true, [a, b, c, d, e, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("ArrayList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("LinkedList", false, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("SimpleList", false, [a, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("ArrayList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("LinkedList", true, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testListIteratorSet("SimpleList", true, [a, b, c, d, e, x, g], [a, b, c, d, e, f, g]): success
test Basic.testNotSerializable("ArrayDeque", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("ArrayList", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("AsList", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("COWAL", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("LinkedHashSet", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("LinkedList", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("ListOf", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("SetFromMap", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("UnmodColl", [g, f, e, d, c, b, a]): success
test Basic.testNotSerializable("UnmodSet", [g, f, e, d, c, b, a]): success
test Basic.testRemoveFirst("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("LinkedHashSet", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("SetFromMap", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("SimpleDeque", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("SimpleList", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("SimpleSortedSet", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirst("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("LinkedHashSet", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("SetFromMap", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("SimpleDeque", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("SimpleList", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("SimpleSortedSet", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveFirstRev("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("LinkedHashSet", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("SetFromMap", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("SimpleDeque", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("SimpleList", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("SimpleSortedSet", [a, b, c, d, e, f], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLast("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("LinkedHashSet", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("SetFromMap", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("SimpleDeque", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("SimpleList", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("SimpleSortedSet", [b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testRemoveLastRev("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("ArrayDeque", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("ArrayList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("AsList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("COWAL", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("LinkedHashSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("LinkedList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("ListOf", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("SetFromMap", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("TreeSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("UnmodColl", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSerializable("UnmodSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("SimpleList", 0, [a, b, x, y, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("SimpleList", 1, [a, b, c, d, e, y, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("SimpleList", 2, [a, b, c, d, e, y, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllFirst("SimpleList", 3, [a, b, x, y, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("SimpleList", 0, [a, b, c, d, e, x, y, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("SimpleList", 1, [a, b, y, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("SimpleList", 2, [a, b, y, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddAllLast("SimpleList", 3, [a, b, c, d, e, x, y, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("SimpleList", 0, [a, b, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("SimpleList", 1, [a, b, c, d, e, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("SimpleList", 2, [a, b, c, d, e, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddFirst("SimpleList", 3, [a, b, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("SimpleList", 0, [a, b, c, d, e, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("SimpleList", 1, [a, b, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("SimpleList", 2, [a, b, x, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListAddLast("SimpleList", 3, [a, b, c, d, e, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("SimpleList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("SimpleList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("SimpleList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListGet("SimpleList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("SimpleList", 0, [a, b, c, x, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("SimpleList", 1, [a, b, c, d, x, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("SimpleList", 2, [a, b, c, d, x, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorAdd("SimpleList", 3, [a, b, c, x, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("SimpleList", 0, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("SimpleList", 1, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("SimpleList", 2, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorRemove("SimpleList", 3, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("SimpleList", 0, [a, b, x, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("SimpleList", 1, [a, b, c, d, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("SimpleList", 2, [a, b, c, d, x, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListIteratorSet("SimpleList", 3, [a, b, x, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("SimpleList", 0, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("SimpleList", 1, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("SimpleList", 2, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveFirst("SimpleList", 3, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("ArrayList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("COWAL", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("LinkedList", 0, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("SimpleList", 0, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("ArrayList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("COWAL", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("LinkedList", 1, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("SimpleList", 1, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("ArrayList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("COWAL", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("LinkedList", 2, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("SimpleList", 2, [a, b, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("ArrayList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("COWAL", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("LinkedList", 3, [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testSubListRemoveLast("SimpleList", 3, [a, b, c, d, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("ListOf", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("ListOfSub", [b, c], [b, c]): success
test Basic.testUnmodifiable("SingleList", [a], [a]): success
test Basic.testUnmodifiable("UnmodColl", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("UnmodList", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("UnmodNav", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("UnmodSet", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnmodifiable("UnmodSorted", [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]): success
test Basic.testUnpositionedAdd("LinkedHashSet", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success
test Basic.testUnpositionedAddRev("LinkedHashSet", [a, b, c, d, e, f, g, x], [a, b, c, d, e, f, g]): success

===============================================
java/util/SequencedCollection/Basic.java
Total tests run: 395, Passes: 395, Failures: 0, Skips: 0
===============================================

----------System.err:(3/38)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
