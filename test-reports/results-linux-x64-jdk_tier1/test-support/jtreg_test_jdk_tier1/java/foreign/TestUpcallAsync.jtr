#Test Results (version 2)
#Mon Apr 29 00:37:53 UTC 2024
#-----testdescription-----
$file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java
$root=/home/runner/work/openjdk/openjdk/test/jdk
keywords=othervm testng
modules=java.base/jdk.internal.foreign
requires=\!vm.musl
run=USER_SPECIFIED build NativeTestHelper CallGeneratorHelper TestUpcallBase\nUSER_SPECIFIED testng/othervm -XX\:+IgnoreUnrecognizedVMOptions -XX\:-VerifyDependencies --enable-native-access\=ALL-UNNAMED -Dgenerator.sample.factor\=17 TestUpcallAsync\n
source=TestUpcallAsync.java
title=\ 

#-----environment-----

#-----testresult-----
description=file\:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java
elapsed=5127 0\:00\:05.127
end=Mon Apr 29 00\:37\:53 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az1055-577.mrg2vkl14epehdn0xjtgmxanmg.phxx.internal.cloudapp.net
javatestOS=Linux 6.5.0-1018-azure (amd64)
javatestVersion=6.0-ea+b24-2024-04-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/jdk.internal.foreign
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile build compile testng
start=Mon Apr 29 00\:37\:48 UTC 2024
test=java/foreign/TestUpcallAsync.java
testJDK=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
testJDK_OS=[name\:Linux,arch\:amd64,version\:6.5.0-1018-azure,family\:linux,simple_arch\:x64,simple_version\:6.5,processors\:4,maxMemory\:16757346304,maxSwap\:4294963200]
testJDK_os.arch=amd64
testJDK_os.name=Linux
testJDK_os.version=6.5.0-1018-azure
totalTime=5128
user.name=runner
work=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/foreign

#section:script_messages
----------messages:(4/322)----------
JDK under test: /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/349)----------
command: build NativeTestHelper CallGeneratorHelper TestUpcallBase
reason: User specified action: run build NativeTestHelper CallGeneratorHelper TestUpcallBase 
started: Mon Apr 29 00:37:48 UTC 2024
Test directory:
  compile: NativeTestHelper, CallGeneratorHelper, TestUpcallBase
finished: Mon Apr 29 00:37:48 UTC 2024
elapsed time (seconds): 0.282
result: Passed. Build successful

#section:compile
----------messages:(8/550)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/NativeTestHelper.java /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/CallGeneratorHelper.java /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallBase.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:48 UTC 2024
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
Mode: agentvm
Agent id: 2
finished: Mon Apr 29 00:37:48 UTC 2024
elapsed time (seconds): 0.282
----------configuration:(15/1027)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

javac compilation environment
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 

----------rerun:(38/3666)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/foreign/TestUpcallAsync.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.modules=java.base/jdk.internal.foreign \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/NativeTestHelper.java /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/CallGeneratorHelper.java /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallBase.java
result: Passed. Compilation successful

#section:build
----------messages:(7/220)----------
command: build TestUpcallAsync
reason: Named class compiled on demand
started: Mon Apr 29 00:37:48 UTC 2024
Test directory:
  compile: TestUpcallAsync
finished: Mon Apr 29 00:37:49 UTC 2024
elapsed time (seconds): 0.051
result: Passed. Build successful

#section:compile
----------messages:(8/392)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:48 UTC 2024
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
Mode: agentvm
Agent id: 2
finished: Mon Apr 29 00:37:49 UTC 2024
elapsed time (seconds): 0.051
----------configuration:(15/1027)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

javac compilation environment
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 

----------rerun:(38/3508)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/foreign/TestUpcallAsync.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.modules=java.base/jdk.internal.foreign \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java
result: Passed. Compilation successful

#section:testng
----------messages:(7/598)----------
command: testng -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17 TestUpcallAsync
reason: User specified action: run testng/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17 TestUpcallAsync 
started: Mon Apr 29 00:37:49 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
finished: Mon Apr 29 00:37:53 UTC 2024
elapsed time (seconds): 4.793
----------configuration:(4/117)----------
Boot Layer
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED

----------System.out:(720/87099)----------
NativeTestHelper::DEFAULT_RANDOM.seed = 804198758
Re-run with '-DNativeTestHelper.DEFAULT_RANDOM.seed=804198758' to reproduce
test TestUpcallAsync.testUpcallsAsync(0, "f0_V__", VOID, [], []): success
test TestUpcallAsync.testUpcallsAsync(17, "f0_V_S_DI", VOID, [STRUCT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(34, "f0_V_S_IDF", VOID, [STRUCT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(51, "f0_V_S_FDD", VOID, [STRUCT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(68, "f0_V_S_DDP", VOID, [STRUCT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(85, "f0_V_S_PPI", VOID, [STRUCT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(102, "f0_V_IS_FF", VOID, [INT, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(119, "f0_V_IS_IFD", VOID, [INT, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(136, "f0_V_IS_FFP", VOID, [INT, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(153, "f0_V_IS_DDI", VOID, [INT, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(170, "f0_V_IS_PDF", VOID, [INT, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(187, "f0_V_FS_ID", VOID, [FLOAT, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(204, "f0_V_FS_IIP", VOID, [FLOAT, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(221, "f0_V_FS_FFI", VOID, [FLOAT, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(238, "f0_V_FS_DFF", VOID, [FLOAT, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(255, "f0_V_FS_PFD", VOID, [FLOAT, STRUCT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(272, "f0_V_DS_P", VOID, [DOUBLE, STRUCT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(289, "f0_V_DS_III", VOID, [DOUBLE, STRUCT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(306, "f0_V_DS_FIF", VOID, [DOUBLE, STRUCT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(323, "f0_V_DS_DID", VOID, [DOUBLE, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(340, "f0_V_DS_PIP", VOID, [DOUBLE, STRUCT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(357, "f0_V_PS_I", VOID, [POINTER, STRUCT], [INT]): success
test TestUpcallAsync.testUpcallsAsync(374, "f0_V_PS_PF", VOID, [POINTER, STRUCT], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(391, "f0_V_PS_IPD", VOID, [POINTER, STRUCT], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(408, "f0_V_PS_FPP", VOID, [POINTER, STRUCT], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(425, "f0_V_PS_PII", VOID, [POINTER, STRUCT], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(442, "f0_V_SI_F", VOID, [STRUCT, INT], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(459, "f0_V_SI_PD", VOID, [STRUCT, INT], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(476, "f0_V_SI_IPP", VOID, [STRUCT, INT], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(493, "f0_V_SI_DII", VOID, [STRUCT, INT], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(510, "f0_V_SI_PIF", VOID, [STRUCT, INT], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(527, "f0_V_SF_D", VOID, [STRUCT, FLOAT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(544, "f0_V_SF_PP", VOID, [STRUCT, FLOAT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(561, "f0_V_SF_FII", VOID, [STRUCT, FLOAT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(578, "f0_V_SF_DIF", VOID, [STRUCT, FLOAT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(595, "f0_V_SF_PID", VOID, [STRUCT, FLOAT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(612, "f1_V_SD_P", VOID, [STRUCT, DOUBLE], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(629, "f1_V_SD_III", VOID, [STRUCT, DOUBLE], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(646, "f1_V_SD_FIF", VOID, [STRUCT, DOUBLE], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(663, "f1_V_SD_DID", VOID, [STRUCT, DOUBLE], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(680, "f1_V_SD_PIP", VOID, [STRUCT, DOUBLE], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(697, "f1_V_SP_II", VOID, [STRUCT, POINTER], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(714, "f1_V_SP_IIF", VOID, [STRUCT, POINTER], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(731, "f1_V_SP_FID", VOID, [STRUCT, POINTER], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(748, "f1_V_SP_DIP", VOID, [STRUCT, POINTER], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(765, "f1_V_SP_PFI", VOID, [STRUCT, POINTER], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(782, "f1_V_SS_IF", VOID, [STRUCT, STRUCT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(799, "f1_V_SS_IID", VOID, [STRUCT, STRUCT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(816, "f1_V_SS_FIP", VOID, [STRUCT, STRUCT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(833, "f1_V_SS_DFI", VOID, [STRUCT, STRUCT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(850, "f1_V_SS_PFF", VOID, [STRUCT, STRUCT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(867, "f1_V_IIS_D", VOID, [INT, INT, STRUCT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(884, "f1_V_IIS_PP", VOID, [INT, INT, STRUCT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(901, "f1_V_IIS_FII", VOID, [INT, INT, STRUCT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(918, "f1_V_IIS_DIF", VOID, [INT, INT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(935, "f1_V_IIS_PID", VOID, [INT, INT, STRUCT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(952, "f1_V_IFP_", VOID, [INT, FLOAT, POINTER], []): success
test TestUpcallAsync.testUpcallsAsync(969, "f1_V_IFS_PI", VOID, [INT, FLOAT, STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(986, "f1_V_IFS_IPF", VOID, [INT, FLOAT, STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1003, "f1_V_IFS_FPD", VOID, [INT, FLOAT, STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1020, "f1_V_IFS_DPP", VOID, [INT, FLOAT, STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1037, "f1_V_IDI_", VOID, [INT, DOUBLE, INT], []): success
test TestUpcallAsync.testUpcallsAsync(1054, "f1_V_IDS_DF", VOID, [INT, DOUBLE, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1071, "f1_V_IDS_IDD", VOID, [INT, DOUBLE, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1088, "f1_V_IDS_FDP", VOID, [INT, DOUBLE, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1105, "f1_V_IDS_DPI", VOID, [INT, DOUBLE, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1122, "f1_V_IDS_PPF", VOID, [INT, DOUBLE, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1139, "f1_V_IPS_FD", VOID, [INT, POINTER, STRUCT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1156, "f1_V_IPS_IFP", VOID, [INT, POINTER, STRUCT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1173, "f1_V_IPS_FDI", VOID, [INT, POINTER, STRUCT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(1190, "f1_V_IPS_DDF", VOID, [INT, POINTER, STRUCT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1207, "f2_V_IPS_PDD", VOID, [INT, POINTER, STRUCT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1224, "f2_V_ISI_FP", VOID, [INT, STRUCT, INT], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1241, "f2_V_ISI_IDI", VOID, [INT, STRUCT, INT], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(1258, "f2_V_ISI_FDF", VOID, [INT, STRUCT, INT], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1275, "f2_V_ISI_DDD", VOID, [INT, STRUCT, INT], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1292, "f2_V_ISI_PDP", VOID, [INT, STRUCT, INT], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1309, "f2_V_ISF_DI", VOID, [INT, STRUCT, FLOAT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(1326, "f2_V_ISF_IDF", VOID, [INT, STRUCT, FLOAT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1343, "f2_V_ISF_FDD", VOID, [INT, STRUCT, FLOAT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1360, "f2_V_ISF_DDP", VOID, [INT, STRUCT, FLOAT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1377, "f2_V_ISF_PPI", VOID, [INT, STRUCT, FLOAT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1394, "f2_V_ISD_DF", VOID, [INT, STRUCT, DOUBLE], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1411, "f2_V_ISD_IDD", VOID, [INT, STRUCT, DOUBLE], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1428, "f2_V_ISD_FDP", VOID, [INT, STRUCT, DOUBLE], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1445, "f2_V_ISD_DPI", VOID, [INT, STRUCT, DOUBLE], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1462, "f2_V_ISD_PPF", VOID, [INT, STRUCT, DOUBLE], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1479, "f2_V_ISP_DD", VOID, [INT, STRUCT, POINTER], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1496, "f2_V_ISP_IDP", VOID, [INT, STRUCT, POINTER], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1513, "f2_V_ISP_FPI", VOID, [INT, STRUCT, POINTER], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1530, "f2_V_ISP_DPF", VOID, [INT, STRUCT, POINTER], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1547, "f2_V_ISP_PPD", VOID, [INT, STRUCT, POINTER], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1564, "f2_V_ISS_DP", VOID, [INT, STRUCT, STRUCT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1581, "f2_V_ISS_IPI", VOID, [INT, STRUCT, STRUCT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1598, "f2_V_ISS_FPF", VOID, [INT, STRUCT, STRUCT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1615, "f2_V_ISS_DPD", VOID, [INT, STRUCT, STRUCT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1632, "f2_V_ISS_PPP", VOID, [INT, STRUCT, STRUCT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1649, "f2_V_FIS_DI", VOID, [FLOAT, INT, STRUCT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(1666, "f2_V_FIS_IDF", VOID, [FLOAT, INT, STRUCT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1683, "f2_V_FIS_FDD", VOID, [FLOAT, INT, STRUCT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1700, "f2_V_FIS_DDP", VOID, [FLOAT, INT, STRUCT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1717, "f2_V_FIS_PPI", VOID, [FLOAT, INT, STRUCT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(1734, "f2_V_FFS_FF", VOID, [FLOAT, FLOAT, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1751, "f2_V_FFS_IFD", VOID, [FLOAT, FLOAT, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1768, "f2_V_FFS_FFP", VOID, [FLOAT, FLOAT, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1785, "f2_V_FFS_DDI", VOID, [FLOAT, FLOAT, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(1802, "f3_V_FFS_PDF", VOID, [FLOAT, FLOAT, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1819, "f3_V_FDS_ID", VOID, [FLOAT, DOUBLE, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1836, "f3_V_FDS_IIP", VOID, [FLOAT, DOUBLE, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1853, "f3_V_FDS_FFI", VOID, [FLOAT, DOUBLE, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(1870, "f3_V_FDS_DFF", VOID, [FLOAT, DOUBLE, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1887, "f3_V_FDS_PFD", VOID, [FLOAT, DOUBLE, STRUCT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1904, "f3_V_FPS_P", VOID, [FLOAT, POINTER, STRUCT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1921, "f3_V_FPS_III", VOID, [FLOAT, POINTER, STRUCT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(1938, "f3_V_FPS_FIF", VOID, [FLOAT, POINTER, STRUCT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(1955, "f3_V_FPS_DID", VOID, [FLOAT, POINTER, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(1972, "f3_V_FPS_PIP", VOID, [FLOAT, POINTER, STRUCT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(1989, "f3_V_FSI_II", VOID, [FLOAT, STRUCT, INT], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2006, "f3_V_FSI_IIF", VOID, [FLOAT, STRUCT, INT], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2023, "f3_V_FSI_FID", VOID, [FLOAT, STRUCT, INT], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2040, "f3_V_FSI_DIP", VOID, [FLOAT, STRUCT, INT], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2057, "f3_V_FSI_PFI", VOID, [FLOAT, STRUCT, INT], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2074, "f3_V_FSF_IF", VOID, [FLOAT, STRUCT, FLOAT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2091, "f3_V_FSF_IID", VOID, [FLOAT, STRUCT, FLOAT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2108, "f3_V_FSF_FIP", VOID, [FLOAT, STRUCT, FLOAT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2125, "f3_V_FSF_DFI", VOID, [FLOAT, STRUCT, FLOAT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2142, "f3_V_FSF_PFF", VOID, [FLOAT, STRUCT, FLOAT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2159, "f3_V_FSD_ID", VOID, [FLOAT, STRUCT, DOUBLE], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2176, "f3_V_FSD_IIP", VOID, [FLOAT, STRUCT, DOUBLE], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2193, "f3_V_FSD_FFI", VOID, [FLOAT, STRUCT, DOUBLE], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2210, "f3_V_FSD_DFF", VOID, [FLOAT, STRUCT, DOUBLE], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2227, "f3_V_FSD_PFD", VOID, [FLOAT, STRUCT, DOUBLE], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2244, "f3_V_FSP_IP", VOID, [FLOAT, STRUCT, POINTER], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2261, "f3_V_FSP_IFI", VOID, [FLOAT, STRUCT, POINTER], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2278, "f3_V_FSP_FFF", VOID, [FLOAT, STRUCT, POINTER], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2295, "f3_V_FSP_DFD", VOID, [FLOAT, STRUCT, POINTER], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2312, "f3_V_FSP_PFP", VOID, [FLOAT, STRUCT, POINTER], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2329, "f3_V_FSS_FI", VOID, [FLOAT, STRUCT, STRUCT], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2346, "f3_V_FSS_IFF", VOID, [FLOAT, STRUCT, STRUCT], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2363, "f3_V_FSS_FFD", VOID, [FLOAT, STRUCT, STRUCT], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2380, "f3_V_FSS_DFP", VOID, [FLOAT, STRUCT, STRUCT], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2397, "f3_V_FSS_PDI", VOID, [FLOAT, STRUCT, STRUCT], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(2414, "f4_V_DIS_IF", VOID, [DOUBLE, INT, STRUCT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2431, "f4_V_DIS_IID", VOID, [DOUBLE, INT, STRUCT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2448, "f4_V_DIS_FIP", VOID, [DOUBLE, INT, STRUCT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2465, "f4_V_DIS_DFI", VOID, [DOUBLE, INT, STRUCT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2482, "f4_V_DIS_PFF", VOID, [DOUBLE, INT, STRUCT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2499, "f4_V_DFS_D", VOID, [DOUBLE, FLOAT, STRUCT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2516, "f4_V_DFS_PP", VOID, [DOUBLE, FLOAT, STRUCT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2533, "f4_V_DFS_FII", VOID, [DOUBLE, FLOAT, STRUCT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(2550, "f4_V_DFS_DIF", VOID, [DOUBLE, FLOAT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2567, "f4_V_DFS_PID", VOID, [DOUBLE, FLOAT, STRUCT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2584, "f4_V_DDP_", VOID, [DOUBLE, DOUBLE, POINTER], []): success
test TestUpcallAsync.testUpcallsAsync(2601, "f4_V_DDS_PI", VOID, [DOUBLE, DOUBLE, STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(2618, "f4_V_DDS_IPF", VOID, [DOUBLE, DOUBLE, STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2635, "f4_V_DDS_FPD", VOID, [DOUBLE, DOUBLE, STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2652, "f4_V_DDS_DPP", VOID, [DOUBLE, DOUBLE, STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2669, "f4_V_DPI_", VOID, [DOUBLE, POINTER, INT], []): success
test TestUpcallAsync.testUpcallsAsync(2686, "f4_V_DPS_DF", VOID, [DOUBLE, POINTER, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2703, "f4_V_DPS_IDD", VOID, [DOUBLE, POINTER, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2720, "f4_V_DPS_FDP", VOID, [DOUBLE, POINTER, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2737, "f4_V_DPS_DPI", VOID, [DOUBLE, POINTER, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(2754, "f4_V_DPS_PPF", VOID, [DOUBLE, POINTER, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2771, "f4_V_DSI_DD", VOID, [DOUBLE, STRUCT, INT], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2788, "f4_V_DSI_IDP", VOID, [DOUBLE, STRUCT, INT], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2805, "f4_V_DSI_FPI", VOID, [DOUBLE, STRUCT, INT], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(2822, "f4_V_DSI_DPF", VOID, [DOUBLE, STRUCT, INT], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2839, "f4_V_DSI_PPD", VOID, [DOUBLE, STRUCT, INT], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2856, "f4_V_DSF_DP", VOID, [DOUBLE, STRUCT, FLOAT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2873, "f4_V_DSF_IPI", VOID, [DOUBLE, STRUCT, FLOAT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(2890, "f4_V_DSF_FPF", VOID, [DOUBLE, STRUCT, FLOAT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2907, "f4_V_DSF_DPD", VOID, [DOUBLE, STRUCT, FLOAT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2924, "f4_V_DSF_PPP", VOID, [DOUBLE, STRUCT, FLOAT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(2941, "f4_V_DSD_PI", VOID, [DOUBLE, STRUCT, DOUBLE], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(2958, "f4_V_DSD_IPF", VOID, [DOUBLE, STRUCT, DOUBLE], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(2975, "f4_V_DSD_FPD", VOID, [DOUBLE, STRUCT, DOUBLE], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(2992, "f4_V_DSD_DPP", VOID, [DOUBLE, STRUCT, DOUBLE], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3009, "f5_V_DSP_I", VOID, [DOUBLE, STRUCT, POINTER], [INT]): success
test TestUpcallAsync.testUpcallsAsync(3026, "f5_V_DSP_PF", VOID, [DOUBLE, STRUCT, POINTER], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3043, "f5_V_DSP_IPD", VOID, [DOUBLE, STRUCT, POINTER], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3060, "f5_V_DSP_FPP", VOID, [DOUBLE, STRUCT, POINTER], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3077, "f5_V_DSP_PII", VOID, [DOUBLE, STRUCT, POINTER], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(3094, "f5_V_DSS_F", VOID, [DOUBLE, STRUCT, STRUCT], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3111, "f5_V_DSS_PD", VOID, [DOUBLE, STRUCT, STRUCT], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3128, "f5_V_DSS_IPP", VOID, [DOUBLE, STRUCT, STRUCT], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3145, "f5_V_DSS_DII", VOID, [DOUBLE, STRUCT, STRUCT], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(3162, "f5_V_DSS_PIF", VOID, [DOUBLE, STRUCT, STRUCT], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3179, "f5_V_PID_", VOID, [POINTER, INT, DOUBLE], []): success
test TestUpcallAsync.testUpcallsAsync(3196, "f5_V_PIS_DP", VOID, [POINTER, INT, STRUCT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3213, "f5_V_PIS_IPI", VOID, [POINTER, INT, STRUCT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(3230, "f5_V_PIS_FPF", VOID, [POINTER, INT, STRUCT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3247, "f5_V_PIS_DPD", VOID, [POINTER, INT, STRUCT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3264, "f5_V_PIS_PPP", VOID, [POINTER, INT, STRUCT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3281, "f5_V_PFS_DI", VOID, [POINTER, FLOAT, STRUCT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3298, "f5_V_PFS_IDF", VOID, [POINTER, FLOAT, STRUCT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3315, "f5_V_PFS_FDD", VOID, [POINTER, FLOAT, STRUCT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3332, "f5_V_PFS_DDP", VOID, [POINTER, FLOAT, STRUCT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3349, "f5_V_PFS_PPI", VOID, [POINTER, FLOAT, STRUCT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(3366, "f5_V_PDS_FF", VOID, [POINTER, DOUBLE, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3383, "f5_V_PDS_IFD", VOID, [POINTER, DOUBLE, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3400, "f5_V_PDS_FFP", VOID, [POINTER, DOUBLE, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3417, "f5_V_PDS_DDI", VOID, [POINTER, DOUBLE, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3434, "f5_V_PDS_PDF", VOID, [POINTER, DOUBLE, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3451, "f5_V_PPS_ID", VOID, [POINTER, POINTER, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3468, "f5_V_PPS_IIP", VOID, [POINTER, POINTER, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3485, "f5_V_PPS_FFI", VOID, [POINTER, POINTER, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(3502, "f5_V_PPS_DFF", VOID, [POINTER, POINTER, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3519, "f5_V_PPS_PFD", VOID, [POINTER, POINTER, STRUCT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3536, "f5_V_PSI_IP", VOID, [POINTER, STRUCT, INT], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3553, "f5_V_PSI_IFI", VOID, [POINTER, STRUCT, INT], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(3570, "f5_V_PSI_FFF", VOID, [POINTER, STRUCT, INT], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3587, "f5_V_PSI_DFD", VOID, [POINTER, STRUCT, INT], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3604, "f6_V_PSI_PFP", VOID, [POINTER, STRUCT, INT], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3621, "f6_V_PSF_FI", VOID, [POINTER, STRUCT, FLOAT], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(3638, "f6_V_PSF_IFF", VOID, [POINTER, STRUCT, FLOAT], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3655, "f6_V_PSF_FFD", VOID, [POINTER, STRUCT, FLOAT], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3672, "f6_V_PSF_DFP", VOID, [POINTER, STRUCT, FLOAT], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3689, "f6_V_PSF_PDI", VOID, [POINTER, STRUCT, FLOAT], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3706, "f6_V_PSD_FF", VOID, [POINTER, STRUCT, DOUBLE], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3723, "f6_V_PSD_IFD", VOID, [POINTER, STRUCT, DOUBLE], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3740, "f6_V_PSD_FFP", VOID, [POINTER, STRUCT, DOUBLE], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3757, "f6_V_PSD_DDI", VOID, [POINTER, STRUCT, DOUBLE], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3774, "f6_V_PSD_PDF", VOID, [POINTER, STRUCT, DOUBLE], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3791, "f6_V_PSP_FD", VOID, [POINTER, STRUCT, POINTER], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3808, "f6_V_PSP_IFP", VOID, [POINTER, STRUCT, POINTER], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3825, "f6_V_PSP_FDI", VOID, [POINTER, STRUCT, POINTER], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3842, "f6_V_PSP_DDF", VOID, [POINTER, STRUCT, POINTER], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3859, "f6_V_PSP_PDD", VOID, [POINTER, STRUCT, POINTER], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3876, "f6_V_PSS_FP", VOID, [POINTER, STRUCT, STRUCT], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3893, "f6_V_PSS_IDI", VOID, [POINTER, STRUCT, STRUCT], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3910, "f6_V_PSS_FDF", VOID, [POINTER, STRUCT, STRUCT], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3927, "f6_V_PSS_DDD", VOID, [POINTER, STRUCT, STRUCT], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(3944, "f6_V_PSS_PDP", VOID, [POINTER, STRUCT, STRUCT], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(3961, "f6_V_SII_DI", VOID, [STRUCT, INT, INT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(3978, "f6_V_SII_IDF", VOID, [STRUCT, INT, INT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(3995, "f6_V_SII_FDD", VOID, [STRUCT, INT, INT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4012, "f6_V_SII_DDP", VOID, [STRUCT, INT, INT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4029, "f6_V_SII_PPI", VOID, [STRUCT, INT, INT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(4046, "f6_V_SIF_DF", VOID, [STRUCT, INT, FLOAT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4063, "f6_V_SIF_IDD", VOID, [STRUCT, INT, FLOAT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4080, "f6_V_SIF_FDP", VOID, [STRUCT, INT, FLOAT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4097, "f6_V_SIF_DPI", VOID, [STRUCT, INT, FLOAT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(4114, "f6_V_SIF_PPF", VOID, [STRUCT, INT, FLOAT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4131, "f6_V_SID_DD", VOID, [STRUCT, INT, DOUBLE], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4148, "f6_V_SID_IDP", VOID, [STRUCT, INT, DOUBLE], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4165, "f6_V_SID_FPI", VOID, [STRUCT, INT, DOUBLE], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(4182, "f6_V_SID_DPF", VOID, [STRUCT, INT, DOUBLE], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4199, "f6_V_SID_PPD", VOID, [STRUCT, INT, DOUBLE], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4216, "f7_V_SIP_DP", VOID, [STRUCT, INT, POINTER], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4233, "f7_V_SIP_IPI", VOID, [STRUCT, INT, POINTER], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(4250, "f7_V_SIP_FPF", VOID, [STRUCT, INT, POINTER], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4267, "f7_V_SIP_DPD", VOID, [STRUCT, INT, POINTER], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4284, "f7_V_SIP_PPP", VOID, [STRUCT, INT, POINTER], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4301, "f7_V_SIS_PI", VOID, [STRUCT, INT, STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(4318, "f7_V_SIS_IPF", VOID, [STRUCT, INT, STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4335, "f7_V_SIS_FPD", VOID, [STRUCT, INT, STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4352, "f7_V_SIS_DPP", VOID, [STRUCT, INT, STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4369, "f7_V_SFI_I", VOID, [STRUCT, FLOAT, INT], [INT]): success
test TestUpcallAsync.testUpcallsAsync(4386, "f7_V_SFI_PF", VOID, [STRUCT, FLOAT, INT], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4403, "f7_V_SFI_IPD", VOID, [STRUCT, FLOAT, INT], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4420, "f7_V_SFI_FPP", VOID, [STRUCT, FLOAT, INT], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4437, "f7_V_SFI_PII", VOID, [STRUCT, FLOAT, INT], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4454, "f7_V_SFF_F", VOID, [STRUCT, FLOAT, FLOAT], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4471, "f7_V_SFF_PD", VOID, [STRUCT, FLOAT, FLOAT], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4488, "f7_V_SFF_IPP", VOID, [STRUCT, FLOAT, FLOAT], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4505, "f7_V_SFF_DII", VOID, [STRUCT, FLOAT, FLOAT], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4522, "f7_V_SFF_PIF", VOID, [STRUCT, FLOAT, FLOAT], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4539, "f7_V_SFD_D", VOID, [STRUCT, FLOAT, DOUBLE], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4556, "f7_V_SFD_PP", VOID, [STRUCT, FLOAT, DOUBLE], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4573, "f7_V_SFD_FII", VOID, [STRUCT, FLOAT, DOUBLE], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4590, "f7_V_SFD_DIF", VOID, [STRUCT, FLOAT, DOUBLE], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4607, "f7_V_SFD_PID", VOID, [STRUCT, FLOAT, DOUBLE], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4624, "f7_V_SFP_P", VOID, [STRUCT, FLOAT, POINTER], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4641, "f7_V_SFP_III", VOID, [STRUCT, FLOAT, POINTER], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4658, "f7_V_SFP_FIF", VOID, [STRUCT, FLOAT, POINTER], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4675, "f7_V_SFP_DID", VOID, [STRUCT, FLOAT, POINTER], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4692, "f7_V_SFP_PIP", VOID, [STRUCT, FLOAT, POINTER], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4709, "f7_V_SFS_II", VOID, [STRUCT, FLOAT, STRUCT], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4726, "f7_V_SFS_IIF", VOID, [STRUCT, FLOAT, STRUCT], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4743, "f7_V_SFS_FID", VOID, [STRUCT, FLOAT, STRUCT], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4760, "f7_V_SFS_DIP", VOID, [STRUCT, FLOAT, STRUCT], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4777, "f7_V_SFS_PFI", VOID, [STRUCT, FLOAT, STRUCT], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4794, "f7_V_SDI_IF", VOID, [STRUCT, DOUBLE, INT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4811, "f8_V_SDI_IID", VOID, [STRUCT, DOUBLE, INT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4828, "f8_V_SDI_FIP", VOID, [STRUCT, DOUBLE, INT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4845, "f8_V_SDI_DFI", VOID, [STRUCT, DOUBLE, INT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4862, "f8_V_SDI_PFF", VOID, [STRUCT, DOUBLE, INT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4879, "f8_V_SDF_ID", VOID, [STRUCT, DOUBLE, FLOAT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4896, "f8_V_SDF_IIP", VOID, [STRUCT, DOUBLE, FLOAT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4913, "f8_V_SDF_FFI", VOID, [STRUCT, DOUBLE, FLOAT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4930, "f8_V_SDF_DFF", VOID, [STRUCT, DOUBLE, FLOAT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(4947, "f8_V_SDF_PFD", VOID, [STRUCT, DOUBLE, FLOAT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(4964, "f8_V_SDD_IP", VOID, [STRUCT, DOUBLE, DOUBLE], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(4981, "f8_V_SDD_IFI", VOID, [STRUCT, DOUBLE, DOUBLE], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(4998, "f8_V_SDD_FFF", VOID, [STRUCT, DOUBLE, DOUBLE], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5015, "f8_V_SDD_DFD", VOID, [STRUCT, DOUBLE, DOUBLE], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5032, "f8_V_SDD_PFP", VOID, [STRUCT, DOUBLE, DOUBLE], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5049, "f8_V_SDP_FI", VOID, [STRUCT, DOUBLE, POINTER], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(5066, "f8_V_SDP_IFF", VOID, [STRUCT, DOUBLE, POINTER], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5083, "f8_V_SDP_FFD", VOID, [STRUCT, DOUBLE, POINTER], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5100, "f8_V_SDP_DFP", VOID, [STRUCT, DOUBLE, POINTER], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5117, "f8_V_SDP_PDI", VOID, [STRUCT, DOUBLE, POINTER], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(5134, "f8_V_SDS_FF", VOID, [STRUCT, DOUBLE, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5151, "f8_V_SDS_IFD", VOID, [STRUCT, DOUBLE, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5168, "f8_V_SDS_FFP", VOID, [STRUCT, DOUBLE, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5185, "f8_V_SDS_DDI", VOID, [STRUCT, DOUBLE, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(5202, "f8_V_SDS_PDF", VOID, [STRUCT, DOUBLE, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5219, "f8_V_SPI_FD", VOID, [STRUCT, POINTER, INT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5236, "f8_V_SPI_IFP", VOID, [STRUCT, POINTER, INT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5253, "f8_V_SPI_FDI", VOID, [STRUCT, POINTER, INT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(5270, "f8_V_SPI_DDF", VOID, [STRUCT, POINTER, INT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5287, "f8_V_SPI_PDD", VOID, [STRUCT, POINTER, INT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5304, "f8_V_SPF_FP", VOID, [STRUCT, POINTER, FLOAT], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5321, "f8_V_SPF_IDI", VOID, [STRUCT, POINTER, FLOAT], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(5338, "f8_V_SPF_FDF", VOID, [STRUCT, POINTER, FLOAT], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5355, "f8_V_SPF_DDD", VOID, [STRUCT, POINTER, FLOAT], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5372, "f8_V_SPF_PDP", VOID, [STRUCT, POINTER, FLOAT], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5389, "f8_V_SPD_DI", VOID, [STRUCT, POINTER, DOUBLE], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(5406, "f9_V_SPD_IDF", VOID, [STRUCT, POINTER, DOUBLE], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5423, "f9_V_SPD_FDD", VOID, [STRUCT, POINTER, DOUBLE], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5440, "f9_V_SPD_DDP", VOID, [STRUCT, POINTER, DOUBLE], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5457, "f9_V_SPD_PPI", VOID, [STRUCT, POINTER, DOUBLE], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(5474, "f9_V_SPP_DF", VOID, [STRUCT, POINTER, POINTER], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5491, "f9_V_SPP_IDD", VOID, [STRUCT, POINTER, POINTER], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5508, "f9_V_SPP_FDP", VOID, [STRUCT, POINTER, POINTER], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5525, "f9_V_SPP_DPI", VOID, [STRUCT, POINTER, POINTER], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(5542, "f9_V_SPP_PPF", VOID, [STRUCT, POINTER, POINTER], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5559, "f9_V_SPS_DD", VOID, [STRUCT, POINTER, STRUCT], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5576, "f9_V_SPS_IDP", VOID, [STRUCT, POINTER, STRUCT], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5593, "f9_V_SPS_FPI", VOID, [STRUCT, POINTER, STRUCT], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(5610, "f9_V_SPS_DPF", VOID, [STRUCT, POINTER, STRUCT], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5627, "f9_V_SPS_PPD", VOID, [STRUCT, POINTER, STRUCT], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5644, "f9_V_SSI_DP", VOID, [STRUCT, STRUCT, INT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5661, "f9_V_SSI_IPI", VOID, [STRUCT, STRUCT, INT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(5678, "f9_V_SSI_FPF", VOID, [STRUCT, STRUCT, INT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5695, "f9_V_SSI_DPD", VOID, [STRUCT, STRUCT, INT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5712, "f9_V_SSI_PPP", VOID, [STRUCT, STRUCT, INT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5729, "f9_V_SSF_PI", VOID, [STRUCT, STRUCT, FLOAT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(5746, "f9_V_SSF_IPF", VOID, [STRUCT, STRUCT, FLOAT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5763, "f9_V_SSF_FPD", VOID, [STRUCT, STRUCT, FLOAT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5780, "f9_V_SSF_DPP", VOID, [STRUCT, STRUCT, FLOAT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5797, "f9_V_SSD_I", VOID, [STRUCT, STRUCT, DOUBLE], [INT]): success
test TestUpcallAsync.testUpcallsAsync(5814, "f9_V_SSD_PF", VOID, [STRUCT, STRUCT, DOUBLE], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5831, "f9_V_SSD_IPD", VOID, [STRUCT, STRUCT, DOUBLE], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5848, "f9_V_SSD_FPP", VOID, [STRUCT, STRUCT, DOUBLE], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5865, "f9_V_SSD_PII", VOID, [STRUCT, STRUCT, DOUBLE], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(5882, "f9_V_SSP_F", VOID, [STRUCT, STRUCT, POINTER], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5899, "f9_V_SSP_PD", VOID, [STRUCT, STRUCT, POINTER], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5916, "f9_V_SSP_IPP", VOID, [STRUCT, STRUCT, POINTER], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(5933, "f9_V_SSP_DII", VOID, [STRUCT, STRUCT, POINTER], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(5950, "f9_V_SSP_PIF", VOID, [STRUCT, STRUCT, POINTER], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(5967, "f9_V_SSS_D", VOID, [STRUCT, STRUCT, STRUCT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(5984, "f9_V_SSS_PP", VOID, [STRUCT, STRUCT, STRUCT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6001, "f10_V_SSS_FII", VOID, [STRUCT, STRUCT, STRUCT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6018, "f10_V_SSS_DIF", VOID, [STRUCT, STRUCT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6035, "f10_V_SSS_PID", VOID, [STRUCT, STRUCT, STRUCT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6052, "f10_P_P_", NON_VOID, [POINTER], []): success
test TestUpcallAsync.testUpcallsAsync(6069, "f10_S_S_PI", NON_VOID, [STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(6086, "f10_S_S_IPF", NON_VOID, [STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6103, "f10_S_S_FPD", NON_VOID, [STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6120, "f10_S_S_DPP", NON_VOID, [STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6137, "f10_I_II_", NON_VOID, [INT, INT], []): success
test TestUpcallAsync.testUpcallsAsync(6154, "f10_I_IS_DF", NON_VOID, [INT, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6171, "f10_I_IS_IDD", NON_VOID, [INT, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6188, "f10_I_IS_FDP", NON_VOID, [INT, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6205, "f10_I_IS_DPI", NON_VOID, [INT, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(6222, "f10_I_IS_PPF", NON_VOID, [INT, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6239, "f10_F_FS_FD", NON_VOID, [FLOAT, STRUCT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6256, "f10_F_FS_IFP", NON_VOID, [FLOAT, STRUCT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6273, "f10_F_FS_FDI", NON_VOID, [FLOAT, STRUCT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(6290, "f10_F_FS_DDF", NON_VOID, [FLOAT, STRUCT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6307, "f10_F_FS_PDD", NON_VOID, [FLOAT, STRUCT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6324, "f10_D_DS_IP", NON_VOID, [DOUBLE, STRUCT], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6341, "f10_D_DS_IFI", NON_VOID, [DOUBLE, STRUCT], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6358, "f10_D_DS_FFF", NON_VOID, [DOUBLE, STRUCT], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6375, "f10_D_DS_DFD", NON_VOID, [DOUBLE, STRUCT], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6392, "f10_D_DS_PFP", NON_VOID, [DOUBLE, STRUCT], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6409, "f10_P_PS_II", NON_VOID, [POINTER, STRUCT], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6426, "f10_P_PS_IIF", NON_VOID, [POINTER, STRUCT], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6443, "f10_P_PS_FID", NON_VOID, [POINTER, STRUCT], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6460, "f10_P_PS_DIP", NON_VOID, [POINTER, STRUCT], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6477, "f10_P_PS_PFI", NON_VOID, [POINTER, STRUCT], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6494, "f10_S_SI_IF", NON_VOID, [STRUCT, INT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6511, "f10_S_SI_IID", NON_VOID, [STRUCT, INT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6528, "f10_S_SI_FIP", NON_VOID, [STRUCT, INT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6545, "f10_S_SI_DFI", NON_VOID, [STRUCT, INT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6562, "f10_S_SI_PFF", NON_VOID, [STRUCT, INT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6579, "f10_S_SF_ID", NON_VOID, [STRUCT, FLOAT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6596, "f10_S_SF_IIP", NON_VOID, [STRUCT, FLOAT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6613, "f11_S_SF_FFI", NON_VOID, [STRUCT, FLOAT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6630, "f11_S_SF_DFF", NON_VOID, [STRUCT, FLOAT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6647, "f11_S_SF_PFD", NON_VOID, [STRUCT, FLOAT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6664, "f11_S_SD_IP", NON_VOID, [STRUCT, DOUBLE], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6681, "f11_S_SD_IFI", NON_VOID, [STRUCT, DOUBLE], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6698, "f11_S_SD_FFF", NON_VOID, [STRUCT, DOUBLE], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6715, "f11_S_SD_DFD", NON_VOID, [STRUCT, DOUBLE], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6732, "f11_S_SD_PFP", NON_VOID, [STRUCT, DOUBLE], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6749, "f11_S_SP_FI", NON_VOID, [STRUCT, POINTER], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6766, "f11_S_SP_IFF", NON_VOID, [STRUCT, POINTER], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6783, "f11_S_SP_FFD", NON_VOID, [STRUCT, POINTER], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6800, "f11_S_SP_DFP", NON_VOID, [STRUCT, POINTER], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6817, "f11_S_SP_PDI", NON_VOID, [STRUCT, POINTER], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(6834, "f11_S_SS_FF", NON_VOID, [STRUCT, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6851, "f11_S_SS_IFD", NON_VOID, [STRUCT, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6868, "f11_S_SS_FFP", NON_VOID, [STRUCT, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6885, "f11_S_SS_DDI", NON_VOID, [STRUCT, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(6902, "f11_S_SS_PDF", NON_VOID, [STRUCT, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6919, "f11_I_IIS_ID", NON_VOID, [INT, INT, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(6936, "f11_I_IIS_IIP", NON_VOID, [INT, INT, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(6953, "f11_I_IIS_FFI", NON_VOID, [INT, INT, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(6970, "f11_I_IIS_DFF", NON_VOID, [INT, INT, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(6987, "f11_I_IIS_PFD", NON_VOID, [INT, INT, STRUCT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7004, "f11_I_IFS_P", NON_VOID, [INT, FLOAT, STRUCT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7021, "f11_I_IFS_III", NON_VOID, [INT, FLOAT, STRUCT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7038, "f11_I_IFS_FIF", NON_VOID, [INT, FLOAT, STRUCT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7055, "f11_I_IFS_DID", NON_VOID, [INT, FLOAT, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7072, "f11_I_IFS_PIP", NON_VOID, [INT, FLOAT, STRUCT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7089, "f11_I_IDS_I", NON_VOID, [INT, DOUBLE, STRUCT], [INT]): success
test TestUpcallAsync.testUpcallsAsync(7106, "f11_I_IDS_PF", NON_VOID, [INT, DOUBLE, STRUCT], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7123, "f11_I_IDS_IPD", NON_VOID, [INT, DOUBLE, STRUCT], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7140, "f11_I_IDS_FPP", NON_VOID, [INT, DOUBLE, STRUCT], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7157, "f11_I_IDS_PII", NON_VOID, [INT, DOUBLE, STRUCT], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7174, "f11_I_IPF_", NON_VOID, [INT, POINTER, FLOAT], []): success
test TestUpcallAsync.testUpcallsAsync(7191, "f11_I_IPS_DD", NON_VOID, [INT, POINTER, STRUCT], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7208, "f12_I_IPS_IDP", NON_VOID, [INT, POINTER, STRUCT], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7225, "f12_I_IPS_FPI", NON_VOID, [INT, POINTER, STRUCT], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(7242, "f12_I_IPS_DPF", NON_VOID, [INT, POINTER, STRUCT], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7259, "f12_I_IPS_PPD", NON_VOID, [INT, POINTER, STRUCT], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7276, "f12_I_ISI_DP", NON_VOID, [INT, STRUCT, INT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7293, "f12_I_ISI_IPI", NON_VOID, [INT, STRUCT, INT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(7310, "f12_I_ISI_FPF", NON_VOID, [INT, STRUCT, INT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7327, "f12_I_ISI_DPD", NON_VOID, [INT, STRUCT, INT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7344, "f12_I_ISI_PPP", NON_VOID, [INT, STRUCT, INT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7361, "f12_I_ISF_PI", NON_VOID, [INT, STRUCT, FLOAT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(7378, "f12_I_ISF_IPF", NON_VOID, [INT, STRUCT, FLOAT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7395, "f12_I_ISF_FPD", NON_VOID, [INT, STRUCT, FLOAT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7412, "f12_I_ISF_DPP", NON_VOID, [INT, STRUCT, FLOAT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7429, "f12_I_ISD_I", NON_VOID, [INT, STRUCT, DOUBLE], [INT]): success
test TestUpcallAsync.testUpcallsAsync(7446, "f12_I_ISD_PF", NON_VOID, [INT, STRUCT, DOUBLE], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7463, "f12_I_ISD_IPD", NON_VOID, [INT, STRUCT, DOUBLE], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7480, "f12_I_ISD_FPP", NON_VOID, [INT, STRUCT, DOUBLE], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7497, "f12_I_ISD_PII", NON_VOID, [INT, STRUCT, DOUBLE], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7514, "f12_I_ISP_F", NON_VOID, [INT, STRUCT, POINTER], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7531, "f12_I_ISP_PD", NON_VOID, [INT, STRUCT, POINTER], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7548, "f12_I_ISP_IPP", NON_VOID, [INT, STRUCT, POINTER], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7565, "f12_I_ISP_DII", NON_VOID, [INT, STRUCT, POINTER], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7582, "f12_I_ISP_PIF", NON_VOID, [INT, STRUCT, POINTER], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7599, "f12_I_ISS_D", NON_VOID, [INT, STRUCT, STRUCT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7616, "f12_I_ISS_PP", NON_VOID, [INT, STRUCT, STRUCT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7633, "f12_I_ISS_FII", NON_VOID, [INT, STRUCT, STRUCT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7650, "f12_I_ISS_DIF", NON_VOID, [INT, STRUCT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7667, "f12_I_ISS_PID", NON_VOID, [INT, STRUCT, STRUCT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7684, "f12_F_FIP_", NON_VOID, [FLOAT, INT, POINTER], []): success
test TestUpcallAsync.testUpcallsAsync(7701, "f12_F_FIS_PI", NON_VOID, [FLOAT, INT, STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(7718, "f12_F_FIS_IPF", NON_VOID, [FLOAT, INT, STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7735, "f12_F_FIS_FPD", NON_VOID, [FLOAT, INT, STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7752, "f12_F_FIS_DPP", NON_VOID, [FLOAT, INT, STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7769, "f12_F_FFI_", NON_VOID, [FLOAT, FLOAT, INT], []): success
test TestUpcallAsync.testUpcallsAsync(7786, "f12_F_FFS_DF", NON_VOID, [FLOAT, FLOAT, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7803, "f13_F_FFS_IDD", NON_VOID, [FLOAT, FLOAT, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7820, "f13_F_FFS_FDP", NON_VOID, [FLOAT, FLOAT, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7837, "f13_F_FFS_DPI", NON_VOID, [FLOAT, FLOAT, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(7854, "f13_F_FFS_PPF", NON_VOID, [FLOAT, FLOAT, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7871, "f13_F_FDS_FD", NON_VOID, [FLOAT, DOUBLE, STRUCT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7888, "f13_F_FDS_IFP", NON_VOID, [FLOAT, DOUBLE, STRUCT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7905, "f13_F_FDS_FDI", NON_VOID, [FLOAT, DOUBLE, STRUCT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(7922, "f13_F_FDS_DDF", NON_VOID, [FLOAT, DOUBLE, STRUCT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(7939, "f13_F_FDS_PDD", NON_VOID, [FLOAT, DOUBLE, STRUCT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(7956, "f13_F_FPS_IP", NON_VOID, [FLOAT, POINTER, STRUCT], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(7973, "f13_F_FPS_IFI", NON_VOID, [FLOAT, POINTER, STRUCT], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(7990, "f13_F_FPS_FFF", NON_VOID, [FLOAT, POINTER, STRUCT], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8007, "f13_F_FPS_DFD", NON_VOID, [FLOAT, POINTER, STRUCT], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8024, "f13_F_FPS_PFP", NON_VOID, [FLOAT, POINTER, STRUCT], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8041, "f13_F_FSI_FI", NON_VOID, [FLOAT, STRUCT, INT], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8058, "f13_F_FSI_IFF", NON_VOID, [FLOAT, STRUCT, INT], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8075, "f13_F_FSI_FFD", NON_VOID, [FLOAT, STRUCT, INT], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8092, "f13_F_FSI_DFP", NON_VOID, [FLOAT, STRUCT, INT], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8109, "f13_F_FSI_PDI", NON_VOID, [FLOAT, STRUCT, INT], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8126, "f13_F_FSF_FF", NON_VOID, [FLOAT, STRUCT, FLOAT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8143, "f13_F_FSF_IFD", NON_VOID, [FLOAT, STRUCT, FLOAT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8160, "f13_F_FSF_FFP", NON_VOID, [FLOAT, STRUCT, FLOAT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8177, "f13_F_FSF_DDI", NON_VOID, [FLOAT, STRUCT, FLOAT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8194, "f13_F_FSF_PDF", NON_VOID, [FLOAT, STRUCT, FLOAT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8211, "f13_F_FSD_FD", NON_VOID, [FLOAT, STRUCT, DOUBLE], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8228, "f13_F_FSD_IFP", NON_VOID, [FLOAT, STRUCT, DOUBLE], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8245, "f13_F_FSD_FDI", NON_VOID, [FLOAT, STRUCT, DOUBLE], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8262, "f13_F_FSD_DDF", NON_VOID, [FLOAT, STRUCT, DOUBLE], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8279, "f13_F_FSD_PDD", NON_VOID, [FLOAT, STRUCT, DOUBLE], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8296, "f13_F_FSP_FP", NON_VOID, [FLOAT, STRUCT, POINTER], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8313, "f13_F_FSP_IDI", NON_VOID, [FLOAT, STRUCT, POINTER], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8330, "f13_F_FSP_FDF", NON_VOID, [FLOAT, STRUCT, POINTER], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8347, "f13_F_FSP_DDD", NON_VOID, [FLOAT, STRUCT, POINTER], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8364, "f13_F_FSP_PDP", NON_VOID, [FLOAT, STRUCT, POINTER], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8381, "f13_F_FSS_DI", NON_VOID, [FLOAT, STRUCT, STRUCT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8398, "f13_F_FSS_IDF", NON_VOID, [FLOAT, STRUCT, STRUCT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8415, "f14_F_FSS_FDD", NON_VOID, [FLOAT, STRUCT, STRUCT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8432, "f14_F_FSS_DDP", NON_VOID, [FLOAT, STRUCT, STRUCT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8449, "f14_F_FSS_PPI", NON_VOID, [FLOAT, STRUCT, STRUCT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(8466, "f14_D_DIS_FF", NON_VOID, [DOUBLE, INT, STRUCT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8483, "f14_D_DIS_IFD", NON_VOID, [DOUBLE, INT, STRUCT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8500, "f14_D_DIS_FFP", NON_VOID, [DOUBLE, INT, STRUCT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8517, "f14_D_DIS_DDI", NON_VOID, [DOUBLE, INT, STRUCT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(8534, "f14_D_DIS_PDF", NON_VOID, [DOUBLE, INT, STRUCT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8551, "f14_D_DFS_ID", NON_VOID, [DOUBLE, FLOAT, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8568, "f14_D_DFS_IIP", NON_VOID, [DOUBLE, FLOAT, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8585, "f14_D_DFS_FFI", NON_VOID, [DOUBLE, FLOAT, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8602, "f14_D_DFS_DFF", NON_VOID, [DOUBLE, FLOAT, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8619, "f14_D_DFS_PFD", NON_VOID, [DOUBLE, FLOAT, STRUCT], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8636, "f14_D_DDS_P", NON_VOID, [DOUBLE, DOUBLE, STRUCT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8653, "f14_D_DDS_III", NON_VOID, [DOUBLE, DOUBLE, STRUCT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8670, "f14_D_DDS_FIF", NON_VOID, [DOUBLE, DOUBLE, STRUCT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8687, "f14_D_DDS_DID", NON_VOID, [DOUBLE, DOUBLE, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8704, "f14_D_DDS_PIP", NON_VOID, [DOUBLE, DOUBLE, STRUCT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8721, "f14_D_DPS_I", NON_VOID, [DOUBLE, POINTER, STRUCT], [INT]): success
test TestUpcallAsync.testUpcallsAsync(8738, "f14_D_DPS_PF", NON_VOID, [DOUBLE, POINTER, STRUCT], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8755, "f14_D_DPS_IPD", NON_VOID, [DOUBLE, POINTER, STRUCT], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8772, "f14_D_DPS_FPP", NON_VOID, [DOUBLE, POINTER, STRUCT], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8789, "f14_D_DPS_PII", NON_VOID, [DOUBLE, POINTER, STRUCT], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8806, "f14_D_DSI_F", NON_VOID, [DOUBLE, STRUCT, INT], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8823, "f14_D_DSI_PD", NON_VOID, [DOUBLE, STRUCT, INT], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8840, "f14_D_DSI_IPP", NON_VOID, [DOUBLE, STRUCT, INT], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8857, "f14_D_DSI_DII", NON_VOID, [DOUBLE, STRUCT, INT], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8874, "f14_D_DSI_PIF", NON_VOID, [DOUBLE, STRUCT, INT], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8891, "f14_D_DSF_D", NON_VOID, [DOUBLE, STRUCT, FLOAT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8908, "f14_D_DSF_PP", NON_VOID, [DOUBLE, STRUCT, FLOAT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8925, "f14_D_DSF_FII", NON_VOID, [DOUBLE, STRUCT, FLOAT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(8942, "f14_D_DSF_DIF", NON_VOID, [DOUBLE, STRUCT, FLOAT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(8959, "f14_D_DSF_PID", NON_VOID, [DOUBLE, STRUCT, FLOAT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(8976, "f14_D_DSD_P", NON_VOID, [DOUBLE, STRUCT, DOUBLE], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(8993, "f14_D_DSD_III", NON_VOID, [DOUBLE, STRUCT, DOUBLE], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(9010, "f15_D_DSD_FIF", NON_VOID, [DOUBLE, STRUCT, DOUBLE], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9027, "f15_D_DSD_DID", NON_VOID, [DOUBLE, STRUCT, DOUBLE], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9044, "f15_D_DSD_PIP", NON_VOID, [DOUBLE, STRUCT, DOUBLE], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9061, "f15_D_DSP_II", NON_VOID, [DOUBLE, STRUCT, POINTER], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(9078, "f15_D_DSP_IIF", NON_VOID, [DOUBLE, STRUCT, POINTER], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9095, "f15_D_DSP_FID", NON_VOID, [DOUBLE, STRUCT, POINTER], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9112, "f15_D_DSP_DIP", NON_VOID, [DOUBLE, STRUCT, POINTER], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9129, "f15_D_DSP_PFI", NON_VOID, [DOUBLE, STRUCT, POINTER], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(9146, "f15_D_DSS_IF", NON_VOID, [DOUBLE, STRUCT, STRUCT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9163, "f15_D_DSS_IID", NON_VOID, [DOUBLE, STRUCT, STRUCT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9180, "f15_D_DSS_FIP", NON_VOID, [DOUBLE, STRUCT, STRUCT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9197, "f15_D_DSS_DFI", NON_VOID, [DOUBLE, STRUCT, STRUCT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(9214, "f15_D_DSS_PFF", NON_VOID, [DOUBLE, STRUCT, STRUCT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9231, "f15_P_PIS_D", NON_VOID, [POINTER, INT, STRUCT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9248, "f15_P_PIS_PP", NON_VOID, [POINTER, INT, STRUCT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9265, "f15_P_PIS_FII", NON_VOID, [POINTER, INT, STRUCT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(9282, "f15_P_PIS_DIF", NON_VOID, [POINTER, INT, STRUCT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9299, "f15_P_PIS_PID", NON_VOID, [POINTER, INT, STRUCT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9316, "f15_P_PFP_", NON_VOID, [POINTER, FLOAT, POINTER], []): success
test TestUpcallAsync.testUpcallsAsync(9333, "f15_P_PFS_PI", NON_VOID, [POINTER, FLOAT, STRUCT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9350, "f15_P_PFS_IPF", NON_VOID, [POINTER, FLOAT, STRUCT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9367, "f15_P_PFS_FPD", NON_VOID, [POINTER, FLOAT, STRUCT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9384, "f15_P_PFS_DPP", NON_VOID, [POINTER, FLOAT, STRUCT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9401, "f15_P_PDI_", NON_VOID, [POINTER, DOUBLE, INT], []): success
test TestUpcallAsync.testUpcallsAsync(9418, "f15_P_PDS_DF", NON_VOID, [POINTER, DOUBLE, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9435, "f15_P_PDS_IDD", NON_VOID, [POINTER, DOUBLE, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9452, "f15_P_PDS_FDP", NON_VOID, [POINTER, DOUBLE, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9469, "f15_P_PDS_DPI", NON_VOID, [POINTER, DOUBLE, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9486, "f15_P_PDS_PPF", NON_VOID, [POINTER, DOUBLE, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9503, "f15_P_PPS_FD", NON_VOID, [POINTER, POINTER, STRUCT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9520, "f15_P_PPS_IFP", NON_VOID, [POINTER, POINTER, STRUCT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9537, "f15_P_PPS_FDI", NON_VOID, [POINTER, POINTER, STRUCT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(9554, "f15_P_PPS_DDF", NON_VOID, [POINTER, POINTER, STRUCT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9571, "f15_P_PPS_PDD", NON_VOID, [POINTER, POINTER, STRUCT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9588, "f15_P_PSI_FP", NON_VOID, [POINTER, STRUCT, INT], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9605, "f16_P_PSI_IDI", NON_VOID, [POINTER, STRUCT, INT], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(9622, "f16_P_PSI_FDF", NON_VOID, [POINTER, STRUCT, INT], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9639, "f16_P_PSI_DDD", NON_VOID, [POINTER, STRUCT, INT], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9656, "f16_P_PSI_PDP", NON_VOID, [POINTER, STRUCT, INT], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9673, "f16_P_PSF_DI", NON_VOID, [POINTER, STRUCT, FLOAT], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(9690, "f16_P_PSF_IDF", NON_VOID, [POINTER, STRUCT, FLOAT], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9707, "f16_P_PSF_FDD", NON_VOID, [POINTER, STRUCT, FLOAT], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9724, "f16_P_PSF_DDP", NON_VOID, [POINTER, STRUCT, FLOAT], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9741, "f16_P_PSF_PPI", NON_VOID, [POINTER, STRUCT, FLOAT], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9758, "f16_P_PSD_DF", NON_VOID, [POINTER, STRUCT, DOUBLE], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9775, "f16_P_PSD_IDD", NON_VOID, [POINTER, STRUCT, DOUBLE], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9792, "f16_P_PSD_FDP", NON_VOID, [POINTER, STRUCT, DOUBLE], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9809, "f16_P_PSD_DPI", NON_VOID, [POINTER, STRUCT, DOUBLE], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9826, "f16_P_PSD_PPF", NON_VOID, [POINTER, STRUCT, DOUBLE], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9843, "f16_P_PSP_DD", NON_VOID, [POINTER, STRUCT, POINTER], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9860, "f16_P_PSP_IDP", NON_VOID, [POINTER, STRUCT, POINTER], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9877, "f16_P_PSP_FPI", NON_VOID, [POINTER, STRUCT, POINTER], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9894, "f16_P_PSP_DPF", NON_VOID, [POINTER, STRUCT, POINTER], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9911, "f16_P_PSP_PPD", NON_VOID, [POINTER, STRUCT, POINTER], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9928, "f16_P_PSS_DP", NON_VOID, [POINTER, STRUCT, STRUCT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(9945, "f16_P_PSS_IPI", NON_VOID, [POINTER, STRUCT, STRUCT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(9962, "f16_P_PSS_FPF", NON_VOID, [POINTER, STRUCT, STRUCT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(9979, "f16_P_PSS_DPD", NON_VOID, [POINTER, STRUCT, STRUCT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(9996, "f16_P_PSS_PPP", NON_VOID, [POINTER, STRUCT, STRUCT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10013, "f16_S_SII_PI", NON_VOID, [STRUCT, INT, INT], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(10030, "f16_S_SII_IPF", NON_VOID, [STRUCT, INT, INT], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10047, "f16_S_SII_FPD", NON_VOID, [STRUCT, INT, INT], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10064, "f16_S_SII_DPP", NON_VOID, [STRUCT, INT, INT], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10081, "f16_S_SIF_I", NON_VOID, [STRUCT, INT, FLOAT], [INT]): success
test TestUpcallAsync.testUpcallsAsync(10098, "f16_S_SIF_PF", NON_VOID, [STRUCT, INT, FLOAT], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10115, "f16_S_SIF_IPD", NON_VOID, [STRUCT, INT, FLOAT], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10132, "f16_S_SIF_FPP", NON_VOID, [STRUCT, INT, FLOAT], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10149, "f16_S_SIF_PII", NON_VOID, [STRUCT, INT, FLOAT], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10166, "f16_S_SID_F", NON_VOID, [STRUCT, INT, DOUBLE], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10183, "f16_S_SID_PD", NON_VOID, [STRUCT, INT, DOUBLE], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10200, "f17_S_SID_IPP", NON_VOID, [STRUCT, INT, DOUBLE], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10217, "f17_S_SID_DII", NON_VOID, [STRUCT, INT, DOUBLE], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10234, "f17_S_SID_PIF", NON_VOID, [STRUCT, INT, DOUBLE], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10251, "f17_S_SIP_D", NON_VOID, [STRUCT, INT, POINTER], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10268, "f17_S_SIP_PP", NON_VOID, [STRUCT, INT, POINTER], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10285, "f17_S_SIP_FII", NON_VOID, [STRUCT, INT, POINTER], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10302, "f17_S_SIP_DIF", NON_VOID, [STRUCT, INT, POINTER], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10319, "f17_S_SIP_PID", NON_VOID, [STRUCT, INT, POINTER], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10336, "f17_S_SIS_P", NON_VOID, [STRUCT, INT, STRUCT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10353, "f17_S_SIS_III", NON_VOID, [STRUCT, INT, STRUCT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10370, "f17_S_SIS_FIF", NON_VOID, [STRUCT, INT, STRUCT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10387, "f17_S_SIS_DID", NON_VOID, [STRUCT, INT, STRUCT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10404, "f17_S_SIS_PIP", NON_VOID, [STRUCT, INT, STRUCT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10421, "f17_S_SFI_II", NON_VOID, [STRUCT, FLOAT, INT], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10438, "f17_S_SFI_IIF", NON_VOID, [STRUCT, FLOAT, INT], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10455, "f17_S_SFI_FID", NON_VOID, [STRUCT, FLOAT, INT], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10472, "f17_S_SFI_DIP", NON_VOID, [STRUCT, FLOAT, INT], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10489, "f17_S_SFI_PFI", NON_VOID, [STRUCT, FLOAT, INT], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10506, "f17_S_SFF_IF", NON_VOID, [STRUCT, FLOAT, FLOAT], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10523, "f17_S_SFF_IID", NON_VOID, [STRUCT, FLOAT, FLOAT], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10540, "f17_S_SFF_FIP", NON_VOID, [STRUCT, FLOAT, FLOAT], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10557, "f17_S_SFF_DFI", NON_VOID, [STRUCT, FLOAT, FLOAT], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10574, "f17_S_SFF_PFF", NON_VOID, [STRUCT, FLOAT, FLOAT], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10591, "f17_S_SFD_ID", NON_VOID, [STRUCT, FLOAT, DOUBLE], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10608, "f17_S_SFD_IIP", NON_VOID, [STRUCT, FLOAT, DOUBLE], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10625, "f17_S_SFD_FFI", NON_VOID, [STRUCT, FLOAT, DOUBLE], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10642, "f17_S_SFD_DFF", NON_VOID, [STRUCT, FLOAT, DOUBLE], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10659, "f17_S_SFD_PFD", NON_VOID, [STRUCT, FLOAT, DOUBLE], [POINTER, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10676, "f17_S_SFP_IP", NON_VOID, [STRUCT, FLOAT, POINTER], [INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10693, "f17_S_SFP_IFI", NON_VOID, [STRUCT, FLOAT, POINTER], [INT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10710, "f17_S_SFP_FFF", NON_VOID, [STRUCT, FLOAT, POINTER], [FLOAT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10727, "f17_S_SFP_DFD", NON_VOID, [STRUCT, FLOAT, POINTER], [DOUBLE, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10744, "f17_S_SFP_PFP", NON_VOID, [STRUCT, FLOAT, POINTER], [POINTER, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10761, "f17_S_SFS_FI", NON_VOID, [STRUCT, FLOAT, STRUCT], [FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(10778, "f17_S_SFS_IFF", NON_VOID, [STRUCT, FLOAT, STRUCT], [INT, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10795, "f17_S_SFS_FFD", NON_VOID, [STRUCT, FLOAT, STRUCT], [FLOAT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10812, "f18_S_SFS_DFP", NON_VOID, [STRUCT, FLOAT, STRUCT], [DOUBLE, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10829, "f18_S_SFS_PDI", NON_VOID, [STRUCT, FLOAT, STRUCT], [POINTER, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(10846, "f18_S_SDI_FF", NON_VOID, [STRUCT, DOUBLE, INT], [FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10863, "f18_S_SDI_IFD", NON_VOID, [STRUCT, DOUBLE, INT], [INT, FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10880, "f18_S_SDI_FFP", NON_VOID, [STRUCT, DOUBLE, INT], [FLOAT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10897, "f18_S_SDI_DDI", NON_VOID, [STRUCT, DOUBLE, INT], [DOUBLE, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(10914, "f18_S_SDI_PDF", NON_VOID, [STRUCT, DOUBLE, INT], [POINTER, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10931, "f18_S_SDF_FD", NON_VOID, [STRUCT, DOUBLE, FLOAT], [FLOAT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(10948, "f18_S_SDF_IFP", NON_VOID, [STRUCT, DOUBLE, FLOAT], [INT, FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(10965, "f18_S_SDF_FDI", NON_VOID, [STRUCT, DOUBLE, FLOAT], [FLOAT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(10982, "f18_S_SDF_DDF", NON_VOID, [STRUCT, DOUBLE, FLOAT], [DOUBLE, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(10999, "f18_S_SDF_PDD", NON_VOID, [STRUCT, DOUBLE, FLOAT], [POINTER, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11016, "f18_S_SDD_FP", NON_VOID, [STRUCT, DOUBLE, DOUBLE], [FLOAT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11033, "f18_S_SDD_IDI", NON_VOID, [STRUCT, DOUBLE, DOUBLE], [INT, DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(11050, "f18_S_SDD_FDF", NON_VOID, [STRUCT, DOUBLE, DOUBLE], [FLOAT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11067, "f18_S_SDD_DDD", NON_VOID, [STRUCT, DOUBLE, DOUBLE], [DOUBLE, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11084, "f18_S_SDD_PDP", NON_VOID, [STRUCT, DOUBLE, DOUBLE], [POINTER, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11101, "f18_S_SDP_DI", NON_VOID, [STRUCT, DOUBLE, POINTER], [DOUBLE, INT]): success
test TestUpcallAsync.testUpcallsAsync(11118, "f18_S_SDP_IDF", NON_VOID, [STRUCT, DOUBLE, POINTER], [INT, DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11135, "f18_S_SDP_FDD", NON_VOID, [STRUCT, DOUBLE, POINTER], [FLOAT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11152, "f18_S_SDP_DDP", NON_VOID, [STRUCT, DOUBLE, POINTER], [DOUBLE, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11169, "f18_S_SDP_PPI", NON_VOID, [STRUCT, DOUBLE, POINTER], [POINTER, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(11186, "f18_S_SDS_DF", NON_VOID, [STRUCT, DOUBLE, STRUCT], [DOUBLE, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11203, "f18_S_SDS_IDD", NON_VOID, [STRUCT, DOUBLE, STRUCT], [INT, DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11220, "f18_S_SDS_FDP", NON_VOID, [STRUCT, DOUBLE, STRUCT], [FLOAT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11237, "f18_S_SDS_DPI", NON_VOID, [STRUCT, DOUBLE, STRUCT], [DOUBLE, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(11254, "f18_S_SDS_PPF", NON_VOID, [STRUCT, DOUBLE, STRUCT], [POINTER, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11271, "f18_S_SPI_DD", NON_VOID, [STRUCT, POINTER, INT], [DOUBLE, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11288, "f18_S_SPI_IDP", NON_VOID, [STRUCT, POINTER, INT], [INT, DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11305, "f18_S_SPI_FPI", NON_VOID, [STRUCT, POINTER, INT], [FLOAT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(11322, "f18_S_SPI_DPF", NON_VOID, [STRUCT, POINTER, INT], [DOUBLE, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11339, "f18_S_SPI_PPD", NON_VOID, [STRUCT, POINTER, INT], [POINTER, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11356, "f18_S_SPF_DP", NON_VOID, [STRUCT, POINTER, FLOAT], [DOUBLE, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11373, "f18_S_SPF_IPI", NON_VOID, [STRUCT, POINTER, FLOAT], [INT, POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(11390, "f18_S_SPF_FPF", NON_VOID, [STRUCT, POINTER, FLOAT], [FLOAT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11407, "f19_S_SPF_DPD", NON_VOID, [STRUCT, POINTER, FLOAT], [DOUBLE, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11424, "f19_S_SPF_PPP", NON_VOID, [STRUCT, POINTER, FLOAT], [POINTER, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11441, "f19_S_SPD_PI", NON_VOID, [STRUCT, POINTER, DOUBLE], [POINTER, INT]): success
test TestUpcallAsync.testUpcallsAsync(11458, "f19_S_SPD_IPF", NON_VOID, [STRUCT, POINTER, DOUBLE], [INT, POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11475, "f19_S_SPD_FPD", NON_VOID, [STRUCT, POINTER, DOUBLE], [FLOAT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11492, "f19_S_SPD_DPP", NON_VOID, [STRUCT, POINTER, DOUBLE], [DOUBLE, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11509, "f19_S_SPP_I", NON_VOID, [STRUCT, POINTER, POINTER], [INT]): success
test TestUpcallAsync.testUpcallsAsync(11526, "f19_S_SPP_PF", NON_VOID, [STRUCT, POINTER, POINTER], [POINTER, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11543, "f19_S_SPP_IPD", NON_VOID, [STRUCT, POINTER, POINTER], [INT, POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11560, "f19_S_SPP_FPP", NON_VOID, [STRUCT, POINTER, POINTER], [FLOAT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11577, "f19_S_SPP_PII", NON_VOID, [STRUCT, POINTER, POINTER], [POINTER, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11594, "f19_S_SPS_F", NON_VOID, [STRUCT, POINTER, STRUCT], [FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11611, "f19_S_SPS_PD", NON_VOID, [STRUCT, POINTER, STRUCT], [POINTER, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11628, "f19_S_SPS_IPP", NON_VOID, [STRUCT, POINTER, STRUCT], [INT, POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11645, "f19_S_SPS_DII", NON_VOID, [STRUCT, POINTER, STRUCT], [DOUBLE, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11662, "f19_S_SPS_PIF", NON_VOID, [STRUCT, POINTER, STRUCT], [POINTER, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11679, "f19_S_SSI_D", NON_VOID, [STRUCT, STRUCT, INT], [DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11696, "f19_S_SSI_PP", NON_VOID, [STRUCT, STRUCT, INT], [POINTER, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11713, "f19_S_SSI_FII", NON_VOID, [STRUCT, STRUCT, INT], [FLOAT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11730, "f19_S_SSI_DIF", NON_VOID, [STRUCT, STRUCT, INT], [DOUBLE, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11747, "f19_S_SSI_PID", NON_VOID, [STRUCT, STRUCT, INT], [POINTER, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11764, "f19_S_SSF_P", NON_VOID, [STRUCT, STRUCT, FLOAT], [POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11781, "f19_S_SSF_III", NON_VOID, [STRUCT, STRUCT, FLOAT], [INT, INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11798, "f19_S_SSF_FIF", NON_VOID, [STRUCT, STRUCT, FLOAT], [FLOAT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11815, "f19_S_SSF_DID", NON_VOID, [STRUCT, STRUCT, FLOAT], [DOUBLE, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11832, "f19_S_SSF_PIP", NON_VOID, [STRUCT, STRUCT, FLOAT], [POINTER, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11849, "f19_S_SSD_II", NON_VOID, [STRUCT, STRUCT, DOUBLE], [INT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11866, "f19_S_SSD_IIF", NON_VOID, [STRUCT, STRUCT, DOUBLE], [INT, INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11883, "f19_S_SSD_FID", NON_VOID, [STRUCT, STRUCT, DOUBLE], [FLOAT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11900, "f19_S_SSD_DIP", NON_VOID, [STRUCT, STRUCT, DOUBLE], [DOUBLE, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11917, "f19_S_SSD_PFI", NON_VOID, [STRUCT, STRUCT, DOUBLE], [POINTER, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(11934, "f19_S_SSP_IF", NON_VOID, [STRUCT, STRUCT, POINTER], [INT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(11951, "f19_S_SSP_IID", NON_VOID, [STRUCT, STRUCT, POINTER], [INT, INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(11968, "f19_S_SSP_FIP", NON_VOID, [STRUCT, STRUCT, POINTER], [FLOAT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(11985, "f19_S_SSP_DFI", NON_VOID, [STRUCT, STRUCT, POINTER], [DOUBLE, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(12002, "f20_S_SSP_PFF", NON_VOID, [STRUCT, STRUCT, POINTER], [POINTER, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(12019, "f20_S_SSS_ID", NON_VOID, [STRUCT, STRUCT, STRUCT], [INT, DOUBLE]): success
test TestUpcallAsync.testUpcallsAsync(12036, "f20_S_SSS_IIP", NON_VOID, [STRUCT, STRUCT, STRUCT], [INT, INT, POINTER]): success
test TestUpcallAsync.testUpcallsAsync(12053, "f20_S_SSS_FFI", NON_VOID, [STRUCT, STRUCT, STRUCT], [FLOAT, FLOAT, INT]): success
test TestUpcallAsync.testUpcallsAsync(12070, "f20_S_SSS_DFF", NON_VOID, [STRUCT, STRUCT, STRUCT], [DOUBLE, FLOAT, FLOAT]): success
test TestUpcallAsync.testUpcallsAsync(12087, "f20_S_SSS_PFD", NON_VOID, [STRUCT, STRUCT, STRUCT], [POINTER, FLOAT, DOUBLE]): success

===============================================
java/foreign/TestUpcallAsync.java
Total tests run: 712, Passes: 712, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(43/3825)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
CLASSPATH=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/foreign/TestUpcallAsync.java \\
        -Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestUpcallAsync.java \\
        -Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d \\
        -Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestUpcallAsync.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.modules=java.base/jdk.internal.foreign \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=12.5 \\
        -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -ea \\
        -esa \\
        -XX:-CreateCoredumpOnCrash \\
        -Djava.library.path=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -XX:+IgnoreUnrecognizedVMOptions \\
        -XX:-VerifyDependencies \\
        --enable-native-access=ALL-UNNAMED \\
        -Dgenerator.sample.factor=17 \\
        com.sun.javatest.regtest.agent.MainWrapper /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/foreign/TestUpcallAsync.d/testng.0.jta java/foreign/TestUpcallAsync.java false TestUpcallAsync
result: Passed. Execution successful


test result: Passed. Execution successful
