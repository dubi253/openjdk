#Test Results (version 2)
#Mon Apr 29 00:37:45 UTC 2024
#-----testdescription-----
$file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java
$root=/home/runner/work/openjdk/openjdk/test/jdk
keywords=testng
modules=java.base/jdk.internal.foreign
run=USER_SPECIFIED testng TestStringEncoding\n
source=TestStringEncoding.java
title=\ 

#-----environment-----

#-----testresult-----
description=file\:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java
elapsed=1623 0\:00\:01.623
end=Mon Apr 29 00\:37\:45 UTC 2024
environment=regtest
execStatus=Passed. Execution successful
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=fv-az1055-577.mrg2vkl14epehdn0xjtgmxanmg.phxx.internal.cloudapp.net
javatestOS=Linux 6.5.0-1018-azure (amd64)
javatestVersion=6.0-ea+b24-2024-04-28-${BUILT_FROM_COMMIT}
jtregVersion=jtreg 7.3.1 dev 0
modules=java.base/jdk.internal.foreign
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile testng
start=Mon Apr 29 00\:37\:44 UTC 2024
test=java/foreign/TestStringEncoding.java
testJDK=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
testJDK_OS=[name\:Linux,arch\:amd64,version\:6.5.0-1018-azure,family\:linux,simple_arch\:x64,simple_version\:6.5,processors\:4,maxMemory\:16757346304,maxSwap\:4294963200]
testJDK_os.arch=amd64
testJDK_os.name=Linux
testJDK_os.version=6.5.0-1018-azure
totalTime=1623
user.name=runner
work=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/java/foreign

#section:script_messages
----------messages:(4/322)----------
JDK under test: /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c)
OpenJDK 64-Bit Server VM (build 23-internal-dubi253-4c630b0b2463c476ae1e6c8cae3ae981b793158c, mixed mode, sharing)

#section:build
----------messages:(7/226)----------
command: build TestStringEncoding
reason: Named class compiled on demand
started: Mon Apr 29 00:37:44 UTC 2024
Test directory:
  compile: TestStringEncoding
finished: Mon Apr 29 00:37:44 UTC 2024
elapsed time (seconds): 0.081
result: Passed. Build successful

#section:compile
----------messages:(8/395)----------
command: compile /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java
reason: .class file out of date or does not exist
started: Mon Apr 29 00:37:44 UTC 2024
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED
Mode: agentvm
Agent id: 2
finished: Mon Apr 29 00:37:44 UTC 2024
elapsed time (seconds): 0.081
----------configuration:(15/1030)----------
Boot Layer (javac runtime environment)
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

javac compilation environment
  add modules: java.base                      
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  source path: /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
  class path:  /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 
               /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
               /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 

----------rerun:(38/3532)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=12.5 \\
        -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk \\
        -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -J-Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -J-Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -J-Dtest.name=java/foreign/TestStringEncoding.java \\
        -J-Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java \\
        -J-Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d \\
        -J-Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d \\
        -J-Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -J-Dtest.modules=java.base/jdk.internal.foreign \\
        --add-modules java.base \\
        --add-exports java.base/jdk.internal.foreign=ALL-UNNAMED \\
        -d /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d \\
        -sourcepath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -classpath /home/runner/work/openjdk/openjdk/test/jdk/java/foreign:/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar /home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java
result: Passed. Compilation successful

#section:testng
----------messages:(8/314)----------
command: testng TestStringEncoding
reason: User specified action: run testng TestStringEncoding 
started: Mon Apr 29 00:37:44 UTC 2024
Mode: agentvm
Agent id: 7
Additional exports to unnamed modules from @modules: java.base/jdk.internal.foreign
finished: Mon Apr 29 00:37:45 UTC 2024
elapsed time (seconds): 1.538
----------configuration:(14/974)----------
Boot Layer
  class path: /home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/junit-platform-console-standalone-1.9.2.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar 
              /home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar 
  patch:      java.base /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/patches/java.base

Test Layer
  add exports: java.base/jdk.internal.foreign ALL-UNNAMED
  class path:  /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d 
               /home/runner/work/openjdk/openjdk/test/jdk/java/foreign 

----------rerun:(29/3036)*----------
cd /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/scratch/0 && \\
HOME=/home/runner \\
LANG=C.UTF-8 \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/home/runner/work/openjdk/openjdk/bundles/tests \\
XDG_CONFIG_HOME=/home/runner/.config \\
XDG_RUNTIME_DIR=/run/user/1001 \\
_JVM_DWARF_PATH=/home/runner/work/openjdk/openjdk/bundles/symbols/jdk-23 \\
    /home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23/bin/java \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=12.5 -Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=12.5 -J-Dtest.boot.jdk=/home/runner/work/openjdk/openjdk/bootjdk/jdk -J-Djava.io.tmpdir=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \\
        -Dtest.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dcompile.jdk=/home/runner/work/openjdk/openjdk/bundles/jdk/jdk-23 \\
        -Dtest.timeout.factor=4.0 \\
        -Dtest.nativepath=/home/runner/work/openjdk/openjdk/bundles/tests/jdk/jtreg/native \\
        -Dtest.root=/home/runner/work/openjdk/openjdk/test/jdk \\
        -Dtest.name=java/foreign/TestStringEncoding.java \\
        -Dtest.file=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign/TestStringEncoding.java \\
        -Dtest.src=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.src.path=/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.classes=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d \\
        -Dtest.class.path=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d \\
        -Dtest.class.path.prefix=/home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign \\
        -Dtest.modules=java.base/jdk.internal.foreign \\
        -classpath /home/runner/work/openjdk/openjdk/build/run-test-prebuilt/test-support/jtreg_test_jdk_tier1/classes/1/java/foreign/TestStringEncoding.d:/home/runner/work/openjdk/openjdk/test/jdk/java/foreign:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/testng-7.3.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/guice-5.1.0.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jcommander-1.82.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/javatest.jar:/home/runner/work/openjdk/openjdk/jtreg/installed/lib/jtreg.jar \\
        com.sun.javatest.regtest.agent.TestNGRunner java/foreign/TestStringEncoding.java false TestStringEncoding
----------System.err:(8/424)----------
WARNING: A restricted method in java.lang.foreign.AddressLayout has been called
WARNING: java.lang.foreign.AddressLayout::withTargetLayout has been called by TestStringEncoding in an unnamed module
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled


JavaTest Message: Test complete.

----------System.out:(319/32665)*----------
test TestStringEncoding.chunked_strlen_byte(): success
test TestStringEncoding.chunked_strlen_short(): success
test TestStringEncoding.expandedSegment("testing"): success
test TestStringEncoding.expandedSegment(""): success
test TestStringEncoding.expandedSegment("X"): success
test TestStringEncoding.expandedSegment("12345"): success
test TestStringEncoding.expandedSegment("yen \ufffd\ufffd"): success
test TestStringEncoding.expandedSegment("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.expandedSegment("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.expandedSegment("0"): success
test TestStringEncoding.expandedSegment("01"): success
test TestStringEncoding.expandedSegment("012"): success
test TestStringEncoding.expandedSegment("0123"): success
test TestStringEncoding.expandedSegment("01234"): success
test TestStringEncoding.expandedSegment("012345"): success
test TestStringEncoding.expandedSegment("0123456"): success
test TestStringEncoding.expandedSegment("01234567"): success
test TestStringEncoding.expandedSegment("012345678"): success
test TestStringEncoding.expandedSegment("0123456789"): success
test TestStringEncoding.nativeSegFromNativeCall("testing"): success
test TestStringEncoding.nativeSegFromNativeCall(""): success
test TestStringEncoding.nativeSegFromNativeCall("X"): success
test TestStringEncoding.nativeSegFromNativeCall("12345"): success
test TestStringEncoding.nativeSegFromNativeCall("yen \ufffd\ufffd"): success
test TestStringEncoding.nativeSegFromNativeCall("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.nativeSegFromNativeCall("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.nativeSegFromNativeCall("0"): success
test TestStringEncoding.nativeSegFromNativeCall("01"): success
test TestStringEncoding.nativeSegFromNativeCall("012"): success
test TestStringEncoding.nativeSegFromNativeCall("0123"): success
test TestStringEncoding.nativeSegFromNativeCall("01234"): success
test TestStringEncoding.nativeSegFromNativeCall("012345"): success
test TestStringEncoding.nativeSegFromNativeCall("0123456"): success
test TestStringEncoding.nativeSegFromNativeCall("01234567"): success
test TestStringEncoding.nativeSegFromNativeCall("012345678"): success
test TestStringEncoding.nativeSegFromNativeCall("0123456789"): success
test TestStringEncoding.segmentationFault(): success
test TestStringEncoding.strlen_int(): success
test TestStringEncoding.testOffset("testing"): success
test TestStringEncoding.testOffset(""): success
test TestStringEncoding.testOffset("X"): success
test TestStringEncoding.testOffset("12345"): success
test TestStringEncoding.testOffset("yen \ufffd\ufffd"): success
test TestStringEncoding.testOffset("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.testOffset("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.testOffset("0"): success
test TestStringEncoding.testOffset("01"): success
test TestStringEncoding.testOffset("012"): success
test TestStringEncoding.testOffset("0123"): success
test TestStringEncoding.testOffset("01234"): success
test TestStringEncoding.testOffset("012345"): success
test TestStringEncoding.testOffset("0123456"): success
test TestStringEncoding.testOffset("01234567"): success
test TestStringEncoding.testOffset("012345678"): success
test TestStringEncoding.testOffset("0123456789"): success
test TestStringEncoding.testPeculiarContentSingleByte(): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@17adcf3d): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@40917f2e): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@4f06ee67): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@9dad158): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@2d8377dc): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1e992da7): success
test TestStringEncoding.testStringAllocateFromWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7f65921b): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@fbe5f13): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@1a832d9b): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@73b2407): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@69343cd1): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@51f7a0a): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@788d726): success
test TestStringEncoding.testStringAllocateFromWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@3f34714): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@17d42d07): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@4fb833ad): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@250b27e8): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@162fd876): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@2c93a8f9): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@4a5738a9): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@6b24fb6e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6f876e7d): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@7e666932): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@5633d7e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@29877a54): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@4d0edc86): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@6f830990): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@32b830bb): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1cf1dc58): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@1f0e1bed): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@4114c07f): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5fe3a405): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@4a9fd673): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@7da7491d): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7e84b8ca): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7bdb209f): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@48c04484): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@49420433): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@75e390b6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@77a016a4): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@5f93d47e): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@534864f6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1b185497): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@18380c02): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@7164adc5): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@616f2707): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@5eea5138): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@2fc0ede8): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@481cf106): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@6ca8829a): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@1143bbba): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@33751fda): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@2023af78): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@4bc49d2d): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@54b9e267): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7c58eafb): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1cae5a6f): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@5156245): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@25520fc6): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@56f65a8): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@662c2720): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@5154cbb): success
test TestStringEncoding.testStringAllocateFromWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@17f308bf): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@69ed363c): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@28a00a7d): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@714c698b): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@414670a4): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@79d3dee4): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@4873f4b4): success
test TestStringEncoding.testStringGetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@3d639853): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2460d091): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@324a18a4): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@6d7bf764): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@6f5068ad): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@6c895136): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@351433f1): success
test TestStringEncoding.testStringGetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@261314c): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@458cab16): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@54608bcf): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@317b3d5): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@69432d2): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@6cd7b979): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@7a33946e): success
test TestStringEncoding.testStringGetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@9bf625d): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5e0eb54d): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@6926f3d2): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@6ef7ed80): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@4a423959): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@70e178aa): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@2a326389): success
test TestStringEncoding.testStringGetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@1c87a2e7): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@1329f396): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@21c17430): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@6c4b969d): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@3dce6c94): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@b63671b): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@4f8a793): success
test TestStringEncoding.testStringGetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@38655306): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5f5bc7d7): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@420fe348): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@33a63234): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@2844394e): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@62374ee3): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1f84fd72): success
test TestStringEncoding.testStringGetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@24b7ef14): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@636b39e6): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@30fd6a8b): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@286298a8): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@578d4046): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@1ce540c2): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@4871337e): success
test TestStringEncoding.testStringGetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@31865626): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2ae5276a): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@78d22e6b): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@3a900655): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@35e0be11): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@551e4c40): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@1fc68c92): success
test TestStringEncoding.testStringGetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@74d6503c): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3eec6fde): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@3294ca60): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@3c7ae83f): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@17dfce56): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@41320fb2): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@3f1a632f): success
test TestStringEncoding.testStringGetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@6f3e15ca): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@763bbc86): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@662a4025): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@167857e9): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@684ee63e): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@664c59d3): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@17e168d3): success
test TestStringEncoding.testStringSetWithCharset(ISO-8859-1, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@71ad0df7): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@5e6f78a0): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@4aaf9b9e): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@4348258b): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@1ae23c5): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@5b061cd): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@205b9c3d): success
test TestStringEncoding.testStringSetWithCharset(US-ASCII, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@344e0226): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@d039892): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@6bcb5e6a): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@7d2af9a4): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@79b48a63): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@385b94d3): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@2544524e): success
test TestStringEncoding.testStringSetWithCharset(UTF-16, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@29b0003e): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@13d36dd7): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@569bc81e): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@22fe5694): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@11e14612): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@77642617): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@3ffa5b): success
test TestStringEncoding.testStringSetWithCharset(UTF-16BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@71dfd209): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@479ffd66): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@52d52e46): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@4ee4fcc): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@388964fc): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@7e7e0e99): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@34db89b6): success
test TestStringEncoding.testStringSetWithCharset(UTF-16LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7339fc7b): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@7a79dcfb): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@2259c7cf): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@60bbae59): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@4b82997f): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@5f2891f9): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@78834a24): success
test TestStringEncoding.testStringSetWithCharset(UTF-32, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@61f11957): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@2ab55b97): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@3628bf44): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@976f149): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@5aa8d1f7): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@516f5d63): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@615e3233): success
test TestStringEncoding.testStringSetWithCharset(UTF-32BE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7a56cbd9): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@3f7b3c16): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@5a8830bd): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@2cb7f122): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@19b732dd): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@370e688): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@11ebe123): success
test TestStringEncoding.testStringSetWithCharset(UTF-32LE, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@7e79bcbf): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfByte@372d5f57): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfChar@3470adbe): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfShort@1fc7aaa9): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfInt@78c0278a): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfFloat@3acd033d): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfLong@cf41bed): success
test TestStringEncoding.testStringSetWithCharset(UTF-8, jdk.internal.foreign.HeapMemorySegmentImpl$OfDouble@734014dd): success
test TestStringEncoding.testStrings("testing"): success
test TestStringEncoding.testStrings(""): success
test TestStringEncoding.testStrings("X"): success
test TestStringEncoding.testStrings("12345"): success
test TestStringEncoding.testStrings("yen \ufffd\ufffd"): success
test TestStringEncoding.testStrings("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.testStrings("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.testStrings("0"): success
test TestStringEncoding.testStrings("01"): success
test TestStringEncoding.testStrings("012"): success
test TestStringEncoding.testStrings("0123"): success
test TestStringEncoding.testStrings("01234"): success
test TestStringEncoding.testStrings("012345"): success
test TestStringEncoding.testStrings("0123456"): success
test TestStringEncoding.testStrings("01234567"): success
test TestStringEncoding.testStrings("012345678"): success
test TestStringEncoding.testStrings("0123456789"): success
test TestStringEncoding.testStringsHeap("testing"): success
test TestStringEncoding.testStringsHeap(""): success
test TestStringEncoding.testStringsHeap("X"): success
test TestStringEncoding.testStringsHeap("12345"): success
test TestStringEncoding.testStringsHeap("yen \ufffd\ufffd"): success
test TestStringEncoding.testStringsHeap("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.testStringsHeap("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.testStringsHeap("0"): success
test TestStringEncoding.testStringsHeap("01"): success
test TestStringEncoding.testStringsHeap("012"): success
test TestStringEncoding.testStringsHeap("0123"): success
test TestStringEncoding.testStringsHeap("01234"): success
test TestStringEncoding.testStringsHeap("012345"): success
test TestStringEncoding.testStringsHeap("0123456"): success
test TestStringEncoding.testStringsHeap("01234567"): success
test TestStringEncoding.testStringsHeap("012345678"): success
test TestStringEncoding.testStringsHeap("0123456789"): success
test TestStringEncoding.unalignedSegmentSingleByte("testing"): success
test TestStringEncoding.unalignedSegmentSingleByte(""): success
test TestStringEncoding.unalignedSegmentSingleByte("X"): success
test TestStringEncoding.unalignedSegmentSingleByte("12345"): success
test TestStringEncoding.unalignedSegmentSingleByte("yen \ufffd\ufffd"): success
test TestStringEncoding.unalignedSegmentSingleByte("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.unalignedSegmentSingleByte("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.unalignedSegmentSingleByte("0"): success
test TestStringEncoding.unalignedSegmentSingleByte("01"): success
test TestStringEncoding.unalignedSegmentSingleByte("012"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123"): success
test TestStringEncoding.unalignedSegmentSingleByte("01234"): success
test TestStringEncoding.unalignedSegmentSingleByte("012345"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123456"): success
test TestStringEncoding.unalignedSegmentSingleByte("01234567"): success
test TestStringEncoding.unalignedSegmentSingleByte("012345678"): success
test TestStringEncoding.unalignedSegmentSingleByte("0123456789"): success
test TestStringEncoding.unboundedSegment("testing"): success
test TestStringEncoding.unboundedSegment(""): success
test TestStringEncoding.unboundedSegment("X"): success
test TestStringEncoding.unboundedSegment("12345"): success
test TestStringEncoding.unboundedSegment("yen \ufffd\ufffd"): success
test TestStringEncoding.unboundedSegment("snowman \ufffd\ufffd\ufffd"): success
test TestStringEncoding.unboundedSegment("rainbow \ufffd\ufffd\ufffd\ufffd"): success
test TestStringEncoding.unboundedSegment("0"): success
test TestStringEncoding.unboundedSegment("01"): success
test TestStringEncoding.unboundedSegment("012"): success
test TestStringEncoding.unboundedSegment("0123"): success
test TestStringEncoding.unboundedSegment("01234"): success
test TestStringEncoding.unboundedSegment("012345"): success
test TestStringEncoding.unboundedSegment("0123456"): success
test TestStringEncoding.unboundedSegment("01234567"): success
test TestStringEncoding.unboundedSegment("012345678"): success
test TestStringEncoding.unboundedSegment("0123456789"): success

===============================================
java/foreign/TestStringEncoding.java
Total tests run: 313, Passes: 313, Failures: 0, Skips: 0
===============================================

result: Passed. Execution successful


test result: Passed. Execution successful
